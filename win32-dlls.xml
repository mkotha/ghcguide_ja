<?xml version="1.0" encoding="UTF-8"?>
<chapter id="win32">
<title>Win32システムでGHCを運用する</title>

<sect1 id="ghc-windows">
<title>WindowsプラットフォームでGHCを起動する</title>

<para>
GHCのWin32用インストーラは、GHCをインストールすると同時に、ファイル接尾辞「.hs」と「.lhs」について関連付けを行い、ダブルクリックで<command>ghci</command>が起動するようにする。
</para>
<para>
<command>ghc</command>と<command>ghci</command>は、空白を含むファイル名を扱うときには引用符でエスケープする必要があることに注意。
<programlisting>
  c:\ghc\bin\ghci "c:\\Program Files\\Haskell\\Project.hs"
</programlisting>
上記のコマンドで引用符を使わなかった場合、<command>ghci</command>はファイル名を"c:\\Program"と"Files\\Haskell\\Project.hs"の二つだと解釈する。
</para>

<!-- not clear whether there are current editions of Win32 OSes that
     doesn't do this by default.

<para> Solution: don't use "Open With...", avoid spaces in file names,
or fiddle with the appropriate registry setting:
<programlisting>
  HKEY_CLASSES_ROOT\Unknown\shell\openas\command
</programlisting>
Notice how the "%1" argument is quoted (or not).
</para>
<para> This problem doesn't occur when double-clicking.
</para>
-->

</sect1>

<sect1 id="ghci-windows">
<title>WindowsでGHCiを実行する</title>

  <para>我々は、GHCiを標準のWindowsコンソールで実行することを推奨する。インストーラが追加したスタートメニューの項目から<literal>GHCi</literal>を選ぶか、<literal>スタート→プログラムを指定して実行→cmd</literal>を使ってWindowsコンソールに入り、そこから<literal>ghci</literal>を起動すれば良い。(ただし、この場合、<literal>ghci</literal>が<literal>PATH</literal>に入っている必要がある)</para>

  <para>GHCiをCygwinやMSYSのシェルから使うと、Ctrl-Cの振る舞いがおかしくなる。これらの環境ではGHCiを開始するのに<literal>ghcii.sh</literal>スクリプトを使うべきであり、そうでないとCtrl-Cを叩いたときにシェルのプロンプトに戻され、しかもGHCiのプロセスは走りつづけるという事態になる。ただし、<literal>ghcii.sh</literal>を使った場合でも、Ctrl-Cを叩いた場合、GHCiの中で走っているプログラムを中断することは(できるべきだが)できず、代わりにGHCiのプロセスが即座に殺される。この問題の原因は、CygwinとMSYSのシェル環境がCtrl-Cのイベントを非Cygwinの子プロセスに渡さない(それにはWindowsコンソールである必要があるので)ことである。</para>

  <para>例外がひとつある。<literal>CYGWIN</literal>環境変数に<literal>tty</literal>が含まれない場合、Cygwinのシェルを使うことができる。このモードでは、CygwinのシェルはWindowsのコンソールシェルとして振る舞い、コンソールイベントは子プロセスに伝播される。<literal>CYGWIN</literal>環境変数はCygwinのシェルを起動する<emphasis>前</emphasis>に設定されねばならぬことに注意。後で変更してもシェルには何の影響も与えられない。</para>

  <para>この問題が影響するのはGHCiだけでなく、GHCでコンパイルされたプログラムで、コンソールイベントを補足したいあらゆるプログラムに影響する。 <ulink url="&libraryBaseLocation;/GHC-ConsoleHandler.html">GHC.ConsoleHandler</ulink>モジュールを見よ。</para>
</sect1>

<sect1 id="terminal-interaction">
<title>端末を使った対話</title>

<para>デフォルトでは、GHCでビルドされたアプリケーションは開始時にコンソールウィンドウを開く。コンソールウィンドウなしのGUIのみのアプリケーションをビルドしたいなら、リンクの段階で<literal>--optl-mwindows</literal>を使えば良い。
</para>

<para>       <emphasis>警告:</emphasis>WindowsのGUIのみのプログラムにはstdin、stdout、stderrがないので、通常のHaskellのIO関数を使うと、次のようなIO例外でプログラムが失敗する。
<screen>
      Fail: &lt;stdout&gt;: hPutChar: failed (Bad file descriptor)
</screen>
ただし、Debug.Trace.traceは問題ない。Windowsのデバッグ出力サポートを利用するからである。</para>

<para>Mingwには<literal>readline</literal>ライブラリが付属しているが、なぜか<literal>readline</literal>ヘッダは付属していない。このため、GHCは(Hugsと同様)Windowsでの対話的入力時に<literal>readline</literal>を使わない。emacsのシェルバッファを使うことで近いものを得ることはできる。
</para>

</sect1>

<sect1 id="library-differences">
<title>ライブラリの振る舞いにおける差異</title>

<para>
標準Haskellライブラリには、Windowsで多少異なった振る舞いをするものがある。

<itemizedlist>
<listitem> <para>
Windowsでは、文字<literal>^Z</literal>はファイル終端文字と解釈されるので、この文字を含んだファイルを読むとそこでファイルが終わっているように見える。これを避けるには、<literal>IOExts.openFileEx</literal>を使ってファイルをバイナリ(無変換)モードで開くか、既に開かれたハンドルを<literal>IOExts.hSetBinaryMode</literal>でバイナリモードにすれば良い。<literal>IOExts</literal>モジュールは<literal>lang</literal>パッケージにある。
</para>
</listitem>
</itemizedlist>
</para>
</sect1>

<sect1 id="ghci-cygwin">
<title>
GHC(および、GHCでコンパイルされた実行ファイル)をcygwinで使う</title>

<sect2>
<title>背景</title> <para>cygwinツール群は、unixソフトウェアをwindowsに移植する作業を簡単にするために、windowsライブラリの上にunix風のAPIを提供するものである。このために、unix形式のディレクトリ階層をなんらかのルートディレクトリ(典型的には<filename>C:\cygwin\</filename>が<filename>/</filename>になる)の下に導入する。さらに、cygwin APIに対してビルドされたもの(cygwinのツール群やcygwinのghcでコンパイルされたプログラムを含む)は、/をファイルシステムの根だと認識し、典型的なunix環境で動作していると思い込む。そして、<filename>/bin</filename>や<filename>/usr/include</filename>などを、windowsシステム上での実際の位置(おそらく<filename>C:\cygwin\bin</filename>と<filename>C:\cygwin\usr\include</filename>)に構うことなく見つける。
</para>
</sect2>

<sect2><title>問題</title>
<para>GHCは、デフォルトで、もはやcygwinに依存しておらず、ネイティブのwindowsプログラムである。GHCはmingwでビルドされ、Haskellのソースをコンパイルするときにはmingwのghc<!-- gccの誤り? -->を使う。(cygwinのbashから呼んだ場合でもそうである)。しかし、問題は、通常のwindowsプログラムと同様、GHCも、GHCが生成したプログラムも、cygwinの疑似unix階層構造について知らないということである。GHCはディレクトリ区切りとして「/」と「\」の両方を喜んで受け付けるが、<filename>/home/joe/Main.hs</filename>や<filename>/bin/bash</filename>のようなものをどうやって見つけるかは知らない。このため、GHCをcygwinのbashから使ったり、cygwinで走っているmakeセッションから呼んだりすると、いろいろな楽しいことが起こる。
</para>
</sect2>

<sect2><title>するべきこと</title>
<itemizedlist>
<listitem>
<para>make、configure、coをするときに、GHC(またはGHCでコンパイルされたプログラム)に渡される可能性がある場面では、絶対パスを使ってはいけない。相対パスは、cygwinのツール群もうまく扱えるし、GHCは「/」をパス区切りとして受け付けるので、問題ない。さらに、相対パスは、cygwinのルートディレクトリがどこにあるかに依存しないし、ソースツリーがどのパーティション・ネットワークドライブにあるか、ということも、一旦そこに「cd」してしまえば関係ない。
</para></listitem>

<listitem>
<para>絶対パスを使わなければならない場合(makefileの階層やconfigureスクリプト中の一見無害な<literal>ROOT=`pwd`</literal>に注意)のために、cygwinには<command>cygpath</command>というツールがあり、cygwinのunix形式のパスを実際のwindows形式のものに変換することができる。cygwinツールの大部分は実際にはwindows形式のパスも受け付ける(ただし「\」をエスケープするか「\」の代わりに「/」を使う必要がある)ので、常にこれを使っていて問題ないはずである。unix形式のパスに依存するなんらかのパス操作を行うツールを使いたい場合(一つの楽しい例は「:」がパス区切りとして解釈されてしまう場合である)でも、パスがGHCやその仲間たちに渡される直前に<command>cygpath</command>で変換することができる。
</para></listitem>

<listitem>
<para>もしあなたが<command>cygpath</command>を持っていないなら、おそらくあなたはcygwinを持っていないので、問題ない。ただし、複数のプラットフォームで使えるビルド過程を書きたいなら話は別である。この場合でも相対パスを使えば良いが、絶対パスを使う必要があり、しかもプラットフォームごとに異なるツールを使いたくない場合、短いHaskellプログラムを書いてカレントディレクトリを出力させるという方法がある。(この考えを出したGeorge Russellに感謝)。それをGHCでコンパイルして実行すれば、GHCが見ているファイルシステムの姿(これはGHCがcygwinのgccでコンパイルされたか、mingwのgccか、それとも本物のunixシステムのgccかに依存する)が分かる。その小さなプログラムにパス中の「\」をエスケープさせることもできる。バナーが表示されるのと、起動に時間がかかることを除けば、以下のようなものでも良い。
<programlisting>
  $ echo "Directory.getCurrentDirectory >>= putStrLn . init . tail . show " | ghci
</programlisting>
</para></listitem>
</itemizedlist>
</sect2>
</sect1>


<sect1 id="win32-dlls">
<title>Win32のDLLをビルド・利用する
</title>

<para>
<indexterm><primary>Dynamic link libraries, Win32</primary></indexterm>
<indexterm><primary>DLLs, Win32</primary></indexterm>
Win32プラットフォームのGHCは、GHCでコンパイルされたコードを含むダイナミックリンクライブラリ(DLL)を作ったり使ったりすることができる。この節ではこの機能の使い方を示す。
</para>

<para>
DLLを使ってできることは以下の二つがある。
<itemizedlist>
  <listitem>
    <para>それぞれのHaskellパッケージをDLLにして、複数のHaskell実行ファイルが同じパッケージを使う場合にそれらがDLLファイルを共有できるようにする。(これに対して、ライブラリを静的リンクした場合、実質的にRTSと全てのライブラリの新しいコピーが各実行ファイルごとに作られることになる)
    </para>
    <para>これは、他のプラットフォームにおける動的リンクと同じであり、<xref linkend="using-shared-libs"/>で記述されている。
    </para>
  </listitem>
  <listitem>
    <para>完全なHaskellプログラムを一つのDLLとしてまとめ、外部の(普通Haskell製でない)プログラムから呼べるようにする。通常、これはプラグインなどを実装するのに使われる。以下はこれについて述べる。
    </para>
  </listitem>
</itemizedlist>
</para>

<!--
<para>
Until recently, <command>strip</command> didn't work reliably on DLLs, so you
should test your version with care, or make sure you have the latest
binutils. Unfortunately, we don't know exactly which version of binutils
cured the problem (it was supposedly fixed some years ago).
</para>


<sect2 id="win32-dlls-link">
<title>Linking with DLLs</title>

<para>
The default on Win32 platforms is to link applications in such a way
that the executables will use the Prelude and system libraries DLLs,
rather than contain (large chunks of) them. This is transparent at the
command-line, so
</para>

<para>
<screen>
sh$ cat main.hs
module Main where
main = putStrLn "hello, world!"
sh$ ghc -o main main.hs
ghc: module version changed to 1; reason: no old .hi file
sh$ strip main.exe
sh$ ls -l main.exe
-rwxr-xr-x   1 544      everyone     4608 May  3 17:11 main.exe*
sh$ ./main
hello, world!
sh$
</screen>
</para>

<para>
will give you a binary as before, but the <filename>main.exe</filename>
generated will use the Prelude and RTS DLLs instead of linking them in
statically.
</para>

<para>
4K for a <literal>"hello, world"</literal> application&mdash;not bad, huh? :-)
</para>

</sect2>

<sect2 id="win32-dlls-linking-static">
<title>Not linking with DLLs
<indexterm><primary>-static option (Win32)</primary></indexterm></title>

<para>
If you want to build an executable that doesn't depend on any
ghc-compiled DLLs, use the <option>-static</option> option to link in
the code statically.
</para>

<para>
Notice that you cannot mix code that has been compiled with
<option>-static</option> and not, so you have to use the <option>-static</option>
option on all the Haskell modules that make up your application.
</para>

</sect2>
-->

<sect2 id="win32-dlls-create">
<title>DLLを作成する</title>

<para>
<indexterm><primary>Creating a Win32 DLL</primary></indexterm>
<indexterm><primary>-shared</primary></indexterm>
HaskellライブラリをDLLに封じ込めるのは簡単な作業である。ライブラリを構成するオブジェクトファイルをコンパイルして作り、次のようなコマンドを発行することでDLLをビルドする。
</para>

<para>
<screen>
ghc -shared -o foo.dll bar.o baz.o wibble.a -lfooble
</screen>
</para>

<para>
GHCのコンパイラ駆動器に<option>-shared</option>を渡すと、実行ファイルを作る代わりにDLLをビルドする。そのDLLは、コマンド行で渡された全てのオブジェクトファイルとアーカイブから成る。
</para>

<!--
<para>
To create a `static' DLL, i.e. one that does not depend on the GHC DLLs,
use the <option>-static</option> when compiling up your Haskell code and
building the DLL.
</para>
-->

<para>
注意事項をいくつか。
</para>

<para>

<itemizedlist>
<!--
<listitem>
<para>
Since DLLs correspond to packages (see <xref linkend="packages"/>) you need
to use <option>-package-name dll-name</option> when compiling modules that
belong to a DLL if you're going to call them from Haskell. Otherwise, Haskell
code that calls entry points in that DLL will do so incorrectly, and crash.
For similar reasons, you can only compile a single module tree into a DLL,
as <function>startupHaskell</function> needs to be able to call its
initialisation function, and only takes one such argument (see <xref
linkend="win32-dlls-foreign"/>). Hence the modules
you compile into a DLL must have a common root.
</para>
</listitem>
-->

<listitem>
<para>
<option>-shared</option>を使う際、デフォルトでは、全てのオブジェクトファイルのエントリポイントがDLLからエクスポートされる。これを制限したいなら、次のようにして、コマンド行中で<emphasis>モジュール定義ファイル</emphasis>を指定することができる。

<screen>
ghc -shared -o .... MyDef.def
</screen>

詳細はMicrosoftの文書を参照してほしいが、モジュール定義ファイルは、エクスポートしたいエントリポイントの単なる羅列である。HaskellのCOMサーバDLLをビルドするのに使うものを挙げる。

<programlisting>
EXPORTS
 DllCanUnloadNow     = DllCanUnloadNow@0
 DllGetClassObject   = DllGetClassObject@12
 DllRegisterServer   = DllRegisterServer@0
 DllUnregisterServer = DllUnregisterServer@0
</programlisting>
</para>
</listitem>

<listitem>
<para>
<option>-shared</option>オプションは、DLLを作成するのに加え、インポートライブラリも作る。インポートライブラリの名前は、次のようにしてDLLの名前から作られる。

<programlisting>
DLL: HScool.dll  ==&#62; import lib: libHScool.dll.a
</programlisting>

このような名前の付け方は少々奇妙に見えるかもしれないが、これはインポートライブラリと通常の静的ライブラリが共存できるようにするためである。(例えば<filename>libHSfoo.a</filename>と<filename>libHSfoo.dll.a</filename>)。さらに、コンパイラ駆動器が非静的モードの時、コマンド行中の<option>-lHSfoo</option>を<option>-lHSfoo&lowbar;imp</option>に書き換えるので、非静的リンクから静的リンクに切り替えるのは、単に<option>-static</option>をコマンド行に追加するだけで済む。

</para>
</listitem>
</itemizedlist>
</para>

</sect2>


<sect2 id="win32-dlls-foreign">
<title>他の言語から呼ぶためのDLLを作る</title>

<para>この節では、Haskellコードをまとめて、他の言語、例えばVisual BasicやC++から呼べるDLLを作る方法を記述する。これは<xref linkend="ffi-library" />の特別な場合である。以下ではDLL特有の問題について扱う。例を挙げる。</para>
<para><literal>foreign export</literal>宣言を使って、外部から呼びたいHaskellの関数をエクスポートする。例を挙げる。</para>

<programlisting>
-- Adder.hs
{-# LANGUAGE ForeignFunctionInterface #-}
module Adder where

adder :: Int -> Int -> IO Int -- 余計なIO
adder x y = return (x+y)

foreign export stdcall adder :: Int -> Int -> IO Int
</programlisting>
<para>HaskellのRTSの開始/終了を行う補助コードを加える。
</para>
<programlisting>
// StartEnd.c
#include &lt;Rts.h&gt;

void HsStart()
{
   int argc = 1;
   char* argv[] = {"ghcDll", NULL}; // argvはNULLで終わっていなければならない

   // Haskellのランタイムを初期化する
   char** args = argv;
   hs_init(&amp;argc, &amp;args);
}

void HsEnd()
{
   hs_exit();
}
</programlisting>
<para>ここで、<literal>Adder</literal>はモジュール木における根となるモジュールの名前である(上述のように、DLLにはただ一つの根モジュールがなければならず、従ってただ一つのモジュール木がなければならない)。全てをコンパイルする。
</para>
<screen>
ghc -c Adder.hs
ghc -c StartEnd.c
ghc -shared -o Adder.dll Adder.o Adder_stub.o StartEnd.o
</screen>
<para>これで、<filename>Adder.dll</filename>ファイルが他の言語から使えるようになった。Adderの関数を呼ぶ前に<literal>HsStart</literal>を呼ぶことが必要であり、一番最後には<literal>HsEnd</literal>を呼ぶ必要がある。
</para>
<para>
  <emphasis>警告:</emphasis> <literal>hs_init</literal>/<literal>hs_exit</literal>を呼ぶのに<literal>DllMain</literal>を使うことが魅力的に思えるかもしれないが、これは動作しない(特に<literal>-threaded</literal>付きでコンパイルしているなら)。<literal>DllMain</literal>の間に実行してよい動作には厳しい制約があり、<literal>hs_init</literal>はこれらの制約を破るので、セットアップ中にdllがフリーズするのにつながることがある。(<ulink url="http://ghc.haskell.org/trac/ghc/ticket/3605">bug #3605</ulink>を見よ)</para>

<sect3 id="win32-dlls-vba">
<title>VBAから使う</title>

<para><filename>Adder.dll</filename>をVBAから使う例。
</para>
<programlisting>
Private Declare Function Adder Lib "Adder.dll" Alias "adder@8" _
      (ByVal x As Long, ByVal y As Long) As Long

Private Declare Sub HsStart Lib "Adder.dll" ()
Private Declare Sub HsEnd Lib "Adder.dll" ()

Private Sub Document_Close()
HsEnd
End Sub

Private Sub Document_Open()
HsStart
End Sub

Public Sub Test()
MsgBox "12 + 5 = " &amp; Adder(12, 5)
End Sub
</programlisting>
<para>この例はMicrosoft Wordの<literal>Document_Open</literal>/<literal>Close</literal>関数を使っているが、<literal>HsStart</literal>が関数が最初に呼ばれるよりも先に呼ばれ、<literal>HsEnd</literal>が最後のものより後に呼ばれる限り、問題なく動作するはずである。</para>
</sect3>

<sect3 id="win32-dlls-c++">
<title>C++から使う</title>

<para><filename>Adder.dll</filename>をC++から使う例。
</para>

<programlisting>
// Tester.cpp
#include "HsFFI.h"
#include "Adder_stub.h"
#include &lt;stdio.h&gt;

extern "C" {
    void HsStart();
    void HsEnd();
}

int main()
{
    HsStart();
    // これで、DLLの関数を安全に呼べる
    printf("12 + 5 = %i\n", adder(12,5))    ;
    HsEnd();
    return 0;
}
</programlisting>
<para>これは次のようにコンパイルし、実行できる。
</para>
<screen>
$ ghc -o tester Tester.cpp Adder.dll.a
$ tester
12 + 5 = 17
</screen>

</sect3>

</sect2>

</sect1>
</chapter>

<!-- Emacs stuff:
     ;;; Local Variables: ***
     ;;; sgml-parent-document: ("users_guide.xml" "book" "chapter") ***
     ;;; End: ***
 -->
