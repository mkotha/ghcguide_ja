diff -urd 7.6.3-original/codegens.xml original/codegens.xml
--- 7.6.3-original/codegens.xml	2014-06-27 09:19:06.637226404 +0900
+++ original/codegens.xml	2014-04-08 03:26:08.000000000 +0900
@@ -41,22 +41,24 @@
       <command>opt</command>and <command>llc</command> tools.  Secondly, if you
       are running Mac OS X with LLVM 3.0 or greater then
       you also need the <ulink url="http://clang.llvm.org">Clang c
-        compiler</ulink> compiler available on your PATH. Clang and LLVM are
-      both included with OS X by default from 10.6 onwards.
+        compiler</ulink> compiler available on your PATH.
     </para>
 
     <para>To install LLVM and Clang:
       <itemizedlist>
         <listitem><emphasis>Linux</emphasis>: Use your package management tool.
         </listitem>
-        <listitem><emphasis>Mac OS X</emphasis>: LLVM and Clang are included by
-          default from <literal>10.6</literal> and later. For
-          <literal>10.5</literal> you should install the
-          <ulink url="http://mxcl.github.com/homebrew/">Homebrew</ulink> package
-          manager for OS X. Alternatively you can download binaries for LLVM
-          and Clang from
-          <ulink url="http://llvm.org/releases/download.html">here</ulink>.
+        <listitem><emphasis>Mac OS X</emphasis>: Clang is included by
+        default on recent OS X machines when XCode is installed (from
+        <literal>10.6</literal> and later). LLVM is not included. In
+        order to use the LLVM based code generator, you should install
+        the <ulink
+        url="http://mxcl.github.com/homebrew/">Homebrew</ulink>
+        package manager for OS X. Alternatively you can download
+        binaries for LLVM and Clang from <ulink
+        url="http://llvm.org/releases/download.html">here</ulink>.
         </listitem>
+
         <listitem><emphasis>Windows</emphasis>: You should download binaries for
           LLVM and clang from
           <ulink url="http://llvm.org/releases/download.html">here</ulink>.
diff -urd 7.6.3-original/debugging.xml original/debugging.xml
--- 7.6.3-original/debugging.xml	2014-06-27 09:19:05.968244137 +0900
+++ original/debugging.xml	2014-04-08 03:26:08.000000000 +0900
@@ -202,6 +202,16 @@
 
 	    <varlistentry>
 	      <term>
+	        <option>-ddump-strsigs</option>:
+                <indexterm><primary><option>-ddump-strsigs</option></primary></indexterm>
+	      </term>
+	      <listitem>
+		<para>strictness signatures</para>
+	      </listitem>
+	    </varlistentry>
+
+	    <varlistentry>
+	      <term>
 	        <option>-ddump-cse</option>:
                 <indexterm><primary><option>-ddump-cse</option></primary></indexterm>
 	      </term>
diff -urd 7.6.3-original/extending_ghc.xml original/extending_ghc.xml
--- 7.6.3-original/extending_ghc.xml	2014-06-27 09:19:05.808248378 +0900
+++ original/extending_ghc.xml	2014-04-08 03:26:08.000000000 +0900
@@ -40,7 +40,7 @@
           (disregarding the usual type restrictions of the splice syntax, and the usual restriction on splicing inside a splice - <literal>$([|1|])</literal> is fine as an annotation, albeit redundant).</para></listitem>
         </itemizedlist>
 
-        If you feel strongly that any of these restrictions are too onerous, <ulink url="http://hackage.haskell.org/trac/ghc/wiki/MailingListsAndIRC">
+        If you feel strongly that any of these restrictions are too onerous, <ulink url="http://ghc.haskell.org/trac/ghc/wiki/MailingListsAndIRC">
         please give the GHC team a shout</ulink>.
       </para>
 
@@ -90,10 +90,10 @@
 <programlisting>
 import GHC
 import GHC.Paths ( libdir )
-import DynFlags ( defaultDynFlags )
+import DynFlags ( defaultLogAction )
  
 main = 
-    defaultErrorHandler defaultDynFlags $ do
+    defaultErrorHandler defaultLogAction $ do
       runGhc (Just libdir) $ do
         dflags &lt;- getSessionDynFlags
         setSessionDynFlags dflags
@@ -126,7 +126,7 @@
 
     <para>GHC has the ability to load compiler plugins at compile time. The feature is similar to the one provided by <ulink url="http://gcc.gnu.org/wiki/plugins">GCC</ulink>, and allows users to write plugins that can inspect and modify the compilation pipeline, as well as transform and inspect GHC's intermediate language, Core. Plugins are suitable for experimental analysis or optimization, and require no changes to GHC's source code to use.</para>
 
-    <para>Plugins cannot optimize/inspect C--, nor can they implement things like parser/front-end modifications like GCC. If you feel strongly that any of these restrictions are too onerous, <ulink url="http://hackage.haskell.org/trac/ghc/wiki/MailingListsAndIRC"> please give the GHC team a shout</ulink>.</para>
+    <para>Plugins cannot optimize/inspect C--, nor can they implement things like parser/front-end modifications like GCC. If you feel strongly that any of these restrictions are too onerous, <ulink url="http://ghc.haskell.org/trac/ghc/wiki/MailingListsAndIRC"> please give the GHC team a shout</ulink>.</para>
 
     <sect2 id="using-compiler-plugins">
       <title>Using compiler plugins</title>
@@ -226,12 +226,13 @@
   return (CoreDoPluginPass "Say name" pass : todo)
 
 pass :: ModGuts -> CoreM ModGuts
-pass = bindsOnlyPass (mapM printBind)
-  where printBind :: CoreBind -> CoreM CoreBind
-        printBind bndr@(NonRec b _) = do
-          putMsgS $ "Non-recursive binding named " ++ showSDoc (ppr b)
+pass = do dflags &lt;- getDynFlags
+          bindsOnlyPass (mapM (printBind dflags))
+  where printBind :: DynFlags -> CoreBind -> CoreM CoreBind
+        printBind dflags bndr@(NonRec b _) = do
+          putMsgS $ "Non-recursive binding named " ++ showSDoc dflags (ppr b)
           return bndr 
-        printBind bndr = return bndr
+        printBind _ bndr = return bndr
 </programlisting>
       </sect3>
 
@@ -244,11 +245,10 @@
 
 <programlisting>
 {-# LANGUAGE DeriveDataTypeable #-}
-module SayAnnNames.Plugin (plugin, SomeAnn) where
+module SayAnnNames.Plugin (plugin, SomeAnn(..)) where
 import GhcPlugins
-import Control.Monad (when)
+import Control.Monad (unless)
 import Data.Data
-import Data.Typeable
 
 data SomeAnn = SomeAnn deriving (Data, Typeable)
 
@@ -263,13 +263,15 @@
   return (CoreDoPluginPass "Say name" pass : todo)
 
 pass :: ModGuts -> CoreM ModGuts
-pass g = mapM_ (printAnn g) (mg_binds g) >> return g
-  where printAnn :: ModGuts -> CoreBind -> CoreM CoreBind
-        printAnn guts bndr@(NonRec b _) = do
+pass g = do
+          dflags &lt;- getDynFlags
+          mapM_ (printAnn dflags g) (mg_binds g) >> return g
+  where printAnn :: DynFlags -> ModGuts -> CoreBind -> CoreM CoreBind
+        printAnn dflags guts bndr@(NonRec b _) = do
           anns &lt;- annotationsOn guts b :: CoreM [SomeAnn]
-          when (not $ null anns) $ putMsgS $ "Annotated binding found: " ++  showSDoc (ppr b)
+          unless (null anns) $ putMsgS $ "Annotated binding found: " ++  showSDoc dflags (ppr b)
           return bndr
-        printAnn _ bndr = return bndr
+        printAnn _ _ bndr = return bndr
 
 annotationsOn :: Data a => ModGuts -> CoreBndr -> CoreM [a]
 annotationsOn guts bndr = do
diff -urd 7.6.3-original/external_core.xml original/external_core.xml
--- 7.6.3-original/external_core.xml	2014-06-27 09:19:05.977243898 +0900
+++ original/external_core.xml	2014-04-08 03:26:08.000000000 +0900
@@ -27,8 +27,7 @@
 
   <para>Andrew Tolmach, Tim Chevalier ({apt,tjc}@cs.pdx.edu) and The GHC Team</para>
 
-  <abstract>
-    <para>This document provides a precise definition for the GHC Core
+    <para>This chapter provides a precise definition for the GHC Core
     language, so that it can be used to communicate between GHC and new
     stand-alone compilation tools such as back-ends or
     optimizers.<footnote>
@@ -51,8 +50,6 @@
   formally embody the static and dynamic semantics, are available
     separately.</para>
 
-  </abstract>
-
   <section id="introduction">
     <title>Introduction</title>
 
@@ -161,7 +158,7 @@
     <para>Formal static and dynamic semantics in the form of an executable
     typechecker and interpreter are available separately in the GHC
     source tree
-    <footnote><ulink url="http://darcs.haskell.org/ghc">http://darcs.haskell.org/ghc</ulink></footnote>
+    <footnote><ulink url="http://git.haskell.org/ghc.git/tree">http://git.haskell.org/ghc.git</ulink></footnote>
     under <code>utils/ext-core</code>.</para>
 
   </section>
@@ -1623,7 +1620,7 @@
       </authorgroup>
       <citetitle pubwork="article">System FC: equality constraints and coercions</citetitle>
       <pubdate>2006</pubdate>  
-      <bibliomisc><ulink url="http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/FC">http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/FC</ulink></bibliomisc>
+      <bibliomisc><ulink url="http://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/FC">http://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/FC</ulink></bibliomisc>
     </biblioentry>
 
     <biblioentry>
@@ -1789,7 +1786,7 @@
         <state>South Carolina</state>
       </address>
       <pubdate>1993</pubdate>  
-      <bibliomisc><ulink url="citeseer.ist.psu.edu/launchbury93natural.html">citeseer.ist.psu.edu/launchbury93natural.html</ulink></bibliomisc>
+      <bibliomisc><ulink url="http://citeseer.ist.psu.edu/launchbury93natural.html">http://citeseer.ist.psu.edu/launchbury93natural.html</ulink></bibliomisc>
       <!-- booktitle = "Conference Record of the Twentieth Annual {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages", -->
     </biblioentry>
 
diff -urd 7.6.3-original/ffi-chap.xml original/ffi-chap.xml
--- 7.6.3-original/ffi-chap.xml	2014-06-27 09:19:05.772249332 +0900
+++ original/ffi-chap.xml	2014-04-08 03:26:08.000000000 +0900
@@ -75,7 +75,8 @@
 	  This is used to import functions written in Cmm code that follow an
 	  internal GHC calling convention. This feature is not intended for
 	  use outside of the core libraries that come with GHC. For more
-	  details see the GHC developer wiki.
+	  details see the <ulink linkend="http://ghc.haskell.org/trac/ghc/wiki/Commentary/PrimOps">
+          GHC developer wiki</ulink>.
 	</para>
       </sect2>
 
@@ -212,6 +213,40 @@
 </programlisting>
         </para>
       </sect2>
+
+      <sect2>
+        <title><literal>hs_thread_done()</literal></title>
+
+<programlisting>
+void hs_thread_done(void);
+</programlisting>
+
+        <para>
+          GHC allocates a small amount of thread-local memory when a
+          thread calls a Haskell function via a <literal>foreign
+          export</literal>.  This memory is not normally freed until
+          <literal>hs_exit()</literal>; the memory is cached so that
+          subsequent calls into Haskell are fast.  However, if your
+          application is long-running and repeatedly creates new
+          threads that call into Haskell, you probably want to arrange
+          that this memory is freed in those threads that have
+          finished calling Haskell functions.  To do this, call
+          <literal>hs_thread_done()</literal> from the thread whose
+          memory you want to free.
+        </para>
+
+        <para>
+          Calling <literal>hs_thread_done()</literal> is entirely
+          optional.  You can call it as often or as little as you
+          like.  It is safe to call it from a thread that has never
+          called any Haskell functions, or one that never will.  If
+          you forget to call it, the worst that can happen is that
+          some memory remains allocated until
+          <literal>hs_exit()</literal> is called.  If you call it too
+          often, the worst that can happen is that the next call to a
+          Haskell function incurs some extra overhead.
+        </para>
+      </sect2>
   </sect1>
 
   <sect1 id="ffi-ghc">
@@ -274,7 +309,7 @@
         <filename>M_stub.o</filename> in the final link command line, or
         you'll get link errors for the missing function(s) (this isn't
         necessary when building your program with <literal>ghc
-        &ndash;&ndash;make</literal>, as GHC will automatically link in the
+        --make</literal>, as GHC will automatically link in the
         correct bits).</para>
 
       <sect3 id="using-own-main">
diff -urd 7.6.3-original/flags.xml original/flags.xml
--- 7.6.3-original/flags.xml	2014-06-27 09:19:06.103240558 +0900
+++ original/flags.xml	2014-04-08 03:26:08.000000000 +0900
@@ -8,9 +8,9 @@
     (if available).</para>
 
   <sect2>
-    <title>Help and verbosity options</title>
+    <title>Verbosity options</title>
 
-    <para><xref linkend="options-help"/></para>
+    <para>More details in <xref linkend="options-help"/></para>
 
     <informaltable>
       <tgroup cols="4" align="left" colsep="1" rowsep="1">
@@ -24,18 +24,6 @@
         </thead>
         <tbody>
           <row>
-            <entry><option>-?</option></entry>
-            <entry>help</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
-          </row>
-          <row>
-            <entry><option>-help</option></entry>
-            <entry>help</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
-          </row>
-          <row>
             <entry><option>-v</option></entry>
             <entry>verbose mode (equivalent to <option>-v3</option>)</entry>
             <entry>dynamic</entry>
@@ -48,45 +36,21 @@
             <entry>-</entry>
           </row>
           <row>
-            <entry><option>-V</option></entry>
-            <entry>display GHC version</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
-          </row>
-          <row>
-            <entry><option>&ndash;&ndash;supported-extensions</option> or <option>&ndash;&ndash;supported-languages</option></entry>
-            <entry>display the supported languages and language extensions</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
-          </row>
-          <row>
-            <entry><option>&ndash;&ndash;info</option></entry>
-            <entry>display information about the compiler</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
-          </row>
-          <row>
-            <entry><option>&ndash;&ndash;version</option></entry>
-            <entry>display GHC version</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
-          </row>
-          <row>
-            <entry><option>&ndash;&ndash;numeric-version</option></entry>
-            <entry>display GHC version (numeric only)</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
+            <entry><option>-fprint-explicit-foralls</option></entry>
+            <entry>print explicit <literal>forall</literal> quantification in types</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-print-explicit-foralls</entry>
           </row>
           <row>
-            <entry><option>&ndash;&ndash;print-libdir</option></entry>
-            <entry>display GHC library directory</entry>
-            <entry>mode</entry>
-            <entry>-</entry>
+            <entry><option>-fprint-explicit-kinds</option></entry>
+            <entry>print explicit kind foralls and kind arguments in types</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-print-explicit-kinds</entry>
           </row>
           <row>
             <entry><option>-ferror-spans</option></entry>
             <entry>output full span in error messages</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
@@ -107,9 +71,9 @@
 
   </sect2>
   <sect2>
-    <title>Which phases to run</title>
+    <title>Alternative modes of operation</title>
 
-    <para><xref linkend="options-order"/></para>
+    <para>More details in <xref linkend="modes"/></para>
 
     <informaltable>
       <tgroup cols="4" align="left" colsep="1" rowsep="1">
@@ -123,44 +87,96 @@
         </thead>
         <tbody>
           <row>
-            <entry><option>-E</option></entry>
-            <entry>Stop after preprocessing (<literal>.hspp</literal> file)</entry>
+            <entry><option>--help</option>,<option>-?</option></entry>
+            <entry>Disply help</entry>
             <entry>mode</entry>
             <entry>-</entry>
           </row>
+
           <row>
-            <entry><option>-C</option></entry>
-            <entry>Stop after generating C (<literal>.hc</literal> file)</entry>
+            <entry><option>--interactive</option></entry>
+            <entry>Interactive mode - normally used by just running <command>ghci</command>;
+              see <xref linkend="ghci"/> for details.</entry>
             <entry>mode</entry>
             <entry>-</entry>
           </row>
           <row>
-            <entry><option>-S</option></entry>
-            <entry>Stop after generating assembly (<literal>.s</literal> file)</entry>
+            <entry><option>--make</option></entry>
+            <entry>Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using <command>make</command>;
+              see <xref linkend="make-mode"/> for details..</entry>
             <entry>mode</entry>
             <entry>-</entry>
           </row>
           <row>
-            <entry><option>-c</option></entry>
-            <entry>Do not link</entry>
-            <entry>dynamic</entry>
+            <entry><option>-e <replaceable>expr</replaceable></option></entry>
+            <entry>Evaluate <replaceable>expr</replaceable>;
+              see <xref linkend="eval-mode"/> for details.</entry>
+            <entry>mode</entry>
             <entry>-</entry>
           </row>
+
           <row>
-            <entry><option>-x</option> <replaceable>suffix</replaceable></entry>
-            <entry>Override default behaviour for source files</entry>
-            <entry>static</entry>
+            <entry><option>--show-iface</option></entry>
+            <entry>Display the contents of an interface file.</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+
+          <row>
+            <entry><option>-M</option></entry>
+            <entry>Generate dependency information suitable for use in a <filename>Makefile</filename>;
+              see <xref linkend="makefile-dependencies"/> for details.</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+
+
+          <row>
+            <entry><option>--supported-extensions</option>, <option>--supported-languages</option></entry>
+            <entry>display the supported language extensions</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--show-options</option></entry>
+            <entry>display the supported command line options</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--info</option></entry>
+            <entry>display information about the compiler</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--version, -V</option></entry>
+            <entry>display GHC version</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--numeric-version</option></entry>
+            <entry>display GHC version (numeric only)</entry>
+            <entry>mode</entry>
             <entry>-</entry>
           </row>
+          <row>
+            <entry><option>--print-libdir</option></entry>
+            <entry>display GHC library directory</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+
         </tbody>
       </tgroup>
     </informaltable>
   </sect2>
 
   <sect2>
-    <title>Alternative modes of operation</title>
+    <title>Which phases to run</title>
 
-    <para><xref linkend="modes"/></para>
+    <para><xref linkend="options-order"/></para>
 
     <informaltable>
       <tgroup cols="4" align="left" colsep="1" rowsep="1">
@@ -174,31 +190,33 @@
         </thead>
         <tbody>
           <row>
-            <entry><option>--interactive</option></entry>
-            <entry>Interactive mode - normally used by just running <command>ghci</command>;
-              see <xref linkend="ghci"/> for details.</entry>
+            <entry><option>-E</option></entry>
+            <entry>Stop after preprocessing (<literal>.hspp</literal> file)</entry>
             <entry>mode</entry>
             <entry>-</entry>
           </row>
           <row>
-            <entry><option>--make</option></entry>
-            <entry>Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using <command>make</command>;
-              see <xref linkend="make-mode"/> for details..</entry>
+            <entry><option>-C</option></entry>
+            <entry>Stop after generating C (<literal>.hc</literal> file)</entry>
             <entry>mode</entry>
             <entry>-</entry>
           </row>
           <row>
-            <entry><option>-e <replaceable>expr</replaceable></option></entry>
-            <entry>Evaluate <replaceable>expr</replaceable>;
-              see <xref linkend="eval-mode"/> for details.</entry>
+            <entry><option>-S</option></entry>
+            <entry>Stop after generating assembly (<literal>.s</literal> file)</entry>
             <entry>mode</entry>
             <entry>-</entry>
           </row>
           <row>
-            <entry><option>-M</option></entry>
-            <entry>Generate dependency information suitable for use in a <filename>Makefile</filename>;
-              see <xref linkend="makefile-dependencies"/> for details.</entry>
-            <entry>mode</entry>
+            <entry><option>-c</option></entry>
+            <entry>Do not link</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-x</option> <replaceable>suffix</replaceable></entry>
+            <entry>Override default behaviour for source files</entry>
+            <entry>static</entry>
             <entry>-</entry>
           </row>
         </tbody>
@@ -460,8 +478,9 @@
         <tbody>
           <row>
             <entry><option>-fforce-recomp</option></entry>
-            <entry>Turn off recompilation checking; implied by any
-              <option>-ddump-X</option> option</entry>
+            <entry>Turn off recompilation checking. This is implied by any
+              <option>-ddump-X</option> option when compiling a single
+              file (i.e. when using <literal>-c</literal>).</entry>
             <entry>dynamic</entry>
             <entry><option>-fno-force-recomp</option></entry>
           </row>
@@ -511,6 +530,12 @@
             <entry><option>-fno-break-on-error</option></entry>
           </row>
           <row>
+            <entry><option>-fghci-hist-size=<replaceable>n</replaceable></option></entry>
+            <entry><link linkend="ghci-debugger">Set the number of entries GHCi keeps for <literal>:history</literal></link></entry>
+            <entry>dynamic</entry>
+            <entry><option>(default is 50)</option></entry>
+          </row>
+          <row>
             <entry><option>-fprint-evld-with-show</option></entry>
             <entry><link linkend="breakpoints">Enable usage of Show instances in <literal>:print</literal></link></entry>
             <entry>dynamic</entry>
@@ -632,7 +657,7 @@
           </row>
           <row>
             <entry><option>-no-auto-link-packages</option></entry>
-            <entry>Don't automatically link in the haskell98 package.</entry>
+            <entry>Don't automatically link in the base and rts packages.</entry>
             <entry>dynamic</entry>
             <entry>-</entry>
           </row>
@@ -681,34 +706,35 @@
         <tbody>
           <row>
             <entry><option>-fglasgow-exts</option></entry>
-            <entry>Enable most language extensions; see <xref linkend="options-language"/> for exactly which ones.</entry>
+            <entry>Deprecated. Enable most language extensions; see <xref linkend="options-language"/> for exactly which ones.</entry>
             <entry>dynamic</entry>
             <entry><option>-fno-glasgow-exts</option></entry>
           </row>
           <row>
-            <entry><option>-XOverlappingInstances</option></entry>
-            <entry>Enable <link linkend="instance-overlap">overlapping instances</link></entry>
+            <entry><option>-firrefutable-tuples</option></entry>
+            <entry>Make tuple pattern matching irrefutable</entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoOverlappingInstances</option></entry>
+            <entry><option>-fno-irrefutable-tuples</option></entry>
           </row>
           <row>
-            <entry><option>-XIncoherentInstances</option></entry>
-            <entry>Enable <link linkend="instance-overlap">incoherent instances</link>.
-              Implies <option>-XOverlappingInstances</option> </entry>
+            <entry><option>-fcontext-stack=N</option><replaceable>n</replaceable></entry>
+            <entry>set the <link linkend="undecidable-instances">limit for context reduction</link>. Default is 20.</entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoIncoherentInstances</option></entry>
+            <entry></entry>
           </row>
           <row>
-            <entry><option>-XUndecidableInstances</option></entry>
-            <entry>Enable <link linkend="undecidable-instances">undecidable instances</link></entry>
+            <entry><option>-ftype-function-depth=N</option><replaceable>n</replaceable></entry>
+            <entry>set the <link linkend="type-families">limit for type function reductions</link>. Default is 200.</entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoUndecidableInstances</option></entry>
+            <entry></entry>
           </row>
           <row>
-            <entry><option>-fcontext-stack=N</option><replaceable>n</replaceable></entry>
-            <entry>set the <link linkend="undecidable-instances">limit for context reduction</link>. Default is 20.</entry>
+            <entry><option>-XAllowAmbiguousTypes</option></entry>
+            <entry>Allow the user to write <link linkend="ambiguity">ambiguous types</link>,
+                   and the type inference engine to infer them.
+                </entry>
             <entry>dynamic</entry>
-            <entry></entry>
+            <entry><option>-XNoAllowAmbiguousTypes</option></entry>
           </row>
           <row>
             <entry><option>-XArrows</option></entry>
@@ -718,6 +744,43 @@
             <entry><option>-XNoArrows</option></entry>
           </row>
           <row>
+            <entry><option>-XAutoDeriveTypeable</option></entry>
+            <entry>Automatically <link linkend="auto-derive-typeable">derive Typeable instances for every datatype and type class declaration</link>.
+            Implies <option>-XDeriveDataTypeable</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoAutoDeriveTypeable</option></entry>
+          </row>
+          <row>
+            <entry><option>-XConstraintKinds</option></entry>
+            <entry>Enable a <link linkend="constraint-kind">kind of constraints</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoConstraintKinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDataKinds</option></entry>
+            <entry>Enable <link linkend="promotion">datatype promotion</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDataKinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDeriveDataTypeable</option></entry>
+            <entry>Enable <link linkend="deriving-typeable">deriving for the Data and Typeable classes</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDeriveDataTypeable</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDeriveGeneric</option></entry>
+            <entry>Enable <link linkend="deriving-typeable">deriving for the Generic class</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDeriveGeneric</option></entry>
+          </row>
+          <row>
+            <entry><option>-XGeneralizedNewtypeDeriving</option></entry>
+            <entry>Enable <link linkend="newtype-deriving">newtype deriving</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGeneralizedNewtypeDeriving</option></entry>
+          </row>
+          <row>
             <entry><option>-XDisambiguateRecordFields</option></entry>
             <entry>Enable <link linkend="disambiguate-fields">record
                 field disambiguation</link></entry>
@@ -725,13 +788,39 @@
             <entry><option>-XNoDisambiguateRecordFields</option></entry>
           </row>
           <row>
+            <entry><option>-XEmptyCase</option></entry>
+            <entry>Allow <link linkend="empty-case">empty case alternatives</link>
+                  </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoEmptyCase</option></entry>
+          </row>
+          <row>
+            <entry><option>-XExtendedDefaultRules</option></entry>
+            <entry>Use GHCi's <link linkend="extended-default-rules">extended default rules</link> in a normal module</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoExtendedDefaultRules</option></entry>
+          </row>
+          <row>
             <entry><option>-XForeignFunctionInterface</option></entry>
-            <entry>Enable <link linkend="ffi">foreign function interface</link> (implied by
-              <option>-fglasgow-exts</option>)</entry>
+            <entry>Enable <link linkend="ffi">foreign function interface</link>.</entry>
             <entry>dynamic</entry>
             <entry><option>-XNoForeignFunctionInterface</option></entry>
           </row>
           <row>
+            <entry><option>-XGADTs</option></entry>
+            <entry>Enable <link linkend="gadt">generalised algebraic data types</link>.
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGADTs</option></entry>
+          </row>
+          <row>
+            <entry><option>-XGADTSyntax</option></entry>
+            <entry>Enable <link linkend="gadt-style">generalised algebraic data type syntax</link>.
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGADTSyntax</option></entry>
+          </row>
+          <row>
             <entry><option>-XGenerics</option></entry>
             <entry>Deprecated, does nothing. No longer enables <link linkend="generic-classes">generic classes</link>.
               See also GHC's support for
@@ -741,28 +830,22 @@
           </row>
           <row>
             <entry><option>-XImplicitParams</option></entry>
-            <entry>Enable <link linkend="implicit-parameters">Implicit Parameters</link>.
-              Implied by <option>-fglasgow-exts</option>.</entry>
+            <entry>Enable <link linkend="implicit-parameters">Implicit Parameters</link>.</entry>
             <entry>dynamic</entry>
             <entry><option>-XNoImplicitParams</option></entry>
           </row>
           <row>
-            <entry><option>-firrefutable-tuples</option></entry>
-            <entry>Make tuple pattern matching irrefutable</entry>
-            <entry>dynamic</entry>
-            <entry><option>-fno-irrefutable-tuples</option></entry>
-          </row>
-          <row>
             <entry><option>-XNoImplicitPrelude</option></entry>
             <entry>Don't implicitly <literal>import Prelude</literal></entry>
             <entry>dynamic</entry>
             <entry><option>-XImplicitPrelude</option></entry>
           </row>
           <row>
-            <entry><option>-XRebindableSyntax</option></entry>
-            <entry>Employ <link linkend="rebindable-syntax">rebindable syntax</link></entry>
+            <entry><option>-XIncoherentInstances</option></entry>
+            <entry>Enable <link linkend="instance-overlap">incoherent instances</link>.
+              Implies <option>-XOverlappingInstances</option> </entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoRebindableSyntax</option></entry>
+            <entry><option>-XNoIncoherentInstances</option></entry>
           </row>
           <row>
             <entry><option>-XNoMonomorphismRestriction</option></entry>
@@ -771,34 +854,35 @@
             <entry><option>-XMonomorphismRrestriction</option></entry>
           </row>
           <row>
-            <entry><option>-XNoNPlusKPatterns</option></entry>
-            <entry>Disable support for <literal>n+k</literal> patterns</entry>
+            <entry><option>-XNegativeLiterals</option></entry>
+            <entry>Enable support for <link linkend="negative-literals">negative literals</link></entry>
             <entry>dynamic</entry>
-            <entry><option>-XNPlusKPatterns</option></entry>
+            <entry><option>-XNoNegativeLiterals</option></entry>
           </row>
           <row>
-            <entry><option>-XNoTraditionalRecordSyntax</option></entry>
-            <entry>Disable support for traditional record syntax (as supported by Haskell 98) <literal>C {f = x}</literal></entry>
+            <entry><option>-XNoNPlusKPatterns</option></entry>
+            <entry>Disable support for <literal>n+k</literal> patterns</entry>
             <entry>dynamic</entry>
-            <entry><option>-XTraditionalRecordSyntax</option></entry>
+            <entry><option>-XNPlusKPatterns</option></entry>
           </row>
           <row>
-            <entry><option>-XNoMonoPatBinds</option></entry>
-            <entry>Make <link linkend="monomorphism">pattern bindings polymorphic</link></entry>
+            <entry><option>-XNumDecimals</option></entry>
+            <entry>Enable support for 'fractional' integer literals</entry>
             <entry>dynamic</entry>
-            <entry><option>-XMonoPatBinds</option></entry>
+            <entry><option>-XNoNumDecimals</option></entry>
           </row>
           <row>
-            <entry><option>-XRelaxedPolyRec</option></entry>
-            <entry>Relaxed checking for <link linkend="typing-binds">mutually-recursive polymorphic functions</link></entry>
+            <entry><option>-XOverlappingInstances</option></entry>
+            <entry>Enable <link linkend="instance-overlap">overlapping instances</link></entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoRelaxedPolyRec</option></entry>
+            <entry><option>-XNoOverlappingInstances</option></entry>
           </row>
           <row>
-            <entry><option>-XExtendedDefaultRules</option></entry>
-            <entry>Use GHCi's <link linkend="extended-default-rules">extended default rules</link> in a normal module</entry>
+            <entry><option>-XOverloadedLists</option></entry>
+            <entry>Enable <link linkend="overloaded-lists">overloaded lists</link>.
+            </entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoExtendedDefaultRules</option></entry>
+            <entry><option>-XNoOverloadedLists</option></entry>
           </row>
           <row>
             <entry><option>-XOverloadedStrings</option></entry>
@@ -808,36 +892,34 @@
             <entry><option>-XNoOverloadedStrings</option></entry>
           </row>
           <row>
-            <entry><option>-XGADTs</option></entry>
-            <entry>Enable <link linkend="gadt">generalised algebraic data types</link>.
-            </entry>
+            <entry><option>-XQuasiQuotes</option></entry>
+            <entry>Enable <link linkend="th-quasiquotation">quasiquotation</link>.</entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoGADTs</option></entry>
+            <entry><option>-XNoQuasiQuotes</option></entry>
           </row>
           <row>
-            <entry><option>-XGADTSyntax</option></entry>
-            <entry>Enable <link linkend="gadt-style">generalised algebraic data type syntax</link>.
-            </entry>
+            <entry><option>-XRelaxedPolyRec</option></entry>
+            <entry>Relaxed checking for <link linkend="typing-binds">mutually-recursive polymorphic functions</link></entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoGADTSyntax</option></entry>
+            <entry><option>-XNoRelaxedPolyRec</option></entry>
           </row>
           <row>
-            <entry><option>-XTypeFamilies</option></entry>
-            <entry>Enable <link linkend="type-families">type families</link>.</entry>
+            <entry><option>-XNoTraditionalRecordSyntax</option></entry>
+            <entry>Disable support for traditional record syntax (as supported by Haskell 98) <literal>C {f = x}</literal></entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoTypeFamilies</option></entry>
+            <entry><option>-XTraditionalRecordSyntax</option></entry>
           </row>
           <row>
-            <entry><option>-XConstraintKinds</option></entry>
-            <entry>Enable a <link linkend="constraint-kind">kind of constraints</link>.</entry>
+            <entry><option>-XTypeFamilies</option></entry>
+            <entry>Enable <link linkend="type-families">type families</link>.</entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoConstraintKinds</option></entry>
+            <entry><option>-XNoTypeFamilies</option></entry>
           </row>
           <row>
-            <entry><option>-XDataKinds</option></entry>
-            <entry>Enable <link linkend="promotion">datatype promotion</link>.</entry>
+            <entry><option>-XUndecidableInstances</option></entry>
+            <entry>Enable <link linkend="undecidable-instances">undecidable instances</link></entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoDataKinds</option></entry>
+            <entry><option>-XNoUndecidableInstances</option></entry>
           </row>
           <row>
             <entry><option>-XPolyKinds</option></entry>
@@ -847,31 +929,31 @@
             <entry><option>-XNoPolyKinds</option></entry>
           </row>
           <row>
-            <entry><option>-XScopedTypeVariables</option></entry>
-            <entry>Enable <link linkend="scoped-type-variables">lexically-scoped type variables</link>.
-              Implied by <option>-fglasgow-exts</option>.</entry>
-            <entry>dynamic</entry>
-            <entry><option>-XNoScopedTypeVariables</option></entry>
-          </row>
-          <row>
             <entry><option>-XMonoLocalBinds</option></entry>
             <entry>Enable <link linkend="mono-local-binds">do not generalise local bindings</link>.
+              Implied by <option>-XTypeFamilies</option> and <option>-XGADTs</option>.
             </entry>
             <entry>dynamic</entry>
             <entry><option>-XNoMonoLocalBinds</option></entry>
           </row>
           <row>
-            <entry><option>-XTemplateHaskell</option></entry>
-            <entry>Enable <link linkend="template-haskell">Template Haskell</link>.
-              No longer implied by <option>-fglasgow-exts</option>.</entry>
+            <entry><option>-XRebindableSyntax</option></entry>
+            <entry>Employ <link linkend="rebindable-syntax">rebindable syntax</link></entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoTemplateHaskell</option></entry>
+            <entry><option>-XNoRebindableSyntax</option></entry>
           </row>
           <row>
-            <entry><option>-XQuasiQuotes</option></entry>
-            <entry>Enable <link linkend="th-quasiquotation">quasiquotation</link>.</entry>
+            <entry><option>-XScopedTypeVariables</option></entry>
+            <entry>Enable <link linkend="scoped-type-variables">lexically-scoped type variables</link>.
+              </entry>
             <entry>dynamic</entry>
-            <entry><option>-XNoQuasiQuotes</option></entry>
+            <entry><option>-XNoScopedTypeVariables</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTemplateHaskell</option></entry>
+            <entry>Enable <link linkend="template-haskell">Template Haskell</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoTemplateHaskell</option></entry>
           </row>
           <row>
             <entry><option>-XBangPatterns</option></entry>
@@ -914,9 +996,7 @@
             <entry>Enable <link linkend="explicit-foralls">explicit universal quantification</link>.
               Implied by <option>-XScopedTypeVariables</option>,
               <option>-XLiberalTypeSynonyms</option>,
-              <option>-XRank2Types</option>,
               <option>-XRankNTypes</option>,
-              <option>-XPolymorphicComponents</option>,
               <option>-XExistentialQuantification</option>
             </entry>
             <entry>dynamic</entry>
@@ -925,13 +1005,13 @@
           <row>
             <entry><option>-XPolymorphicComponents</option></entry>
             <entry>Enable <link linkend="universal-quantification">polymorphic components for data constructors</link>.</entry>
-            <entry>dynamic</entry>
+            <entry>dynamic, synonym for <option>-XRankNTypes</option></entry>
             <entry><option>-XNoPolymorphicComponents</option></entry>
           </row>
           <row>
             <entry><option>-XRank2Types</option></entry>
             <entry>Enable <link linkend="universal-quantification">rank-2 types</link>.</entry>
-            <entry>dynamic</entry>
+            <entry>dynamic, synonym for <option>-XRankNTypes</option></entry>
             <entry><option>-XNoRank2Types</option></entry>
           </row>
           <row>
@@ -1002,13 +1082,15 @@
           </row>
           <row>
             <entry><option>-XTypeOperators</option></entry>
-            <entry>Enable type operators.</entry>
+            <entry>Enable <link linkend="type-operators">type operators</link>.</entry>
             <entry>dynamic</entry>
             <entry><option>-XNoTypeOperators</option></entry>
           </row>
           <row>
             <entry><option>-XExplicitNamespaces</option></entry>
-            <entry>Enable using the keyword <literal>type</literal> to specify the namespace of entries in imports and exports.</entry>
+            <entry>Enable using the keyword <literal>type</literal> to specify the namespace of
+                   entries in imports and exports (<xref linkend="explicit-namespaces"/>).
+                   Implied by <option>-XTypeOperators</option> and <option>-XTypeFamilies</option>.</entry>
             <entry>dynamic</entry>
             <entry><option>-XNoExplicitNamespaces</option></entry>
           </row>
@@ -1055,24 +1137,6 @@
             <entry><option>-XNoStandaloneDeriving</option></entry>
           </row>
           <row>
-            <entry><option>-XDeriveDataTypeable</option></entry>
-            <entry>Enable <link linkend="deriving-typeable">deriving for the Data and Typeable classes</link>.</entry>
-            <entry>dynamic</entry>
-            <entry><option>-XNoDeriveDataTypeable</option></entry>
-          </row>
-          <row>
-            <entry><option>-XDeriveGeneric</option></entry>
-            <entry>Enable <link linkend="deriving-typeable">deriving for the Generic class</link>.</entry>
-            <entry>dynamic</entry>
-            <entry><option>-XNoDeriveGeneric</option></entry>
-          </row>
-          <row>
-            <entry><option>-XGeneralizedNewtypeDeriving</option></entry>
-            <entry>Enable <link linkend="newtype-deriving">newtype deriving</link>.</entry>
-            <entry>dynamic</entry>
-            <entry><option>-XNoGeneralizedNewtypeDeriving</option></entry>
-          </row>
-          <row>
             <entry><option>-XTypeSynonymInstances</option></entry>
             <entry>Enable <link linkend="flexible-instance-head">type synonyms in instance heads</link>.</entry>
             <entry>dynamic</entry>
@@ -1110,6 +1174,12 @@
             <entry><option>-XNoMultiParamTypeClasses</option></entry>
           </row>
           <row>
+            <entry><option>-XNullaryTypeClasses</option></entry>
+            <entry>Enable <link linkend="nullary-type-classes">nullary (no parameter) type classes</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoNullaryTypeClasses</option></entry>
+          </row>
+          <row>
             <entry><option>-XFunctionalDependencies</option></entry>
             <entry>Enable <link linkend="functional-dependencies">functional dependencies</link>.</entry>
             <entry>dynamic</entry>
@@ -1153,7 +1223,7 @@
           </row>
           <row>
             <entry><option>-fpackage-trust</option></entry>
-            <entry>Enable <link linkend="safe-haskell">Safe Haskell</link> trusted package requirement for trustworty modules.</entry>
+            <entry>Enable <link linkend="safe-haskell">Safe Haskell</link> trusted package requirement for trustworthy modules.</entry>
             <entry>dynamic</entry>
             <entry><option>-</option></entry>
           </row>
@@ -1231,6 +1301,13 @@
           </row>
 
           <row>
+            <entry><option>-fwarn-duplicate-constraints</option></entry>
+            <entry>warn when a constraint appears duplicated in a type signature</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-duplicate-constraints</option></entry>
+          </row>
+
+          <row>
             <entry><option>-fwarn-duplicate-exports</option></entry>
             <entry>warn when an entity is exported multiple times</entry>
             <entry>dynamic</entry>
@@ -1283,7 +1360,7 @@
 
           <row>
             <entry><option>-fwarn-lazy-unlifted-bindings</option></entry>
-            <entry>warn when a pattern binding looks lazy but must be strict</entry>
+            <entry><emphasis>(deprecated)</emphasis> warn when a pattern binding looks lazy but must be strict</entry>
             <entry>dynamic</entry>
             <entry><option>-fno-warn-lazy-unlifted-bindings</option></entry>
           </row>
@@ -1434,6 +1511,20 @@
             <entry><option>-fno-warn-warnings-deprecations</option></entry>
           </row>
 
+          <row>
+            <entry><option>-fwarn-amp</option></entry>
+            <entry>warn on definitions conflicting with the Applicative-Monad Proposal (AMP)</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-amp</option></entry>
+          </row>
+
+          <row>
+            <entry><option>-fwarn-typed-holes</option></entry>
+            <entry>Enable <link linkend="typed-holes">holes</link> in expressions.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-typed-holes</option></entry>
+          </row>
+
         </tbody>
       </tgroup>
     </informaltable>
@@ -1442,7 +1533,7 @@
   <sect2>
     <title>Optimisation levels</title>
 
-    <para><xref linkend="options-optimise"/></para>
+    <para>These options are described in more detail in <xref linkend="options-optimise"/></para>
 
     <informaltable>
       <tgroup cols="4" align="left" colsep="1" rowsep="1">
@@ -1472,10 +1563,10 @@
     </informaltable>
 
   </sect2>
-  <sect2>
+  <sect2 id="options-f-compact">
     <title>Individual optimisations</title>
 
-    <para><xref linkend="options-f"/></para>
+    <para>These options are described in more detail in <xref linkend="options-f"/>.</para>
 
     <informaltable>
       <tgroup cols="4" align="left" colsep="1" rowsep="1">
@@ -1499,7 +1590,7 @@
             <entry><option>-fcse</option></entry>
             <entry>Turn on common sub-expression elimination. Implied by <option>-O</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-cse</entry>
+            <entry><option>-fno-cse</option></entry>
           </row>
 
           <row>
@@ -1564,14 +1655,23 @@
             <entry><option>-ffloat-in</option></entry>
             <entry>Turn on the float-in transformation. Implied by <option>-O</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-float-in</entry>
+            <entry><option>-fno-float-in</option></entry>
           </row>
 
           <row>
             <entry><option>-ffull-laziness</option></entry>
             <entry>Turn on full laziness (floating bindings outwards). Implied by <option>-O</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-full-laziness</entry>
+            <entry><option>-fno-full-laziness</option></entry>
+          </row>
+
+          <row>
+            <entry><option>-ffun-to-thunk</option></entry>
+            <entry>Allow worker-wrapper to convert a function closure into a
+            thunk if the function does not use any of its arguments. Off by
+            default.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-fun-to-thunk</option></entry>
           </row>
 
           <row>
@@ -1589,6 +1689,21 @@
           </row>
 
           <row>
+            <entry><option>-floopification</option></entry>
+            <entry>Turn saturated self-recursive tail-calls into local jumps in the generated assembly.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-loopification</option></entry>
+          </row>
+
+          <row>
+            <entry><option>-flate-dmd-anal</option></entry>
+            <entry>Run demand analysis again, at the end of the simplification
+            pipeline</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-late-dmd-anal</option></entry>
+          </row>
+
+          <row>
             <entry><option>-fliberate-case</option></entry>
             <entry>Turn on the liberate-case transformation. Implied by <option>-O2</option>.</entry>
             <entry>dynamic</entry>
@@ -1603,17 +1718,24 @@
           </row>
 
           <row>
-            <entry><option>-fmax-simplifier-iterations</option></entry>
+            <entry><option>-fmax-relevant-bindings=N</option></entry>
+            <entry>Set the maximum number of bindings to display in type error messages (default 6).</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-max-relevant-bindings</option></entry>
+          </row>
+
+          <row>
+            <entry><option>-fmax-simplifier-iterations=N</option></entry>
             <entry>Set the max iterations for the simplifier</entry>
             <entry>dynamic</entry>
             <entry>-</entry>
           </row>
 
           <row>
-            <entry><option>-fmax-worker-args</option></entry>
+            <entry><option>-fmax-worker-args=N</option></entry>
             <entry>If a worker has that many arguments, none will be
               unpacked anymore (default: 10)</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
 
@@ -1627,7 +1749,7 @@
           <row>
             <entry><option>-fno-pre-inlining</option></entry>
             <entry>Turn off pre-inlining</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
 
@@ -1674,7 +1796,7 @@
             <entry><option>-fspec-constr</option></entry>
             <entry>Turn on the SpecConstr transformation. Implied by <option>-O2</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-spec-constr</entry>
+            <entry><option>-fno-spec-constr</option></entry>
           </row>
 
           <row>
@@ -1697,14 +1819,14 @@
             <entry><option>-fspecialise</option></entry>
             <entry>Turn on specialisation of overloaded functions. Implied by <option>-O</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-specialise</entry>
+            <entry><option>-fno-specialise</option></entry>
           </row>
 
           <row>
             <entry><option>-fstrictness</option></entry>
             <entry>Turn on strictness analysis. Implied by <option>-O</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-strictness</entry>
+            <entry><option>-fno-strictness</option></entry>
           </row>
 
           <row>
@@ -1719,7 +1841,7 @@
             <entry><option>-fstatic-argument-transformation</option></entry>
             <entry>Turn on the static argument transformation. Implied by <option>-O2</option>.</entry>
             <entry>dynamic</entry>
-            <entry>-fno-static-argument-transformation</entry>
+            <entry><option>-fno-static-argument-transformation</option></entry>
           </row>
 
           <row>
@@ -1730,30 +1852,38 @@
           </row>
 
           <row>
+            <entry><option>-funbox-small-strict-fields</option></entry>
+            <entry>Flatten strict constructor fields with a
+              pointer-sized representation</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-unbox-small-strict-fields</option></entry>
+          </row>
+
+          <row>
             <entry><option>-funfolding-creation-threshold</option></entry>
             <entry>Tweak unfolding settings</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry><option>-fno-unfolding-creation-threshold</option></entry>
           </row>
 
           <row>
             <entry><option>-funfolding-fun-discount</option></entry>
             <entry>Tweak unfolding settings</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry><option>-fno-unfolding-fun-discount</option></entry>
           </row>
 
           <row>
             <entry><option>-funfolding-keeness-factor</option></entry>
             <entry>Tweak unfolding settings</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry><option>-fno-unfolding-keeness-factor</option></entry>
           </row>
 
           <row>
             <entry><option>-funfolding-use-threshold</option></entry>
             <entry>Tweak unfolding settings</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry><option>-fno-unfolding-use-threshold</option></entry>
           </row>
 
@@ -1847,7 +1977,7 @@
           <row>
             <entry><option>-fhpc</option></entry>
             <entry>Turn on Haskell program coverage instrumentation</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry><option>-</option></entry>
           </row>
           <row>
@@ -2013,9 +2143,18 @@
             <entry>-</entry>
           </row>
           <row>
+            <entry><option>-staticlib</option></entry>
+            <entry>On Darwin/OS X/iOS only, generate a standalone static library
+              (as opposed to an executable).
+              This is the usual way to compile for iOS.
+              </entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
             <entry><option>-fPIC</option></entry>
             <entry>Generate position-independent code (where available)</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
@@ -2025,6 +2164,24 @@
             <entry>-</entry>
           </row>
           <row>
+            <entry><option>-dynamic-too</option></entry>
+            <entry>Build dynamic object files <emphasis>as well as</emphasis> static object files during compilation</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dyno</option></entry>
+            <entry>Set the output path for the <emphasis>dynamically</emphasis> linked objects</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dynosuf</option></entry>
+            <entry>Set the output suffix for dynamic object files</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
             <entry><option>-dynload</option></entry>
             <entry>Selects one of a number of modes for finding shared
               libraries at runtime.</entry>
@@ -2033,14 +2190,14 @@
           </row>
           <row>
             <entry><option>-framework</option> <replaceable>name</replaceable></entry>
-            <entry>On Darwin/MacOS X only, link in the framework <replaceable>name</replaceable>.
+            <entry>On Darwin/OS X/iOS only, link in the framework <replaceable>name</replaceable>.
               This option corresponds to the <option>-framework</option> option for Apple's Linker.</entry>
             <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-framework-path</option> <replaceable>name</replaceable></entry>
-            <entry>On Darwin/MacOS X only, add <replaceable>dir</replaceable> to the list of
+            <entry>On Darwin/OS X/iOS only, add <replaceable>dir</replaceable> to the list of
               directories searched for frameworks.
               This option corresponds to the <option>-F</option> option for Apple's Linker.</entry>
             <entry>dynamic</entry>
@@ -2151,7 +2308,7 @@
             <entry>Set the install name (via <literal>-install_name</literal> passed to Apple's
               linker), specifying the full install path of the library file. Any libraries
               or executables that link with it later will pick up that path as their
-              runtime search location for it. (Darwin/MacOS X only)</entry>
+              runtime search location for it. (Darwin/OS X only)</entry>
             <entry>dynamic</entry>
             <entry>-</entry>
           </row>
@@ -2279,6 +2436,13 @@
             <entry>dynamic</entry>
             <entry>-</entry>
           </row>
+          <row>
+            <entry><option>-pgmlibtool</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the command for libtool
+              (with <option>-staticlib</option> only).</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
         </tbody>
       </tgroup>
     </informaltable>
@@ -2651,6 +2815,12 @@
             <entry>-</entry>
           </row>
           <row>
+            <entry><option>-ddump-strsigs</option></entry>
+            <entry>Dump strictness signatures</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
             <entry><option>-ddump-tc</option></entry>
             <entry>Dump typechecker output</entry>
             <entry>dynamic</entry>
@@ -2742,44 +2912,44 @@
           </row>
           <row>
             <entry><option>-dsuppress-all</option></entry>
-            <entry>In core dumps, suppress everything that is suppressable.</entry>
-            <entry>static</entry>
+            <entry>In core dumps, suppress everything (except for uniques) that is suppressible.</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-dsuppress-uniques</option></entry>
             <entry>Suppress the printing of uniques in debug output (easier to use <command>diff</command>)</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-dsuppress-idinfo</option></entry>
             <entry>Suppress extended information about identifiers where they are bound</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-dsuppress-module-prefixes</option></entry>
             <entry>Suppress the printing of module qualification prefixes</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-dsuppress-type-signatures</option></entry>
             <entry>Suppress type signatures</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-dsuppress-type-applications</option></entry>
             <entry>Suppress type applications</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
             <entry><option>-dsuppress-coercions</option></entry>
             <entry>Suppress the printing of coercions in Core dumps to make them shorter</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
@@ -2850,6 +3020,12 @@
         </thead>
         <tbody>
           <row>
+            <entry><option>-j <replaceable>N</replaceable></option></entry>
+            <entry>When compiling with <literal>--make</literal>, compile <replaceable>N</replaceable> modules in parallel.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
             <entry><option>-fno-hi-version-check</option></entry>
             <entry>Don't complain about <literal>.hi</literal> file mismatches</entry>
             <entry>static</entry>
@@ -2864,7 +3040,7 @@
           <row>
             <entry><option>-fhistory-size</option></entry>
             <entry>Set simplification history size</entry>
-            <entry>static</entry>
+            <entry>dynamic</entry>
             <entry>-</entry>
           </row>
           <row>
diff -urd 7.6.3-original/ghc.mk original/ghc.mk
--- 7.6.3-original/ghc.mk	2014-06-27 09:19:05.790248855 +0900
+++ original/ghc.mk	2014-04-08 03:26:08.000000000 +0900
@@ -5,8 +5,8 @@
 # This file is part of the GHC build system.
 #
 # To understand how the build system works and how to modify it, see
-#      http://hackage.haskell.org/trac/ghc/wiki/Building/Architecture
-#      http://hackage.haskell.org/trac/ghc/wiki/Building/Modifying
+#      http://ghc.haskell.org/trac/ghc/wiki/Building/Architecture
+#      http://ghc.haskell.org/trac/ghc/wiki/Building/Modifying
 #
 # -----------------------------------------------------------------------------
 
@@ -20,8 +20,8 @@
            $(wildcard docs/users_guide/*.xml)                 \
            $(basename $(wildcard docs/users_guide/*.xml.in)))
 
-$(docs/users_guide_GENERATED_DOCBOOK_SOURCES): %.xml: inplace/bin/mkUserGuidePart$(exeext)
-	inplace/bin/mkUserGuidePart$(exeext) $@
+$(docs/users_guide_GENERATED_DOCBOOK_SOURCES): %.xml: $(mkUserGuidePart_INPLACE)
+	$(mkUserGuidePart_INPLACE) $@
 
 $(eval $(call docbook,docs/users_guide,users_guide))
 
diff -urd 7.6.3-original/ghci.xml original/ghci.xml
--- 7.6.3-original/ghci.xml	2014-06-27 09:19:06.080241168 +0900
+++ original/ghci.xml	2014-04-08 03:26:08.000000000 +0900
@@ -161,7 +161,7 @@
       <para>or it can be set using the <literal>:set</literal> command
       from within GHCi (see <xref
       linkend="ghci-cmd-line-options"/>)<footnote><para>Note that in
-      GHCi, and <option>&ndash;&ndash;make</option> mode, the <option>-i</option>
+      GHCi, and <option>--make</option> mode, the <option>-i</option>
       option is used to specify the search path for
       <emphasis>source</emphasis> files, whereas in standard
       batch-compilation mode the <option>-i</option> option is used to
@@ -338,7 +338,7 @@
     <para>HINT: since GHCi will only use a compiled object file if it
     can be sure that the compiled version is up-to-date, a good technique
     when working on a large program is to occasionally run
-    <literal>ghc &ndash;&ndash;make</literal> to compile the whole project (say
+    <literal>ghc --make</literal> to compile the whole project (say
     before you go for lunch :-), then continue working in the
     interpreter.  As you modify code, the changed modules will be
     interpreted, but the rest of the project will remain
@@ -358,10 +358,10 @@
 </screen>
 </para>
 
-<sect2><title>I/O actions at the prompt</title>
+<sect2 id="actions-at-prompt"><title>I/O actions at the prompt</title>
 
 <para>GHCi does more than simple expression evaluation at the prompt.
-If you type something of type <literal>IO a</literal> for some
+If you enter an expression of type <literal>IO a</literal> for some
     <literal>a</literal>, then GHCi <emphasis>executes</emphasis> it
     as an IO-computation.
 <screen>
@@ -370,6 +370,12 @@
 Prelude> putStrLn "hello"
 hello
 </screen>
+This works even if the type of the expression is more general,
+provided it can be <emphasis>instantiated</emphasis> to <literal>IO a</literal>.  For example
+<screen>
+Prelude> return True
+True
+</screen>
 Furthermore, GHCi will print the result of the I/O action if (and only
 if):
 <itemizedlist>
@@ -417,18 +423,18 @@
 
       <para>If <option>-fprint-bind-result</option> is set then
       GHCi will print the result of a statement if and only if:
-	<itemizedlist>
-	  <listitem>
-	    <para>The statement is not a binding, or it is a monadic binding
-	      (<literal>p &lt;- e</literal>) that binds exactly one
-	      variable.</para>
-	  </listitem>
-	  <listitem>
-	    <para>The variable's type is not polymorphic, is not
-	      <literal>()</literal>, and is an instance of
-	      <literal>Show</literal></para>
-	  </listitem>
-	</itemizedlist>
+        <itemizedlist>
+          <listitem>
+            <para>The statement is not a binding, or it is a monadic binding
+              (<literal>p &lt;- e</literal>) that binds exactly one
+              variable.</para>
+          </listitem>
+          <listitem>
+            <para>The variable's type is not polymorphic, is not
+              <literal>()</literal>, and is an instance of
+              <literal>Show</literal></para>
+          </listitem>
+        </itemizedlist>
       <indexterm><primary><option>-fprint-bind-result</option></primary></indexterm><indexterm><primary><option>-fno-print-bind-result</option></primary></indexterm>.
       </para>
 
@@ -453,7 +459,7 @@
 </screen>
 
       <para>Note that <literal>let</literal> bindings do not automatically
-	print the value bound, unlike monadic bindings.</para>
+        print the value bound, unlike monadic bindings.</para>
 
       <para>Hint: you can also use <literal>let</literal>-statements
       to define functions at the prompt:</para>
@@ -559,7 +565,7 @@
 Prelude> :set +m
 Prelude> let x = 42
 Prelude|     y = 3
-Prelude| 
+Prelude|
 Prelude>
 </screen>
 
@@ -608,7 +614,7 @@
     <sect2 id="ghci-decls">
       <title>Type, class and other declarations</title>
 
-      <para>[<emphasis role="bold">New in version 7.4.1</emphasis>] At the GHCi
+      <para>At the GHCi
       prompt you can also enter any top-level Haskell declaration,
       including <literal>data</literal>, <literal>type</literal>, <literal>newtype</literal>, <literal>class</literal>, <literal>instance</literal>, <literal>deriving</literal>,
       and <literal>foreign</literal> declarations.  For
@@ -648,7 +654,7 @@
     In the first argument of `f', namely `A'
     In the expression: f A
     In an equation for `it': it = f A
-Prelude> 
+Prelude>
 </screen>
 
     <para>The old, shadowed, version of <literal>T</literal> is
@@ -656,20 +662,53 @@
       an attempt to distinguish it from the new <literal>T</literal>,
       which is displayed as simply <literal>T</literal>.</para>
 
+    <para>Class and type-family instance declarations are simply added to the list of available instances, with one
+    exception. Since type-family instances are not permitted to overlap, but you might want to re-define one,
+    a type-family instance <emphasis>replaces</emphasis> any earlier type instance with an identical left hand side.
+    (See <xref linkend="type-families"/>.)</para>
     </sect2>
 
     <sect2 id="ghci-scope">
       <title>What's really in scope at the prompt?</title>
 
       <para>When you type an expression at the prompt, what
-      identifiers and types are in scope?  GHCi provides a flexible
+      identifiers and types are in scope?  
+      GHCi provides a flexible
       way to control exactly how the context for an expression is
-      constructed.  Let's start with the simple cases; when you start
-      GHCi the prompt looks like this:</para>
+      constructed:
+  <itemizedlist>
+  <listitem><para>
+        The <literal>:load</literal>, <literal>:add</literal>, 
+        and <literal>:reload</literal> commands (<xref linkend="ghci-load-scope"/>).
+   </para></listitem>
+  <listitem><para>
+        The <literal>import</literal> declaration (<xref linkend="ghci-import-decl"/>).
+   </para></listitem>
+  <listitem><para>
+        The <literal>:module</literal> command (<xref linkend="ghci-module-cmd"/>).
+   </para></listitem>
+  </itemizedlist>
+      </para>
+      <para>The command <literal>:show imports</literal> will show a summary of which modules
+        contribute to the top-level scope.</para>
+      <para>
+        Hint: GHCi will tab-complete names that are in scope; for
+        example, if you run GHCi and type <literal>J&lt;tab&gt;</literal>
+        then GHCi will expand it to &ldquo;<literal>Just </literal>&rdquo;.
+      </para>
+
+   <sect3 id="ghci-load-scope">
+   <title>The effect of <literal>:load</literal> on what is in scope</title>
+      <para>
+      The <literal>:load</literal>, <literal>:add</literal>, and <literal>:reload</literal> 
+       commands (<xref linkend="loading-source-files"/> 
+      and <xref linkend="ghci-compiled"/>) affect the top-level scope.
+      Let's start with the simple cases; when you start
+      GHCi the prompt looks like this:
 
 <screen>Prelude></screen>
 
-      <para>Which indicates that everything from the module
+      which indicates that everything from the module
       <literal>Prelude</literal> is currently in scope; the visible
       identifiers are exactly those that would be visible in a Haskell
       source file with no <literal>import</literal>
@@ -691,7 +730,7 @@
       prompt (probably including <literal>Prelude</literal>, as long
       as <literal>Main</literal> doesn't explicitly hide it).</para>
 
-      <para>The syntax
+      <para>The syntax in the prompt
       <literal>*<replaceable>module</replaceable></literal> indicates
       that it is the full top-level scope of
       <replaceable>module</replaceable> that is contributing to the
@@ -699,12 +738,6 @@
       <literal>*</literal>, just the exports of the module are
       visible.</para>
 
-      <para>We're not limited to a single module: GHCi can combine
-      scopes from multiple modules, in any mixture of
-      <literal>*</literal> and non-<literal>*</literal> forms.  GHCi
-      combines the scopes from all of these modules to form the scope
-      that is in effect at the prompt.</para>
-
       <para>NOTE: for technical reasons, GHCi can only support the
       <literal>*</literal>-form for modules that are interpreted.
       Compiled modules and package modules can only contribute their
@@ -712,6 +745,44 @@
       interpreted version of a module, add the <literal>*</literal>
       when loading the module, e.g. <literal>:load *M</literal>.</para>
 
+      <para>In general, after a <literal>:load</literal> command, an automatic
+      import is added to the scope for the most recently loaded
+      "target" module, in a <literal>*</literal>-form if possible.
+      For example, if you say <literal>:load foo.hs bar.hs</literal>
+      and <filename>bar.hs</filename> contains module
+      <literal>Bar</literal>, then the scope will be set to
+      <literal>*Bar</literal> if <literal>Bar</literal> is
+      interpreted, or if <literal>Bar</literal> is compiled it will be
+      set to <literal>Prelude Bar</literal> (GHCi automatically adds
+      <literal>Prelude</literal> if it isn't present and there aren't
+      any <literal>*</literal>-form modules).  These
+      automatically-added imports can be seen with
+      <literal>:show imports</literal>:
+
+<screen>
+Prelude> :load hello.hs
+[1 of 1] Compiling Main             ( hello.hs, interpreted )
+Ok, modules loaded: Main.
+*Main> :show imports
+:module +*Main -- added automatically
+*Main>
+</screen>
+
+      and the automatically-added import is replaced the next time you
+      use <literal>:load</literal>, <literal>:add</literal>, or
+      <literal>:reload</literal>.  It can also be removed by
+      <literal>:module</literal> as with normal imports.</para>
+   </sect3>
+
+      <sect3 id="ghci-import-decl">
+      <title>Controlling what is in scope with <literal>import</literal></title>
+
+      <para>We are not limited to a single module: GHCi can combine
+      scopes from multiple modules, in any mixture of
+      <literal>*</literal> and non-<literal>*</literal> forms.  GHCi
+      combines the scopes from all of these modules to form the scope
+      that is in effect at the prompt.</para>
+
       <para>To add modules to the scope, use ordinary Haskell
       <literal>import</literal> syntax:</para>
 
@@ -740,12 +811,39 @@
 </screen>
 
       <para>Note that the <literal>Prelude</literal> import is marked
-      as implicit.  It can be overriden with an explicit
+      as implicit.  It can be overridden with an explicit
       <literal>Prelude</literal> import, just like in a Haskell
       module.</para>
 
+      <para>With multiple modules in scope, especially multiple
+      <literal>*</literal>-form modules, it is likely that name
+      clashes will occur.  Haskell specifies that name clashes are
+      only reported when an ambiguous identifier is used, and GHCi
+      behaves in the same way for expressions typed at the
+      prompt.</para>
+
+      </sect3>
+
+      <sect3 id="ghci-module-cmd">
+      <title>Controlling what is in scope with the <literal>:module</literal> command</title>
+
       <para>Another way to manipulate the scope is to use the
-      <literal>:module</literal> command, which provides a way to do
+      <literal>:module</literal> command, whose syntax is this: 
+
+<screen>
+:module <optional>+|-</optional> <optional>*</optional><replaceable>mod<subscript>1</subscript></replaceable> ... <optional>*</optional><replaceable>mod<subscript>n</subscript></replaceable>
+</screen>
+
+      Using the <literal>+</literal> form of the
+      <literal>module</literal> commands adds modules to the current
+      scope, and <literal>-</literal> removes them.  Without either
+      <literal>+</literal> or <literal>-</literal>, the current scope
+      is replaced by the set of modules specified.  Note that if you
+      use this form and leave out <literal>Prelude</literal>, an
+      implicit <literal>Prelude</literal> import will be added
+      automatically.</para>
+
+      <para>The <literal>:module</literal> command provides a way to do
       two things that cannot be done with ordinary
       <literal>import</literal> declarations:
       <itemizedlist>
@@ -763,70 +861,27 @@
           the scope.</para>
         </listitem>
       </itemizedlist>
-      The full syntax of the <literal>:module</literal> command
-      is:</para>
-
-<screen>
-:module <optional>+|-</optional> <optional>*</optional><replaceable>mod<subscript>1</subscript></replaceable> ... <optional>*</optional><replaceable>mod<subscript>n</subscript></replaceable>
-</screen>
-
-      <para>Using the <literal>+</literal> form of the
-      <literal>module</literal> commands adds modules to the current
-      scope, and <literal>-</literal> removes them.  Without either
-      <literal>+</literal> or <literal>-</literal>, the current scope
-      is replaced by the set of modules specified.  Note that if you
-      use this form and leave out <literal>Prelude</literal>, an
-      implicit <literal>Prelude</literal> import will be added
-      automatically.</para>
-
-      <para>After a <literal>:load</literal> command, an automatic
-      import is added to the scope for the most recently loaded
-      "target" module, in a <literal>*</literal>-form if possible.
-      For example, if you say <literal>:load foo.hs bar.hs</literal>
-      and <filename>bar.hs</filename> contains module
-      <literal>Bar</literal>, then the scope will be set to
-      <literal>*Bar</literal> if <literal>Bar</literal> is
-      interpreted, or if <literal>Bar</literal> is compiled it will be
-      set to <literal>Prelude Bar</literal> (GHCi automatically adds
-      <literal>Prelude</literal> if it isn't present and there aren't
-      any <literal>*</literal>-form modules).  These
-      automatically-added imports can be seen with
-      <literal>:show imports</literal>:
-
-<screen>
-Prelude> :load hello.hs
-[1 of 1] Compiling Main             ( hello.hs, interpreted )
-Ok, modules loaded: Main.
-*Main> :show imports
-:module +*Main -- added automatically
-*Main>
-</screen>
-
-      and the automatically-added import is replaced the next time you
-      use <literal>:load</literal>, <literal>:add</literal>, or
-      <literal>:reload</literal>.  It can also be removed by
-      <literal>:module</literal> as with normal imports.</para>
+      </para>
+      </sect3>
 
-      <para>With multiple modules in scope, especially multiple
-      <literal>*</literal>-form modules, it is likely that name
-      clashes will occur.  Haskell specifies that name clashes are
-      only reported when an ambiguous identifier is used, and GHCi
-      behaves in the same way for expressions typed at the
-      prompt.</para>
+      <sect3 id="ghci-import-qualified">
+        <title>Qualified names</title>
 
-      <para>
-        Hint: GHCi will tab-complete names that are in scope; for
-        example, if you run GHCi and type <literal>J&lt;tab&gt;</literal>
-        then GHCi will expand it to &ldquo;<literal>Just </literal>&rdquo;.
-      </para>
+        <para>To make life slightly easier, the GHCi prompt also
+        behaves as if there is an implicit <literal>import
+        qualified</literal> declaration for every module in every
+        package, and every module currently loaded into GHCi.  This
+          behaviour can be disabled with the flag <option>-fno-implicit-import-qualified</option><indexterm><primary><option>-fno-implicit-import-qualified</option></primary></indexterm>.</para>
+      </sect3>
 
       <sect3>
         <title><literal>:module</literal> and
         <literal>:load</literal></title>
 
-        <para>It might seem that <literal>:module</literal> and
-        <literal>:load</literal> do similar things: you can use both
-        to bring a module into scope.  However, there is a clear
+        <para>It might seem that <literal>:module</literal>/<literal>import</literal> and
+        <literal>:load</literal>/<literal>:add</literal>/<literal>:reload</literal> 
+        do similar things: you can use both
+        to bring a module into scope.  However, there is a very important
         difference.  GHCi is concerned with two sets of modules:</para>
 
         <itemizedlist>
@@ -841,31 +896,27 @@
           <listitem>
             <para>The set of modules that are currently <emphasis>in
             scope</emphasis> at the prompt.  This set is modified by
-            <literal>import</literal>, <literal>:module</literal>, and
+            <literal>import</literal> and <literal>:module</literal>, and
             it is also modified automatically after
             <literal>:load</literal>, <literal>:add</literal>, and
-            <literal>:reload</literal>, as described above.</para>
+            <literal>:reload</literal>, as described above.
+            The set of modules in scope can be shown with
+            <literal>:show imports</literal>.</para>
           </listitem>
         </itemizedlist>
 
-        <para>You cannot add a module to the scope if it is not
-          loaded.  This is why trying to
-          use <literal>:module</literal> to load a new module results
+        <para>You can add a module to the scope (via <literal>:module</literal> 
+           or <literal>import</literal>)
+          only if either (a) it is loaded, or
+          (b) it is a module from a package that GHCi knows about.
+          Using <literal>:module</literal> or <literal>import</literal>
+          to try bring into scope a non-loaded module may result
           in the message &ldquo;<literal>module M is not
             loaded</literal>&rdquo;.</para>
       </sect3>
 
-      <sect3 id="ghci-import-qualified">
-	<title>Qualified names</title>
-
-	<para>To make life slightly easier, the GHCi prompt also
-        behaves as if there is an implicit <literal>import
-        qualified</literal> declaration for every module in every
-        package, and every module currently loaded into GHCi.  This
-          behaviour can be disabled with the flag <option>-fno-implicit-import-qualified</option><indexterm><primary><option>-fno-implicit-import-qualified</option></primary></indexterm>.</para>
-      </sect3>
-
-      <sect3>
+    </sect2>
+      <sect2>
         <title>The <literal>:main</literal> and <literal>:run</literal> commands</title>
 
         <para>
@@ -921,8 +972,6 @@
 bar
 ["foo","bar baz"]
 </screen>
-
-      </sect3>
     </sect2>
 
 
@@ -1089,7 +1138,11 @@
     <literal>Integer</literal> then ghci gives an error when running a
     printf.
    </para>
+   <para>See also <xref linkend="actions-at-prompt"/> for how the monad of a computational
+   expression defaults to <literal>IO</literal> if possible.
+   </para>
     </sect2>
+
    <sect2 id="ghci-interactive-print">
      <title>Using a custom interactive printing function</title>
      <para>[<emphasis role="bold">New in version 7.6.1</emphasis>]
@@ -1113,23 +1166,23 @@
      <para>
        As an example, suppose we have following special printing module:
        <programlisting>
-	 module SpecPrinter where
-	 import System.IO
+         module SpecPrinter where
+         import System.IO
 
-	 sprint a = putStrLn $ show a ++ "!"
+         sprint a = putStrLn $ show a ++ "!"
        </programlisting>
        The <literal>sprint</literal> function adds an exclamation mark at the
        end of any printed value. Running GHCi with the command:
        <programlisting>
-	 ghci -interactive-print=SpecPrinter.sprinter SpecPrinter
+         ghci -interactive-print=SpecPrinter.sprinter SpecPrinter
        </programlisting>
        will start an interactive session where values with be printed using
        <literal>sprint</literal>:
        <programlisting>
-	 *SpecPrinter> [1,2,3]
-	 [1,2,3]!
-	 *SpecPrinter> 42
-	 42!
+         *SpecPrinter> [1,2,3]
+         [1,2,3]!
+         *SpecPrinter> 42
+         42!
        </programlisting>
      </para>
      <para>
@@ -1140,8 +1193,8 @@
        The <literal>-interactive-print</literal> flag can also be used when
        running GHC in <literal>-e mode</literal>:
        <programlisting>
-	 % ghc -e "[1,2,3]" -interactive-print=SpecPrinter.sprint SpecPrinter
-	 [1,2,3]!
+         % ghc -e "[1,2,3]" -interactive-print=SpecPrinter.sprint SpecPrinter
+         [1,2,3]!
        </programlisting>
      </para>
    </sect2>
@@ -1496,13 +1549,13 @@
       <para>Single-stepping is a great way to visualise the execution of your
         program, and it is also a useful tool for identifying the source of a
         bug. GHCi offers two variants of stepping. Use
-	<literal>:step</literal>  to enable all the
+        <literal>:step</literal>  to enable all the
         breakpoints in the program, and execute until the next breakpoint is
         reached. Use <literal>:steplocal</literal> to limit the set
-	of enabled breakpoints to those in the current top level function.
-	Similarly, use <literal>:stepmodule</literal> to single step only on
-	breakpoints contained in the current module.
-	For example:</para>
+        of enabled breakpoints to those in the current top level function.
+        Similarly, use <literal>:stepmodule</literal> to single step only on
+        breakpoints contained in the current module.
+        For example:</para>
 
 <screen>
 *Main> :step main
@@ -1514,8 +1567,8 @@
         <replaceable>expr</replaceable></literal> begins the evaluation of
         <replaceable>expr</replaceable> in single-stepping mode.  If
         <replaceable>expr</replaceable> is omitted, then it single-steps from
-        the current breakpoint. <literal>:stepover</literal>
-        works similarly.</para>
+        the current breakpoint. <literal>:steplocal</literal> and
+        <literal>:stepmodule</literal> work similarly.</para>
 
       <para>The <literal>:list</literal> command is particularly useful when
         single-stepping, to see where you currently are:</para>
@@ -1701,8 +1754,7 @@
       <para>The history is only available when
         using <literal>:trace</literal>; the reason for this is we found that
         logging each breakpoint in the history cuts performance by a factor of
-        2 or more.  GHCi remembers the last 50 steps in the history (perhaps in
-        the future we'll make this configurable).</para>
+        2 or more.  By default, GHCi remembers the last 50 steps in the history, but this can be changed with the <option>-fghci-hist-size=<replaceable>n</replaceable></option><indexterm><primary><option>-fghci-hist-size</option></primary></indexterm> option).</para>
     </sect2>
 
     <sect2 id="ghci-debugger-exceptions">
@@ -1727,11 +1779,11 @@
         we can't set a breakpoint on it directly.  For this reason, GHCi
         provides the flags <literal>-fbreak-on-exception</literal> which causes
         the evaluator to stop when an exception is thrown, and <literal>
-	-fbreak-on-error</literal>, which works similarly but stops only on
-	uncaught exceptions. When stopping at an exception, GHCi will act
-	just as it does when a breakpoint is hit, with the deviation that it
-	will not show you any source code location. Due to this, these
-	commands are only really useful in conjunction with
+        -fbreak-on-error</literal>, which works similarly but stops only on
+        uncaught exceptions. When stopping at an exception, GHCi will act
+        just as it does when a breakpoint is hit, with the deviation that it
+        will not show you any source code location. Due to this, these
+        commands are only really useful in conjunction with
         <literal>:trace</literal>, in order to log the steps leading up to the
         exception.  For example:</para>
 
@@ -1885,10 +1937,10 @@
             CAF (e.g. main), stop at a breakpoint, and ask for the value of the
             CAF at the prompt again.</para>
         </listitem>
-	<listitem><para>
-	  Implicit parameters (see <xref linkend="implicit-parameters"/>) are only available
-	  at the scope of a breakpoint if there is an explicit type signature.
-	</para>
+        <listitem><para>
+          Implicit parameters (see <xref linkend="implicit-parameters"/>) are only available
+          at the scope of a breakpoint if there is an explicit type signature.
+        </para>
         </listitem>
       </itemizedlist>
     </sect2>
@@ -1897,10 +1949,10 @@
   <sect1 id="ghci-invocation">
     <title>Invoking GHCi</title>
     <indexterm><primary>invoking</primary><secondary>GHCi</secondary></indexterm>
-    <indexterm><primary><option>&ndash;&ndash;interactive</option></primary></indexterm>
+    <indexterm><primary><option>--interactive</option></primary></indexterm>
 
     <para>GHCi is invoked with the command <literal>ghci</literal> or
-    <literal>ghc &ndash;&ndash;interactive</literal>.  One or more modules or
+    <literal>ghc --interactive</literal>.  One or more modules or
     filenames can also be specified on the command line; this
     instructs GHCi to load the specified modules or filenames (and all
     the modules they depend on), just as if you had said
@@ -1970,17 +2022,17 @@
       searches the following places for libraries, in this order:</para>
 
       <itemizedlist>
-	<listitem>
-	  <para>Paths specified using the
+        <listitem>
+          <para>Paths specified using the
           <literal>-L<replaceable>path</replaceable></literal>
           command-line option,</para>
-	</listitem>
-	<listitem>
-	  <para>the standard library search path for your system,
-	  which on some systems may be overridden by setting the
-	  <literal>LD_LIBRARY_PATH</literal> environment
-	  variable.</para>
-	</listitem>
+        </listitem>
+        <listitem>
+          <para>the standard library search path for your system,
+          which on some systems may be overridden by setting the
+          <literal>LD_LIBRARY_PATH</literal> environment
+          variable.</para>
+        </listitem>
       </itemizedlist>
 
       <para>On systems with <literal>.dll</literal>-style shared
@@ -2011,94 +2063,94 @@
 
     <variablelist>
       <varlistentry>
-	<term>
+        <term>
           <literal>:abandon</literal>
           <indexterm><primary><literal>:abandon</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Abandons the current evaluation (only available when stopped at
+        <listitem>
+          <para>Abandons the current evaluation (only available when stopped at
           a breakpoint).</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:add</literal> <optional><literal>*</literal></optional><replaceable>module</replaceable> ...
           <indexterm><primary><literal>:add</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Add <replaceable>module</replaceable>(s) to the
-	  current <firstterm>target set</firstterm>, and perform a
-	  reload.  Normally pre-compiled code for the module will be
-	  loaded if available, or otherwise the module will be
-	  compiled to byte-code.  Using the <literal>*</literal>
-	  prefix forces the module to be loaded as byte-code.</para>
-	</listitem>
+        <listitem>
+          <para>Add <replaceable>module</replaceable>(s) to the
+          current <firstterm>target set</firstterm>, and perform a
+          reload.  Normally pre-compiled code for the module will be
+          loaded if available, or otherwise the module will be
+          compiled to byte-code.  Using the <literal>*</literal>
+          prefix forces the module to be loaded as byte-code.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:back</literal>
           <indexterm><primary><literal>:back</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Travel back one step in the history.  See <xref
+        <listitem>
+          <para>Travel back one step in the history.  See <xref
               linkend="tracing" />.  See also:
             <literal>:trace</literal>, <literal>:history</literal>,
             <literal>:forward</literal>.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:break [<replaceable>identifier</replaceable> |
             [<replaceable>module</replaceable>] <replaceable>line</replaceable>
             [<replaceable>column</replaceable>]]</literal>
         </term>
           <indexterm><primary><literal>:break</literal></primary></indexterm>
-	<listitem>
-	  <para>Set a breakpoint on the specified function or line and
+        <listitem>
+          <para>Set a breakpoint on the specified function or line and
               column.  See <xref linkend="setting-breakpoints" />.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:browse</literal><optional><literal>!</literal></optional> <optional><optional><literal>*</literal></optional><replaceable>module</replaceable></optional> ...
           <indexterm><primary><literal>:browse</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Displays the identifiers exported by the module
-	  <replaceable>module</replaceable>, which must be either
-	  loaded into GHCi or be a member of a package.  If
-	  <replaceable>module</replaceable> is omitted, the most
-	  recently-loaded module is used.</para>
+        <listitem>
+          <para>Displays the identifiers exported by the module
+          <replaceable>module</replaceable>, which must be either
+          loaded into GHCi or be a member of a package.  If
+          <replaceable>module</replaceable> is omitted, the most
+          recently-loaded module is used.</para>
 
-	  <para>Like all other GHCi commands, the output is always 
+          <para>Like all other GHCi commands, the output is always
           displayed in the current GHCi scope (<xref linkend="ghci-scope"/>).</para>
 
           <para>There are two variants of the browse command:
           <itemizedlist>
-          <listitem>  
+          <listitem>
              <para>If the <literal>*</literal> symbol is placed before
-	     the module name, then <emphasis>all</emphasis> the
-	     identifiers in scope in <replaceable>module</replaceable> 
+             the module name, then <emphasis>all</emphasis> the
+             identifiers in scope in <replaceable>module</replaceable>
              (rather that just its exports) are shown. </para>
 
              <para>The <literal>*</literal>-form is only available for modules
-	     which are interpreted; for compiled modules (including
-	     modules from packages) only the non-<literal>*</literal>
+             which are interpreted; for compiled modules (including
+             modules from packages) only the non-<literal>*</literal>
              form of <literal>:browse</literal> is available.</para>
           </listitem>
           <listitem>
           <para>Data constructors and class methods are usually
           displayed in the context of their data type or class declaration.
           However, if the <literal>!</literal> symbol is appended to the
-          command, thus <literal>:browse!</literal>, 
-          they are listed individually. 
-    	  The <literal>!</literal>-form also annotates the listing
-    	  with comments giving possible imports for each group of
-    	  entries.  Here is an example:
+          command, thus <literal>:browse!</literal>,
+          they are listed individually.
+          The <literal>!</literal>-form also annotates the listing
+          with comments giving possible imports for each group of
+          entries.  Here is an example:
 <screen>
 Prelude> :browse! Data.Maybe
 -- not currently imported
@@ -2125,83 +2177,172 @@
     unqualified, or with a <literal>Prelude.</literal> qualifier.
   </para>
           </listitem>
-	</itemizedlist>
+        </itemizedlist>
       </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:cd</literal> <replaceable>dir</replaceable>
           <indexterm><primary><literal>:cd</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Changes the current working directory to
-	  <replaceable>dir</replaceable>.  A
-	  &lsquo;<literal>&tilde;</literal>&rsquo; symbol at the
-	  beginning of <replaceable>dir</replaceable> will be replaced
-	  by the contents of the environment variable
-	  <literal>HOME</literal>.</para>
+        <listitem>
+          <para>Changes the current working directory to
+          <replaceable>dir</replaceable>.  A
+          &lsquo;<literal>&tilde;</literal>&rsquo; symbol at the
+          beginning of <replaceable>dir</replaceable> will be replaced
+          by the contents of the environment variable
+          <literal>HOME</literal>.
+          See also the <literal>:show paths</literal> command for
+          showing the current working directory.</para>
 
-	  <para>NOTE: changing directories causes all currently loaded
-	  modules to be unloaded.  This is because the search path is
-	  usually expressed using relative directories, and changing
-	  the search path in the middle of a session is not
-	  supported.</para>
-	</listitem>
+          <para>NOTE: changing directories causes all currently loaded
+          modules to be unloaded.  This is because the search path is
+          usually expressed using relative directories, and changing
+          the search path in the middle of a session is not
+          supported.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:cmd</literal> <replaceable>expr</replaceable>
           <indexterm><primary><literal>:cmd</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Executes <replaceable>expr</replaceable> as a computation of
+        <listitem>
+          <para>Executes <replaceable>expr</replaceable> as a computation of
             type <literal>IO String</literal>, and then executes the resulting
             string as a list of GHCi commands.  Multiple commands are separated
             by newlines.  The <literal>:cmd</literal> command is useful with
             <literal>:def</literal> and <literal>:set stop</literal>.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
+          <literal>:complete</literal> <replaceable>type</replaceable>
+                                       <optional><replaceable>n</replaceable>-</optional><optional><replaceable>m</replaceable></optional>
+                                       <replaceable>string-literal</replaceable>
+          <indexterm><primary><literal>:complete</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>This command allows to request command completions
+          from GHCi even when interacting over a pipe instead of a
+          proper terminal and is designed for integrating GHCi's
+          completion with text editors and IDEs.</para>
+
+          <para>When called, <literal>:complete</literal> prints the
+          <replaceable>n</replaceable><superscript>th</superscript> to
+          <replaceable>m</replaceable><superscript>th</superscript>
+          completion candidates for the partial input
+          <replaceable>string-literal</replaceable> for the completion
+          domain denoted by
+          <replaceable>type</replaceable>. Currently, only the
+          <literal>repl</literal> domain is supported which denotes
+          the kind of completion that would be provided interactively
+          by GHCi at the input prompt.</para>
+
+          <para>If omitted, <replaceable>n</replaceable> and
+          <replaceable>m</replaceable> default to the first or last
+          available completion candidate respectively. If there are
+          less candidates than requested via the range argument,
+          <replaceable>n</replaceable> and
+          <replaceable>m</replaceable> are implicitly capped to the
+          number of available completition candidates.</para>
+
+          <para>The output of <literal>:complete</literal> begins with
+          a header line containing three space-delimited fields:
+
+          <itemizedlist>
+            <listitem>An integer denoting the number
+            <replaceable>l</replaceable> of printed
+            completions,</listitem>
+
+            <listitem>an integer denoting the total number of
+            completions available, and finally</listitem>
+
+            <listitem>a string literal denoting a common
+            prefix to be added to the returned completion
+            candidates.</listitem>
+          </itemizedlist>
+
+          The header line is followed by <replaceable>l</replaceable>
+          lines each containing one completion candidate encoded as
+          (quoted) string literal. Here are some example invocations
+          showing the various cases:</para>
+
+<screen>
+Prelude&gt; :complete repl 0 ""
+0 470 ""
+Prelude&gt; :complete repl 5 "import For"
+5 21 "import "
+"Foreign"
+"Foreign.C"
+"Foreign.C.Error"
+"Foreign.C.String"
+"Foreign.C.Types"
+Prelude&gt; :complete repl 5-10 "import For"
+6 21 "import "
+"Foreign.C.Types"
+"Foreign.Concurrent"
+"Foreign.ForeignPtr"
+"Foreign.ForeignPtr.Safe"
+"Foreign.ForeignPtr.Unsafe"
+"Foreign.Marshal"
+Prelude&gt; :complete repl 20- "import For"
+2 21 "import "
+"Foreign.StablePtr"
+"Foreign.Storable"
+Prelude&gt; :complete repl "map"
+3 3 ""
+"map"
+"mapM"
+"mapM_"
+Prelude&gt; :complete repl 5-10 "map"
+0 3 ""
+</screen>
+
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
           <literal>:continue</literal>
           <indexterm><primary><literal>:continue</literal></primary></indexterm>
         </term>
-	<listitem><para>Continue the current evaluation, when stopped at a
+        <listitem><para>Continue the current evaluation, when stopped at a
             breakpoint.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-	  <literal>:ctags</literal> <optional><replaceable>filename</replaceable></optional>
-	  <literal>:etags</literal> <optional><replaceable>filename</replaceable></optional>
-	  <indexterm><primary><literal>:etags</literal></primary>
-	  </indexterm>
-	  <indexterm><primary><literal>:etags</literal></primary>
-	  </indexterm>
-	</term>
-	<listitem>
-	  <para>Generates a &ldquo;tags&rdquo; file for Vi-style editors
-	    (<literal>:ctags</literal>) or
+        <term>
+          <literal>:ctags</literal> <optional><replaceable>filename</replaceable></optional>
+          <literal>:etags</literal> <optional><replaceable>filename</replaceable></optional>
+          <indexterm><primary><literal>:etags</literal></primary>
+          </indexterm>
+          <indexterm><primary><literal>:etags</literal></primary>
+          </indexterm>
+        </term>
+        <listitem>
+          <para>Generates a &ldquo;tags&rdquo; file for Vi-style editors
+            (<literal>:ctags</literal>) or
         Emacs-style editors (<literal>:etags</literal>).  If
-	    no filename is specified, the default <filename>tags</filename> or
-	    <filename>TAGS</filename> is
-	    used, respectively.  Tags for all the functions, constructors and
-	    types in the currently loaded modules are created.  All modules must
-	    be interpreted for these commands to work.</para>
+            no filename is specified, the default <filename>tags</filename> or
+            <filename>TAGS</filename> is
+            used, respectively.  Tags for all the functions, constructors and
+            types in the currently loaded modules are created.  All modules must
+            be interpreted for these commands to work.</para>
         </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:def<optional>!</optional> <optional><replaceable>name</replaceable> <replaceable>expr</replaceable></optional></literal>
           <indexterm><primary><literal>:def</literal></primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
           <para><literal>:def</literal> is used to define new
           commands, or macros, in GHCi.  The command
           <literal>:def</literal> <replaceable>name</replaceable>
@@ -2220,10 +2361,10 @@
           the result must be separated by
           &lsquo;<literal>\n</literal>&rsquo;.</para>
 
-	  <para>That's all a little confusing, so here's a few
-	  examples.  To start with, here's a new GHCi command which
-	  doesn't take any arguments or produce any results, it just
-	  outputs the current date &amp; time:</para>
+          <para>That's all a little confusing, so here's a few
+          examples.  To start with, here's a new GHCi command which
+          doesn't take any arguments or produce any results, it just
+          outputs the current date &amp; time:</para>
 
 <screen>
 Prelude> let date _ = Time.getClockTime >>= print >> return ""
@@ -2232,8 +2373,8 @@
 Fri Mar 23 15:16:40 GMT 2001
 </screen>
 
-	  <para>Here's an example of a command that takes an argument.
-	  It's a re-implementation of <literal>:cd</literal>:</para>
+          <para>Here's an example of a command that takes an argument.
+          It's a re-implementation of <literal>:cd</literal>:</para>
 
 <screen>
 Prelude> let mycd d = Directory.setCurrentDirectory d >> return ""
@@ -2241,12 +2382,12 @@
 Prelude> :mycd ..
 </screen>
 
-	  <para>Or I could define a simple way to invoke
-	  &ldquo;<literal>ghc &ndash;&ndash;make Main</literal>&rdquo; in the
-	  current directory:</para>
+          <para>Or I could define a simple way to invoke
+          &ldquo;<literal>ghc --make Main</literal>&rdquo; in the
+          current directory:</para>
 
 <screen>
-Prelude> :def make (\_ -> return ":! ghc &ndash;&ndash;make Main")
+Prelude> :def make (\_ -> return ":! ghc --make Main")
 </screen>
 
           <para>We can define a command that reads GHCi input from a
@@ -2268,86 +2409,86 @@
           existing command name results in an error unless the
           <literal>:def!</literal> form is used, in which case the old
           command with that name is silently overwritten.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:delete * | <replaceable>num</replaceable> ...</literal>
           <indexterm><primary><literal>:delete</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Delete one or more breakpoints by number (use <literal>:show
+        <listitem>
+          <para>Delete one or more breakpoints by number (use <literal>:show
               breaks</literal> to see the number of each breakpoint).  The
             <literal>*</literal> form deletes all the breakpoints.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:edit <optional><replaceable>file</replaceable></optional></literal>
           <indexterm><primary><literal>:edit</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Opens an editor to edit the file
-	  <replaceable>file</replaceable>, or the most recently loaded
-	  module if <replaceable>file</replaceable> is omitted.  The
-	  editor to invoke is taken from the <literal>EDITOR</literal>
-	  environment variable, or a default editor on your system if
-	  <literal>EDITOR</literal> is not set.  You can change the
-	  editor using <literal>:set editor</literal>.</para>
-	</listitem>
+        <listitem>
+          <para>Opens an editor to edit the file
+          <replaceable>file</replaceable>, or the most recently loaded
+          module if <replaceable>file</replaceable> is omitted.  The
+          editor to invoke is taken from the <literal>EDITOR</literal>
+          environment variable, or a default editor on your system if
+          <literal>EDITOR</literal> is not set.  You can change the
+          editor using <literal>:set editor</literal>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:etags</literal>
         </term>
-	<listitem>
-	  <para>See <literal>:ctags</literal>.</para>
-	</listitem>
+        <listitem>
+          <para>See <literal>:ctags</literal>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:force <replaceable>identifier</replaceable> ...</literal>
           <indexterm><primary><literal>:force</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Prints the value of <replaceable>identifier</replaceable> in
+        <listitem>
+          <para>Prints the value of <replaceable>identifier</replaceable> in
             the same way as <literal>:print</literal>.   Unlike
             <literal>:print</literal>, <literal>:force</literal> evaluates each
             thunk that it encounters while traversing the value.  This may
             cause exceptions or infinite loops, or further breakpoints (which
             are ignored, but displayed).</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:forward</literal>
           <indexterm><primary><literal>:forward</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Move forward in the history.   See <xref
+        <listitem>
+          <para>Move forward in the history.   See <xref
               linkend="tracing" />.  See also:
             <literal>:trace</literal>, <literal>:history</literal>,
             <literal>:back</literal>.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:help</literal>
           <indexterm><primary><literal>:help</literal></primary></indexterm>
         </term>
-	<term>
+        <term>
           <literal>:?</literal>
           <indexterm><primary><literal>:?</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Displays a list of the available commands.</para>
-	</listitem>
+        <listitem>
+          <para>Displays a list of the available commands.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
@@ -2362,105 +2503,166 @@
 
       <varlistentry>
 
-	<term>
+        <term>
           <literal>:history [<replaceable>num</replaceable>]</literal>
           <indexterm><primary><literal>:history</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Display the history of evaluation steps.  With a number,
-            displays that many steps (default: 20).  For use with
-            <literal>:trace</literal>; see <xref
-              linkend="tracing" />.</para>
-	</listitem>
+        <listitem>
+          <para>Display the history of evaluation steps.  With a
+          number, displays that many steps (default: 20).  For use
+          with <literal>:trace</literal>; see <xref linkend="tracing"
+          />.  To set the number of history entries stored by GHCi,
+          use
+          <option>-fghci-hist-size=<replaceable>n</replaceable></option>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-          <literal>:info</literal> <replaceable>name</replaceable> ...
+        <term>
+          <literal>:info</literal><optional><literal>!</literal></optional><replaceable>name</replaceable> ...
           <indexterm><primary><literal>:info</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Displays information about the given name(s).  For
-	  example, if <replaceable>name</replaceable> is a class, then
-	  the class methods and their types will be printed;  if
-	  <replaceable>name</replaceable> is a type constructor, then
-	  its definition will be printed;  if
-	  <replaceable>name</replaceable> is a function, then its type
-	  will be printed.  If <replaceable>name</replaceable> has
-	  been loaded from a source file, then GHCi will also display
-	  the location of its definition in the source.</para>
-	  <para>For types and classes, GHCi also summarises instances that
-	  mention them.  To avoid showing irrelevant information, an instance
-	  is shown only if (a) its head mentions <replaceable>name</replaceable>,
-	  and (b) all the other things mentioned in the instance
-	  are in scope (either qualified or otherwise) as a result of
-	  a <literal>:load</literal> or <literal>:module</literal> commands. </para>
-	</listitem>
+        <listitem>
+          <para>Displays information about the given name(s).  For
+          example, if <replaceable>name</replaceable> is a class, then
+          the class methods and their types will be printed;  if
+          <replaceable>name</replaceable> is a type constructor, then
+          its definition will be printed;  if
+          <replaceable>name</replaceable> is a function, then its type
+          will be printed.  If <replaceable>name</replaceable> has
+          been loaded from a source file, then GHCi will also display
+          the location of its definition in the source.</para>
+          <para>For types and classes, GHCi also summarises instances that
+          mention them.  To avoid showing irrelevant information, an instance
+          is shown only if (a) its head mentions <replaceable>name</replaceable>,
+          and (b) all the other things mentioned in the instance
+          are in scope (either qualified or otherwise) as a result of
+          a <literal>:load</literal> or <literal>:module</literal> commands. </para>
+          <para>
+          The command <literal>:info!</literal> works in a similar fashion
+          but it removes restriction (b), showing all instances that are in
+          scope and mention <replaceable>name</replaceable> in their head.
+          </para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-          <literal>:kind</literal><optional><literal>!</literal></optional> 
+        <term>
+          <literal>:issafe</literal><optional><replaceable>module</replaceable></optional>
+          <indexterm><primary><literal>:issafe</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Displays Safe Haskell information about the given
+          module (or the current module if omitted). This includes the trust
+          type of the module and its containing package.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <literal>:kind</literal><optional><literal>!</literal></optional>
                         <replaceable>type</replaceable>
           <indexterm><primary><literal>:kind</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Infers and prints the kind of
-	  <replaceable>type</replaceable>. The latter can be an arbitrary
-	    type expression, including a partial application of a type constructor,
-	    such as <literal>Either Int</literal>.  If you specify the 
+        <listitem>
+          <para>Infers and prints the kind of
+          <replaceable>type</replaceable>. The latter can be an arbitrary
+            type expression, including a partial application of a type constructor,
+            such as <literal>Either Int</literal>.  In fact, <literal>:kind</literal>
+            even allows you to write a partial application of a type synonym (usually disallowed),
+            so that this works:
+<programlisting>
+ghci> type T a b = (a,b,a)
+ghci> :k T Int Bool
+T Int Bool :: *
+ghci> :k T
+T :: * -> * -> *
+ghci> :k T Int
+T Int :: * -> *
+</programlisting>
+            </para>
+            <para>
+            If you specify the
             optional "<literal>!</literal>", GHC will in addition normalise the type
             by expanding out type synonyms and evaluating type-function applications,
             and display the normalised result.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
+          <literal>:list</literal> <replaceable>identifier</replaceable>
+          <indexterm><primary><literal>:list</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Lists the source code around the definition of
+          <replaceable>identifier</replaceable> or the current
+          breakpoint if not given. This requires that the identifier be
+          defined in an interpreted module.  If your output device
+          supports it, then GHCi will highlight the active
+          subexpression in bold.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <literal>:list</literal> <optional><replaceable>module</replaceable></optional> <replaceable>line</replaceable>
+          <indexterm><primary><literal>:list</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Lists the source code around the given line number of
+          <replaceable>module</replaceable>. This requires that the module be
+          interpreted. If your output device supports it, then GHCi will
+          highlight the active subexpression in bold.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
           <literal>:load</literal> <optional><literal>*</literal></optional><replaceable>module</replaceable> ...
           <indexterm><primary><literal>:load</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Recursively loads the specified
-	  <replaceable>module</replaceable>s, and all the modules they
-	  depend on.  Here, each <replaceable>module</replaceable>
-	  must be a module name or filename, but may not be the name
-	  of a module in a package.</para>
+        <listitem>
+          <para>Recursively loads the specified
+          <replaceable>module</replaceable>s, and all the modules they
+          depend on.  Here, each <replaceable>module</replaceable>
+          must be a module name or filename, but may not be the name
+          of a module in a package.</para>
 
-	  <para>All previously loaded modules, except package modules,
-	  are forgotten.  The new set of modules is known as the
-	  <firstterm>target set</firstterm>.  Note that
-	  <literal>:load</literal> can be used without any arguments
-	  to unload all the currently loaded modules and
-	  bindings.</para>
+          <para>All previously loaded modules, except package modules,
+          are forgotten.  The new set of modules is known as the
+          <firstterm>target set</firstterm>.  Note that
+          <literal>:load</literal> can be used without any arguments
+          to unload all the currently loaded modules and
+          bindings.</para>
 
           <para>Normally pre-compiled code for a module will be loaded
-	  if available, or otherwise the module will be compiled to
-	  byte-code.  Using the <literal>*</literal> prefix forces a
-	  module to be loaded as byte-code.</para>
+          if available, or otherwise the module will be compiled to
+          byte-code.  Using the <literal>*</literal> prefix forces a
+          module to be loaded as byte-code.</para>
 
-	  <para>After a <literal>:load</literal> command, the current
-	  context is set to:</para>
+          <para>After a <literal>:load</literal> command, the current
+          context is set to:</para>
 
-	  <itemizedlist>
-	    <listitem>
-	      <para><replaceable>module</replaceable>, if it was loaded
-	      successfully, or</para>
-	    </listitem>
-	    <listitem>
-	      <para>the most recently successfully loaded module, if
-	      any other modules were loaded as a result of the current
-	      <literal>:load</literal>, or</para>
-	    </listitem>
-	    <listitem>
-	      <para><literal>Prelude</literal> otherwise.</para>
-	    </listitem>
-	  </itemizedlist>
-	</listitem>
+          <itemizedlist>
+            <listitem>
+              <para><replaceable>module</replaceable>, if it was loaded
+              successfully, or</para>
+            </listitem>
+            <listitem>
+              <para>the most recently successfully loaded module, if
+              any other modules were loaded as a result of the current
+              <literal>:load</literal>, or</para>
+            </listitem>
+            <listitem>
+              <para><literal>Prelude</literal> otherwise.</para>
+            </listitem>
+          </itemizedlist>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:main <replaceable>arg<subscript>1</subscript></replaceable> ... <replaceable>arg<subscript>n</subscript></replaceable></literal>
           <indexterm><primary><literal>:main</literal></primary></indexterm>
         </term>
@@ -2523,30 +2725,30 @@
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:module <optional>+|-</optional> <optional>*</optional><replaceable>mod<subscript>1</subscript></replaceable> ... <optional>*</optional><replaceable>mod<subscript>n</subscript></replaceable></literal>
           <indexterm><primary><literal>:module</literal></primary></indexterm>
         </term>
         <term>
           <literal>import <replaceable>mod</replaceable></literal>
         </term>
-	<listitem>
-	  <para>Sets or modifies the current context for statements
-	  typed at the prompt.  The form <literal>import
-	  <replaceable>mod</replaceable></literal> is equivalent to
-	  <literal>:module +<replaceable>mod</replaceable></literal>.
-	  See <xref linkend="ghci-scope"/> for
-	  more details.</para>
-	</listitem>
+        <listitem>
+          <para>Sets or modifies the current context for statements
+          typed at the prompt.  The form <literal>import
+          <replaceable>mod</replaceable></literal> is equivalent to
+          <literal>:module +<replaceable>mod</replaceable></literal>.
+          See <xref linkend="ghci-scope"/> for
+          more details.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:print </literal> <replaceable>names</replaceable> ...
           <indexterm><primary><literal>:print</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Prints a value without forcing its evaluation.
+        <listitem>
+          <para>Prints a value without forcing its evaluation.
             <literal>:print</literal> may be used on values whose types are
             unknown or partially known, which might be the case for local
             variables with polymorphic types at a breakpoint.  While inspecting
@@ -2559,127 +2761,139 @@
             information.  See also the <literal>:sprint</literal> command,
             which works like <literal>:print</literal> but does not bind new
             variables.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:quit</literal>
           <indexterm><primary><literal>:quit</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Quits GHCi.  You can also quit by typing control-D
-	  at the prompt.</para>
-	</listitem>
+        <listitem>
+          <para>Quits GHCi.  You can also quit by typing control-D
+          at the prompt.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:reload</literal>
           <indexterm><primary><literal>:reload</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Attempts to reload the current target set (see
-	  <literal>:load</literal>) if any of the modules in the set,
-	  or any dependent module, has changed.  Note that this may
-	  entail loading new modules, or dropping modules which are no
-	  longer indirectly required by the target.</para>
-	</listitem>
+        <listitem>
+          <para>Attempts to reload the current target set (see
+          <literal>:load</literal>) if any of the modules in the set,
+          or any dependent module, has changed.  Note that this may
+          entail loading new modules, or dropping modules which are no
+          longer indirectly required by the target.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:run</literal>
           <indexterm><primary><literal>:run</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>See <literal>:main</literal>.</para>
-	</listitem>
+        <listitem>
+          <para>See <literal>:main</literal>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:script</literal> <optional><replaceable>n</replaceable></optional>
-	  <literal>filename</literal>
+          <literal>filename</literal>
           <indexterm><primary><literal>:script</literal></primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
     <para>Executes the lines of a file as a series of GHCi commands.  This command
     is compatible with multiline statements as set by <literal>:set +m</literal>
     </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:set</literal> <optional><replaceable>option</replaceable>...</optional>
           <indexterm><primary><literal>:set</literal></primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
     <para>Sets various options.  See <xref linkend="ghci-set"/> for a list of
       available options and <xref linkend="interactive-mode-options"/> for a
       list of GHCi-specific flags.  The <literal>:set</literal> command by
       itself shows which options are currently set. It also lists the current
       dynamic flag settings, with GHCi-specific flags listed separately.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:set</literal> <literal>args</literal> <replaceable>arg</replaceable> ...
           <indexterm><primary><literal>:set args</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Sets the list of arguments which are returned when the
-	  program calls <literal>System.getArgs</literal><indexterm><primary>getArgs</primary>
-	    </indexterm>.</para>
-	</listitem>
+        <listitem>
+          <para>Sets the list of arguments which are returned when the
+          program calls <literal>System.getArgs</literal><indexterm><primary>getArgs</primary>
+            </indexterm>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
            <literal>:set</literal> <literal>editor</literal> <replaceable>cmd</replaceable>
         </term>
-	<listitem>
-	  <para>Sets the command used by <literal>:edit</literal> to
-	  <replaceable>cmd</replaceable>.</para>
+        <listitem>
+          <para>Sets the command used by <literal>:edit</literal> to
+          <replaceable>cmd</replaceable>.</para>
         </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
            <literal>:set</literal> <literal>prog</literal> <replaceable>prog</replaceable>
            <indexterm><primary><literal>:set prog</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Sets the string to be returned when the program calls
-	  <literal>System.getProgName</literal><indexterm><primary>getProgName</primary>
-	    </indexterm>.</para>
-	</listitem>
+        <listitem>
+          <para>Sets the string to be returned when the program calls
+          <literal>System.getProgName</literal><indexterm><primary>getProgName</primary>
+            </indexterm>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
            <literal>:set</literal> <literal>prompt</literal> <replaceable>prompt</replaceable>
         </term>
-	<listitem>
-	  <para>Sets the string to be used as the prompt in GHCi.
-	  Inside <replaceable>prompt</replaceable>, the sequence
-	  <literal>%s</literal> is replaced by the names of the
-	  modules currently in scope, and <literal>%%</literal> is
-	  replaced by <literal>%</literal>. If <replaceable>prompt</replaceable>
+        <listitem>
+          <para>Sets the string to be used as the prompt in GHCi.
+          Inside <replaceable>prompt</replaceable>, the sequence
+          <literal>%s</literal> is replaced by the names of the
+          modules currently in scope, <literal>%l</literal> is replaced
+          by the line number (as referenced in compiler messages) of the
+          current prompt, and <literal>%%</literal> is replaced by
+          <literal>%</literal>.  If <replaceable>prompt</replaceable>
       starts with &quot; then it is parsed as a Haskell String;
       otherwise it is treated as a literal string.</para>
         </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
+           <literal>:set</literal> <literal>prompt2</literal> <replaceable>prompt</replaceable>
+        </term>
+        <listitem>
+          <para>Sets the string to be used as the continuation prompt
+      (used when using the <literal>:{</literal> command) in GHCi.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
            <literal>:set</literal> <literal>stop</literal>
           [<replaceable>num</replaceable>] <replaceable>cmd</replaceable>
         </term>
-	<listitem>
-	  <para>Set a command to be executed when a breakpoint is hit, or a new
+        <listitem>
+          <para>Set a command to be executed when a breakpoint is hit, or a new
           item in the history is selected.  The most common use of
             <literal>:set stop</literal> is to display the source code at the
             current location, e.g. <literal>:set stop :list</literal>.</para>
@@ -2699,15 +2913,15 @@
 </screen>
           <para>Ignoring breakpoints for a specified number of iterations is
             also possible using similar techniques.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:seti</literal> <optional><replaceable>option</replaceable>...</optional>
           <indexterm><primary><literal>:seti</literal></primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
           <para>
             Like <literal>:set</literal>, but options set with
             <literal>:seti</literal> affect only expressions and
@@ -2725,176 +2939,228 @@
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show bindings</literal>
           <indexterm><primary><literal>:show bindings</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Show the bindings made at the prompt and their
-	  types.</para>
-	</listitem>
+        <listitem>
+          <para>Show the bindings made at the prompt and their
+          types.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show breaks</literal>
           <indexterm><primary><literal>:show breaks</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>List the active breakpoints.</para>
-	</listitem>
+        <listitem>
+          <para>List the active breakpoints.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show context</literal>
           <indexterm><primary><literal>:show context</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>List the active evaluations that are stopped at breakpoints.</para>
-	</listitem>
+        <listitem>
+          <para>List the active evaluations that are stopped at breakpoints.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show imports</literal>
           <indexterm><primary><literal>:show imports</literal></primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
           <para>Show the imports that are currently in force, as
           created by <literal>import</literal> and
           <literal>:module</literal> commands.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show modules</literal>
           <indexterm><primary><literal>:show modules</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Show the list of modules currently loaded.</para>
-	</listitem>
+        <listitem>
+          <para>Show the list of modules currently loaded.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show packages</literal>
           <indexterm><primary><literal>:show packages</literal></primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
     <para>Show the currently active package flags, as well as the list of
       packages currently loaded.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-          <literal>:show languages</literal>
-          <indexterm><primary><literal>:show languages</literal></primary></indexterm>
+        <term>
+          <literal>:show paths</literal>
+          <indexterm><primary><literal>:show paths</literal></primary></indexterm>
         </term>
-	<listitem>
-    <para>Show the currently active language flags.</para>
-	</listitem>
+        <listitem>
+          <para>Show the current working directory (as set via
+          <literal>:cd</literal> command), as well as the list of
+          directories searched for source files (as set by the
+          <option>-i</option> option).</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <literal>:show language</literal>
+          <indexterm><primary><literal>:show language</literal></primary></indexterm>
+        </term>
+        <listitem>
+    <para>Show the currently active language flags for source files.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <literal>:showi language</literal>
+          <indexterm><primary><literal>:showi language</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Show the currently active language flags for
+          expressions typed at the prompt (see also <literal>:seti</literal>).</para>
+        </listitem>
       </varlistentry>
 
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:show [args|prog|prompt|editor|stop]</literal>
           <indexterm><primary><literal>:show</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Displays the specified setting (see
+        <listitem>
+          <para>Displays the specified setting (see
             <literal>:set</literal>).</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:sprint</literal>
           <indexterm><primary><literal>:sprint</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Prints a value without forcing its evaluation.
+        <listitem>
+          <para>Prints a value without forcing its evaluation.
             <literal>:sprint</literal> is similar to <literal>:print</literal>,
             with the difference that unevaluated subterms are not bound to new
             variables, they are simply denoted by &lsquo;_&rsquo;.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-          <literal>:step [<replaceable>expr</replaceable>]</literal>
+        <term>
+          <literal>:step</literal> <optional><replaceable>expr</replaceable></optional>
           <indexterm><primary><literal>:step</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Single-step from the last breakpoint.  With an expression
-            argument, begins evaluation of the expression with a
-            single-step.</para>
-	</listitem>
+        <listitem>
+          <para>Enable all breakpoints and begin evaluating an
+          expression in single-stepping mode. In this
+          mode evaluation will be stopped after every reduction,
+          allowing local variables to be inspected.
+
+          If <replaceable>expr</replaceable> is not given, evaluation will
+          resume at the last breakpoint.
+
+          See <xref linkend="single-stepping" />.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-          <literal>:trace [<replaceable>expr</replaceable>]</literal>
+        <term>
+          <literal>:steplocal</literal>
+          <indexterm><primary><literal>:steplocal</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Enable only breakpoints in the current top-level
+          binding and resume evaluation at the last breakpoint.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <literal>:stepmodule</literal>
+          <indexterm><primary><literal>:stepmodule</literal></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Enable only breakpoints in the current module and
+          resume evaluation at the last breakpoint.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <literal>:trace <optional><replaceable>expr</replaceable></optional></literal>
           <indexterm><primary><literal>:trace</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Evaluates the given expression (or from the last breakpoint if
+        <listitem>
+          <para>Evaluates the given expression (or from the last breakpoint if
             no expression is given), and additionally logs the evaluation
             steps for later inspection using <literal>:history</literal>.  See
             <xref linkend="tracing" />.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
          <literal>:type</literal> <replaceable>expression</replaceable>
          <indexterm><primary><literal>:type</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Infers and prints the type of
-	  <replaceable>expression</replaceable>, including explicit
-	  forall quantifiers for polymorphic types.  The monomorphism
-	  restriction is <emphasis>not</emphasis> applied to the
-	  expression during type inference.</para>
-	</listitem>
+        <listitem>
+          <para>Infers and prints the type of
+          <replaceable>expression</replaceable>, including explicit
+          forall quantifiers for polymorphic types.  The monomorphism
+          restriction is <emphasis>not</emphasis> applied to the
+          expression during type inference.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:undef</literal> <replaceable>name</replaceable>
           <indexterm><primary><literal>:undef</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Undefines the user-defined command
-	  <replaceable>name</replaceable> (see <literal>:def</literal>
-	  above).</para>
-	</listitem>
+        <listitem>
+          <para>Undefines the user-defined command
+          <replaceable>name</replaceable> (see <literal>:def</literal>
+          above).</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:unset</literal> <replaceable>option</replaceable>...
           <indexterm><primary><literal>:unset</literal></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Unsets certain options.  See <xref linkend="ghci-set"/>
-	  for a list of available options.</para>
-	</listitem>
+        <listitem>
+          <para>Unsets certain options.  See <xref linkend="ghci-set"/>
+          for a list of available options.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>:!</literal> <replaceable>command</replaceable>...
           <indexterm><primary><literal>:!</literal></primary></indexterm>
           <indexterm><primary>shell commands</primary><secondary>in GHCi</secondary></indexterm>
         </term>
-	<listitem>
-	  <para>Executes the shell command
-	  <replaceable>command</replaceable>.</para>
-	</listitem>
+        <listitem>
+          <para>Executes the shell command
+          <replaceable>command</replaceable>.</para>
+        </listitem>
       </varlistentry>
 
     </variablelist>
@@ -2927,68 +3193,68 @@
       <para>The available GHCi options are:</para>
 
       <variablelist>
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <literal>+m</literal>
             <indexterm><primary><literal>+m</literal></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Enable parsing of multiline commands.  A multiline command
-	    is prompted for when the current input line contains open layout
+          <listitem>
+            <para>Enable parsing of multiline commands.  A multiline command
+            is prompted for when the current input line contains open layout
             contexts (see <xref linkend="ghci-multiline" />).</para>
-	  </listitem>
-	</varlistentry>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <literal>+r</literal>
             <indexterm><primary><literal>+r</literal></primary></indexterm>
             <indexterm><primary>CAFs</primary><secondary>in GHCi</secondary></indexterm>
             <indexterm><primary>Constant Applicative Form</primary><see>CAFs</see></indexterm>
           </term>
-	  <listitem>
-	    <para>Normally, any evaluation of top-level expressions
-	    (otherwise known as CAFs or Constant Applicative Forms) in
-	    loaded modules is retained between evaluations.  Turning
-	    on <literal>+r</literal> causes all evaluation of
-	    top-level expressions to be discarded after each
-	    evaluation (they are still retained
-	    <emphasis>during</emphasis> a single evaluation).</para>
+          <listitem>
+            <para>Normally, any evaluation of top-level expressions
+            (otherwise known as CAFs or Constant Applicative Forms) in
+            loaded modules is retained between evaluations.  Turning
+            on <literal>+r</literal> causes all evaluation of
+            top-level expressions to be discarded after each
+            evaluation (they are still retained
+            <emphasis>during</emphasis> a single evaluation).</para>
 
-	    <para>This option may help if the evaluated top-level
-	    expressions are consuming large amounts of space, or if
-	    you need repeatable performance measurements.</para>
-	  </listitem>
-	</varlistentry>
+            <para>This option may help if the evaluated top-level
+            expressions are consuming large amounts of space, or if
+            you need repeatable performance measurements.</para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <literal>+s</literal>
             <indexterm><primary><literal>+s</literal></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Display some stats after evaluating each expression,
-	    including the elapsed time and number of bytes allocated.
-	    NOTE: the allocation figure is only accurate to the size
-	    of the storage manager's allocation area, because it is
-	    calculated at every GC.  Hence, you might see values of
-	    zero if no GC has occurred.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Display some stats after evaluating each expression,
+            including the elapsed time and number of bytes allocated.
+            NOTE: the allocation figure is only accurate to the size
+            of the storage manager's allocation area, because it is
+            calculated at every GC.  Hence, you might see values of
+            zero if no GC has occurred.</para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <literal>+t</literal>
             <indexterm><primary><literal>+t</literal></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Display the type of each variable bound after a
-	    statement is entered at the prompt.  If the statement is a
-	    single expression, then the only variable binding will be
-	    for the variable
-	    &lsquo;<literal>it</literal>&rsquo;.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Display the type of each variable bound after a
+            statement is entered at the prompt.  If the statement is a
+            single expression, then the only variable binding will be
+            for the variable
+            &lsquo;<literal>it</literal>&rsquo;.</para>
+          </listitem>
+        </varlistentry>
       </variablelist>
     </sect2>
 
@@ -3047,6 +3313,7 @@
 Prelude> :seti
 base language is: Haskell2010
 with the following modifiers:
+  -XNoMonomorphismRestriction
   -XNoDatatypeContexts
   -XNondecreasingIndentation
   -XExtendedDefaultRules
@@ -3055,7 +3322,6 @@
   -fimplicit-import-qualified
 warning settings:
 </screen>
-
       <para>
         Note that the option <option>-XExtendedDefaultRules</option>
         is on, because we apply special defaulting rules to
@@ -3064,18 +3330,21 @@
       </para>
 
       <para>
-        It is often useful to change the language options for
-        expressions typed at the prompt only, without having that
-        option apply to loaded modules too.  A good example is
+        Furthermore, the Monomorphism Restriction is disabled by default in
+        GHCi (see <xref linkend="monomorphism" />).
+      </para>
+
+      <para>
+        It is often useful to change the language options for expressions typed
+        at the prompt only, without having that option apply to loaded modules
+        too.  For example
 <screen>
-:seti -XNoMonomorphismRestriction
+:seti -XMonoLocalBinds
 </screen>
-        It would be undesirable if
-        <option>-XNoMonomorphismRestriction</option> were to apply to
-        loaded modules too: that might cause a compilation error, but
-        more commonly it will cause extra recompilation, because GHC
-        will think that it needs to recompile the module because the
-        flags have changed.
+        It would be undesirable if <option>-XMonoLocalBinds</option> were to
+        apply to loaded modules too: that might cause a compilation error, but
+        more commonly it will cause extra recompilation, because GHC will think
+        that it needs to recompile the module because the flags have changed.
       </para>
 
       <para>
@@ -3128,7 +3397,7 @@
     Placing a <filename>.ghci</filename> file
     in a directory with a Haskell project is a useful way to set
     certain project-wide options so you don't have to type them
-    every time you start GHCi: eg. if your project uses multi-parameter 
+    every time you start GHCi: eg. if your project uses multi-parameter
     type classes, scoped type variables,
     and CPP, and has source files in three subdirectories A, B and C,
     you might put the following lines in
@@ -3160,7 +3429,7 @@
     wiki page: <ulink
       url="http://haskell.org/haskellwiki/GHC/GHCi">GHC/GHCi</ulink></para>
 
-	<para>Additionally, any files specified with
+        <para>Additionally, any files specified with
     <literal>-ghci-script</literal> flags will be read after the
     standard files, allowing the use of custom .ghci files.</para>
 
@@ -3169,27 +3438,82 @@
 
     <variablelist>
       <varlistentry>
-	<term>
+        <term>
           <option>-ignore-dot-ghci</option>
           <indexterm><primary><option>-ignore-dot-ghci</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Don't read either <filename>./.ghci</filename> or the
+        <listitem>
+          <para>Don't read either <filename>./.ghci</filename> or the
           other startup files when starting up.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
       <varlistentry>
-	<term>
+        <term>
          <option>-ghci-script</option>
          <indexterm><primary><option>-ghci-script</option></primary></indexterm>
     </term>
-	<listitem>
-	  <para>Read a specific file after the usual startup files.
-	  Maybe be specified repeatedly for multiple inputs.</para>
-	</listitem>
+        <listitem>
+          <para>Read a specific file after the usual startup files.
+          Maybe be specified repeatedly for multiple inputs.</para>
+        </listitem>
       </varlistentry>
     </variablelist>
 
+    <para>
+      When defining GHCi macros, there is some important behavior you
+      should be aware of when names may conflict with built-in
+      commands, especially regarding tab completion.
+    </para>
+    <para>
+      For example, consider if you had a macro named
+      <literal>:time</literal> and in the shell, typed <literal>:t
+      3</literal> - what should happen? The current algorithm we use
+      for completing commands is:
+
+      <orderedlist>
+        <listitem>
+          <para>First, look up an exact match on the name from the defined macros.</para>
+        </listitem>
+        <listitem>
+          <para>Look for the exact match on the name in the built-in command list.</para>
+        </listitem>
+        <listitem>
+          <para>Do a prefix lookup on the list of built-in commands -
+          if a built-in command matches, but a macro is defined with
+          the same name as the built-in defined, pick the
+          macro.</para>
+        </listitem>
+        <listitem>
+          <para>Do a prefix lookup on the list of built-in commands.</para>
+        </listitem>
+        <listitem>
+          <para>Do a prefix lookup on the list of defined macros.</para>
+        </listitem>
+      </orderedlist>
+    </para>
+
+    <para>
+      Here are some examples:
+
+      <orderedlist>
+        <listitem>
+          <para>You have a macro <literal>:time</literal> and enter <literal>:t 3</literal></para>
+          <para>You get <literal>:type 3</literal></para>
+        </listitem>
+
+        <listitem>
+          <para>You have a macro <literal>:type</literal> and enter <literal>:t 3</literal></para>
+          <para>You get <literal>:type 3</literal> with your defined macro, not the builtin.</para>
+        </listitem>
+
+        <listitem>
+          <para>You have a macro <literal>:time</literal> and a macro
+          <literal>:type</literal>, and enter <literal>:t
+          3</literal></para>
+          <para>You get <literal>:type 3</literal> with your defined macro.</para>
+        </listitem>
+      </orderedlist>
+    </para>
   </sect1>
 
   <sect1 id="ghci-obj">
@@ -3223,77 +3547,77 @@
 
     <variablelist>
       <varlistentry>
-	<term>The interpreter can't load modules with foreign export
-	declarations!</term>
-	<listitem>
-	  <para>Unfortunately not.  We haven't implemented it yet.
-	  Please compile any offending modules by hand before loading
-	  them into GHCi.</para>
-	</listitem>
+        <term>The interpreter can't load modules with foreign export
+        declarations!</term>
+        <listitem>
+          <para>Unfortunately not.  We haven't implemented it yet.
+          Please compile any offending modules by hand before loading
+          them into GHCi.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <literal>-O</literal> doesn't work with GHCi!
           <indexterm><primary><option>-O</option></primary></indexterm>
          </term>
-	<listitem>
-	  <para>For technical reasons, the bytecode compiler doesn't
-	  interact well with one of the optimisation passes, so we
-	  have disabled optimisation when using the interpreter.  This
-	  isn't a great loss: you'll get a much bigger win by
-	  compiling the bits of your code that need to go fast, rather
-	  than interpreting them with optimisation turned on.</para>
-	</listitem>
+        <listitem>
+          <para>For technical reasons, the bytecode compiler doesn't
+          interact well with one of the optimisation passes, so we
+          have disabled optimisation when using the interpreter.  This
+          isn't a great loss: you'll get a much bigger win by
+          compiling the bits of your code that need to go fast, rather
+          than interpreting them with optimisation turned on.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>Unboxed tuples don't work with GHCi</term>
-	<listitem>
-	  <para>That's right.  You can always compile a module that
-	  uses unboxed tuples and load it into GHCi, however.
-	  (Incidentally the previous point, namely that
-	  <literal>-O</literal> is incompatible with GHCi, is because
-	  the bytecode compiler can't deal with unboxed
-	  tuples).</para>
-	</listitem>
+        <term>Unboxed tuples don't work with GHCi</term>
+        <listitem>
+          <para>That's right.  You can always compile a module that
+          uses unboxed tuples and load it into GHCi, however.
+          (Incidentally the previous point, namely that
+          <literal>-O</literal> is incompatible with GHCi, is because
+          the bytecode compiler can't deal with unboxed
+          tuples).</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>Concurrent threads don't carry on running when GHCi is
+        <term>Concurrent threads don't carry on running when GHCi is
         waiting for input.</term>
-	<listitem>
-	  <para>This should work, as long as your GHCi was built with
-	  the <option>-threaded</option> switch, which is the default.
-	  Consult whoever supplied your GHCi installation.</para>
-	</listitem>
+        <listitem>
+          <para>This should work, as long as your GHCi was built with
+          the <option>-threaded</option> switch, which is the default.
+          Consult whoever supplied your GHCi installation.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>After using <literal>getContents</literal>, I can't use
-	<literal>stdin</literal> again until I do
-	<literal>:load</literal> or <literal>:reload</literal>.</term>
+        <term>After using <literal>getContents</literal>, I can't use
+        <literal>stdin</literal> again until I do
+        <literal>:load</literal> or <literal>:reload</literal>.</term>
 
-	<listitem>
-	  <para>This is the defined behaviour of
-	  <literal>getContents</literal>: it puts the stdin Handle in
-	  a state known as <firstterm>semi-closed</firstterm>, wherein
-	  any further I/O operations on it are forbidden.  Because I/O
-	  state is retained between computations, the semi-closed
-	  state persists until the next <literal>:load</literal> or
-	  <literal>:reload</literal> command.</para>
+        <listitem>
+          <para>This is the defined behaviour of
+          <literal>getContents</literal>: it puts the stdin Handle in
+          a state known as <firstterm>semi-closed</firstterm>, wherein
+          any further I/O operations on it are forbidden.  Because I/O
+          state is retained between computations, the semi-closed
+          state persists until the next <literal>:load</literal> or
+          <literal>:reload</literal> command.</para>
 
-	  <para>You can make <literal>stdin</literal> reset itself
-	  after every evaluation by giving GHCi the command
-	  <literal>:set +r</literal>.  This works because
-	  <literal>stdin</literal> is just a top-level expression that
-	  can be reverted to its unevaluated state in the same way as
-	  any other top-level expression (CAF).</para>
-	</listitem>
+          <para>You can make <literal>stdin</literal> reset itself
+          after every evaluation by giving GHCi the command
+          <literal>:set +r</literal>.  This works because
+          <literal>stdin</literal> is just a top-level expression that
+          can be reverted to its unevaluated state in the same way as
+          any other top-level expression (CAF).</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>I can't use Control-C to interrupt computations in
+        <term>I can't use Control-C to interrupt computations in
           GHCi on Windows.</term>
         <listitem>
           <para>See <xref linkend="ghci-windows"/>.</para>
@@ -3301,7 +3625,7 @@
       </varlistentry>
 
       <varlistentry>
-	<term>The default buffering mode is different in GHCi to GHC.</term>
+        <term>The default buffering mode is different in GHCi to GHC.</term>
         <listitem>
           <para>
             In GHC, the stdout handle is line-buffered by default.
diff -urd 7.6.3-original/glasgow_exts.xml original/glasgow_exts.xml
--- 7.6.3-original/glasgow_exts.xml	2014-06-27 09:19:06.039242255 +0900
+++ original/glasgow_exts.xml	2014-04-08 03:26:08.000000000 +0900
@@ -225,6 +225,14 @@
 </para>
 
 <para>
+Note that when unboxed tuples are enabled,
+<literal>(#</literal> is a single lexeme, so for example when using
+operators like <literal>#</literal> and <literal>#-</literal> you need
+to write <literal>( # )</literal> and <literal>( #- )</literal> rather than
+<literal>(#)</literal> and <literal>(#-)</literal>.
+</para>
+
+<para>
 Unboxed tuples are used for functions that need to return multiple
 values, but they avoid the heap allocation normally associated with
 using fully-fledged tuples.  When an unboxed tuple is returned, the
@@ -264,7 +272,7 @@
 the resulting binding is lazy like any other Haskell pattern binding.  The
 above example desugars like this:
 <programlisting>
-  f x = let t = case h x o f{ (# p,q #) -> (p,q)
+  f x = let t = case h x of { (# p,q #) -> (p,q) }
             p = fst t
             q = snd t
         in ..body..
@@ -415,14 +423,18 @@
 	import <literal>GHC.Prim</literal> (see <xref linkend="primitives"/>);
 	the <option>-XMagicHash</option> extension
 	then allows you to <emphasis>refer</emphasis> to the <literal>Int&num;</literal>
-	that is now in scope.</para>
+	that is now in scope. Note that with this option, the meaning of <literal>x&num;y = 0</literal>
+	is changed: it defines a function <literal>x&num;</literal> taking a single argument <literal>y</literal>;
+        to define the operator <literal>&num;</literal>, put a space: <literal>x &num; y = 0</literal>.
+
+</para>
       <para> The <option>-XMagicHash</option> also enables some new forms of literals (see <xref linkend="glasgow-unboxed"/>):
 	<itemizedlist>
 	  <listitem><para> <literal>'x'&num;</literal> has type <literal>Char&num;</literal></para> </listitem>
 	  <listitem><para> <literal>&quot;foo&quot;&num;</literal> has type <literal>Addr&num;</literal></para> </listitem>
 	  <listitem><para> <literal>3&num;</literal> has type <literal>Int&num;</literal>. In general,
 	  any Haskell integer lexeme followed by a <literal>&num;</literal> is an <literal>Int&num;</literal> literal, e.g.
-            <literal>-0x3A&num;</literal> as well as <literal>32&num;</literal></para>.</listitem>
+            <literal>-0x3A&num;</literal> as well as <literal>32&num;</literal>.</para></listitem>
 	  <listitem><para> <literal>3&num;&num;</literal> has type <literal>Word&num;</literal>. In general,
 	  any non-negative Haskell integer lexeme followed by <literal>&num;&num;</literal>
 	      is a <literal>Word&num;</literal>. </para> </listitem>
@@ -432,6 +444,43 @@
       </para>
    </sect2>
 
+    <sect2 id="negative-literals">
+      <title>Negative literals</title>
+      <para>
+          The literal <literal>-123</literal> is, according to
+          Haskell98 and Haskell 2010, desugared as
+          <literal>negate (fromInteger 123)</literal>.
+         The language extension <option>-XNegativeLiterals</option>
+         means that it is instead desugared as
+         <literal>fromInteger (-123)</literal>.
+      </para>
+
+      <para>
+      This can make a difference when the positive and negative range of 
+      a numeric data type don't match up.  For example, 
+      in 8-bit arithmetic -128 is representable, but +128 is not.
+      So <literal>negate (fromInteger 128)</literal> will elicit an 
+      unexpected integer-literal-overflow message.
+      </para>
+   </sect2>
+
+    <sect2 id="num-decimals">
+      <title>Fractional looking integer literals</title>
+      <para>
+          Haskell 2010 and Haskell 98 define floating literals with
+          the syntax <literal>1.2e6</literal>. These literals have the
+          type <literal>Fractional a => a</literal>.
+      </para>
+
+      <para>
+         The language extension <option>-XNumDecimals</option> allows
+         you to also use the floating literal syntax for instances of
+         <literal>Integral</literal>, and have values like
+         <literal>(1.2e6 :: Num a => a)</literal>
+      </para>
+   </sect2>
+
+
     <!-- ====================== HIERARCHICAL MODULES =======================  -->
 
 
@@ -615,7 +664,7 @@
 <para>
 View patterns are enabled by the flag <literal>-XViewPatterns</literal>.
 More information and examples of view patterns can be found on the
-<ulink url="http://hackage.haskell.org/trac/ghc/wiki/ViewPatterns">Wiki
+<ulink url="http://ghc.haskell.org/trac/ghc/wiki/ViewPatterns">Wiki
 page</ulink>.
 </para>
 
@@ -733,7 +782,7 @@
 </programlisting>
 
 (For some amplification on this design choice see
-<ulink url="http://hackage.haskell.org/trac/ghc/ticket/4061">Trac #4061</ulink>.)
+<ulink url="http://ghc.haskell.org/trac/ghc/ticket/4061">Trac #4061</ulink>.)
 
 </para>
 </listitem>
@@ -800,6 +849,299 @@
 
 </sect2>
 
+    <!-- ===================== Pattern synonyms ===================  -->
+
+<sect2 id="pattern-synonyms">
+<title>Pattern synonyms
+</title>
+
+<para>
+Pattern synonyms are enabled by the flag
+<literal>-XPatternSynonyms</literal>, which is required for both
+defining them <emphasis>and</emphasis> using them.  More information
+and examples of view patterns can be found on the <ulink
+url="http://ghc.haskell.org/trac/ghc/wiki/PatternSynonyms">Wiki
+page</ulink>.
+</para>
+
+<para>
+Pattern synonyms enable giving names to parametrized pattern
+schemes. They can also be thought of as abstract constructors that
+don't have a bearing on data representation. For example, in a
+programming language implementation, we might represent types of the
+language as follows:
+</para>
+
+<programlisting>
+data Type = App String [Type]
+</programlisting>
+
+<para>
+Here are some examples of using said representation.
+Consider a few types of the <literal>Type</literal> universe encoded
+like this:
+</para>
+
+<programlisting>
+  App "->" [t1, t2]          -- t1 -> t2
+  App "Int" []               -- Int
+  App "Maybe" [App "Int" []] -- Maybe Int
+</programlisting>
+
+<para>
+This representation is very generic in that no types are given special
+treatment. However, some functions might need to handle some known
+types specially, for example the following two functions collect all
+argument types of (nested) arrow types, and recognize the
+<literal>Int</literal> type, respectively:
+</para>
+
+<programlisting>
+  collectArgs :: Type -> [Type]
+  collectArgs (App "->" [t1, t2]) = t1 : collectArgs t2
+  collectArgs _                   = []
+
+  isInt :: Type -> Bool
+  isInt (App "Int" []) = True
+  isInt _              = False
+</programlisting>
+
+<para>
+Matching on <literal>App</literal> directly is both hard to read and
+error prone to write. And the situation is even worse when the
+matching is nested:
+</para>
+
+<programlisting>
+  isIntEndo :: Type -> Bool
+  isIntEndo (App "->" [App "Int" [], App "Int" []]) = True
+  isIntEndo _                                       = False
+</programlisting>
+
+<para>
+Pattern synonyms permit abstracting from the representation to expose
+matchers that behave in a constructor-like manner with respect to
+pattern matching. We can create pattern synonyms for the known types
+we care about, without committing the representation to them (note
+that these don't have to be defined in the same module as the
+<literal>Type</literal> type):
+</para>
+
+<programlisting>
+  pattern Arrow t1 t2 = App "->"    [t1, t2]
+  pattern Int         = App "Int"   []
+  pattern Maybe t     = App "Maybe" [t]
+</programlisting>
+
+<para>
+Which enables us to rewrite our functions in a much cleaner style:
+</para>
+
+<programlisting>
+  collectArgs :: Type -> [Type]
+  collectArgs (Arrow t1 t2) = t1 : collectArgs t2
+  collectArgs _             = []
+
+  isInt :: Type -> Bool
+  isInt Int = True
+  isInt _   = False
+
+  isIntEndo :: Type -> Bool
+  isIntEndo (Arrow Int Int) = True
+  isIntEndo _               = False
+</programlisting>
+
+<para>
+  Note that in this example, the pattern synonyms
+  <literal>Int</literal> and <literal>Arrow</literal> can also be used
+  as expressions (they are <emphasis>bidirectional</emphasis>). This
+  is not necessarily the case: <emphasis>unidirectional</emphasis>
+  pattern synonyms can also be declared with the following syntax:
+</para>
+
+<programlisting>
+  pattern Head x &lt;- x:xs
+</programlisting>
+
+<para>
+In this case, <literal>Head</literal> <replaceable>x</replaceable>
+cannot be used in expressions, only patterns, since it wouldn't
+specify a value for the <replaceable>xs</replaceable> on the
+right-hand side.
+</para>
+
+<para>
+The semantics of a unidirectional pattern synonym declaration and
+usage are as follows:
+
+<itemizedlist>
+
+<listitem> Syntax:
+<para>
+A pattern synonym declaration can be either unidirectional or
+bidirectional. The syntax for unidirectional pattern synonyms is:
+</para>
+<programlisting>
+  pattern Name args &lt;- pat
+</programlisting>
+<para>
+  and the syntax for bidirectional pattern synonyms is:
+</para>
+<programlisting>
+  pattern Name args = pat
+</programlisting>
+<para>
+  Pattern synonym declarations can only occur in the top level of a
+  module. In particular, they are not allowed as local
+  definitions. Currently, they also don't work in GHCi, but that is a
+  technical restriction that will be lifted in later versions.
+</para>
+<para>
+  The name of the pattern synonym itself is in the same namespace as
+  proper data constructors. Either prefix or infix syntax can be
+  used. In export/import specifications, you have to prefix pattern
+  names with the <literal>pattern</literal> keyword, e.g.:
+</para>
+<programlisting>
+  module Example (pattern Single) where
+  pattern Single x = [x]
+</programlisting>
+</listitem>
+
+<listitem> Scoping:
+
+<para>
+  The variables in the left-hand side of the definition are bound by
+  the pattern on the right-hand side. For bidirectional pattern
+  synonyms, all the variables of the right-hand side must also occur
+  on the left-hand side; also, wildcard patterns and view patterns are
+  not allowed. For unidirectional pattern synonyms, there is no
+  restriction on the right-hand side pattern.
+</para>
+
+<para>
+  Pattern synonyms cannot be defined recursively.
+</para>
+
+</listitem>
+
+<listitem> Typing:
+
+<para>
+  Given a pattern synonym definition of the form
+</para>
+<programlisting>
+  pattern P var1 var2 ... varN &lt;- pat
+</programlisting>
+<para>
+  it is assigned a <emphasis>pattern type</emphasis> of the form
+</para>
+<programlisting>
+  pattern CProv => P t1 t2 ... tN :: CReq => t
+</programlisting>
+<para>
+  where <replaceable>CProv</replaceable> and
+  <replaceable>CReq</replaceable> are type contexts, and
+  <replaceable>t1</replaceable>, <replaceable>t2</replaceable>, ...,
+  <replaceable>tN</replaceable> and <replaceable>t</replaceable> are
+  types.
+</para>
+
+<para>
+A pattern synonym of this type can be used in a pattern if the
+instatiated (monomorphic) type satisfies the constraints of
+<replaceable>CReq</replaceable>. In this case, it extends the context
+available in the right-hand side of the match with
+<replaceable>CProv</replaceable>, just like how an existentially-typed
+data constructor can extend the context.
+</para>
+
+<para>
+For example, in the following program:
+</para>
+<programlisting>
+{-# LANGUAGE PatternSynonyms, GADTs #-}
+module ShouldCompile where
+
+data T a where
+	MkT :: (Show b) => a -> b -> T a
+
+pattern ExNumPat x = MkT 42 x
+</programlisting>
+
+<para>
+the pattern type of <literal>ExNumPat</literal> is
+</para>
+
+<programlisting>
+pattern (Show b) => ExNumPat b :: (Num a, Eq a) => T a
+</programlisting>
+
+<para>
+  and so can be used in a function definition like the following:
+</para>
+
+<programlisting>
+  f :: (Num t, Eq t) => T t -> String
+  f (ExNumPat x) = show x
+</programlisting>
+
+<para>
+  For bidirectional pattern synonyms, uses as expressions have the type
+</para>
+<programlisting>
+  (CProv, CReq) => t1 -> t2 -> ... -> tN -> t
+</programlisting>
+
+<para>
+  So in the previous example, <literal>ExNumPat</literal>,
+  when used in an expression, has type
+</para>
+<programlisting>
+  ExNumPat :: (Show b, Num a, Eq a) => b -> T t
+</programlisting>
+
+</listitem>
+
+<listitem> Matching:
+
+<para>
+A pattern synonym occurrence in a pattern is evaluated by first
+matching against the pattern synonym itself, and then on the argument
+patterns. For example, in the following program, <literal>f</literal>
+and <literal>f'</literal> are equivalent:
+</para>
+
+<programlisting>
+pattern Pair x y &lt;- [x, y]
+
+f (Pair True True) = True
+f _                = False
+
+f' [x, y] | True &lt;- x, True &lt;- y = True
+f' _                                   = False
+</programlisting>
+
+<para>
+  Note that the strictness of <literal>f</literal> differs from that
+  of <literal>g</literal> defined below:
+</para>
+
+<programlisting>
+g [True, True] = True
+g _            = False
+
+*Main> f (False:undefined)
+*** Exception: Prelude.undefined
+*Main> g (False:undefined)
+False
+</programlisting>
+</listitem>
+</itemizedlist>
+</para>
+
+</sect2>
+
     <!-- ===================== n+k patterns ===================  -->
 
 <sect2 id="n-k-patterns">
@@ -836,10 +1178,10 @@
     The do-notation of Haskell 98 does not allow <emphasis>recursive bindings</emphasis>,
     that is, the variables bound in a do-expression are visible only in the textually following
     code block. Compare this to a let-expression, where bound variables are visible in the entire binding
-    group. 
-</para> 
+    group.
+</para>
 
-<para> 
+<para>
     It turns out that such recursive bindings do indeed make sense for a variety of monads, but
     not all. In particular, recursion in this sense requires a fixed-point operator for the underlying
     monad, captured by the <literal>mfix</literal> method of the <literal>MonadFix</literal> class, defined in <literal>Control.Monad.Fix</literal> as follows:
@@ -880,7 +1222,7 @@
 As you can guess <literal>justOnes</literal> will evaluate to <literal>Just [-1,-1,-1,...</literal>.
 </para>
 
-<para> 
+<para>
    GHC's implementation the mdo-notation closely follows the original translation as described in the paper
    <ulink url="https://sites.google.com/site/leventerkok/recdo.pdf">A recursive do for Haskell</ulink>, which
    in turn is based on the work <ulink url="http://sites.google.com/site/leventerkok/erkok-thesis.pdf">Value Recursion
@@ -914,14 +1256,14 @@
     to the underlying monadic value-recursion operator <literal>mfix</literal>, belonging to the
     <literal>MonadFix</literal> class. Here is an example:
 <programlisting>
-rec { b &lt;- f a c     ===>    (b,c) &lt;- mfix (\~(b,c) -> do { b &lt;- f a c
-    ; c &lt;- f b a }                                        ; c &lt;- f b a
-                                                          ; return (b,c) })
+rec { b &lt;- f a c     ===>    (b,c) &lt;- mfix (\ ~(b,c) -> do { b &lt;- f a c
+    ; c &lt;- f b a }                                         ; c &lt;- f b a
+                                                           ; return (b,c) })
 </programlisting>
    As usual, the meta-variables <literal>b</literal>, <literal>c</literal> etc., can be arbitrary patterns.
    In general, the statement <literal>rec <replaceable>ss</replaceable></literal> is desugared to the statement
 <programlisting>
-<replaceable>vs</replaceable> &lt;- mfix (\~<replaceable>vs</replaceable> -&gt; do { <replaceable>ss</replaceable>; return <replaceable>vs</replaceable> })
+<replaceable>vs</replaceable> &lt;- mfix (\ ~<replaceable>vs</replaceable> -&gt; do { <replaceable>ss</replaceable>; return <replaceable>vs</replaceable> })
 </programlisting>
   where <replaceable>vs</replaceable> is a tuple of the variables bound by <replaceable>ss</replaceable>.
 </para>
@@ -1666,6 +2008,44 @@
 </para>
 </sect2>
 
+<sect2 id="empty-case">
+<title>Empty case alternatives</title>
+<para>
+The <option>-XEmptyCase</option> flag enables
+case expressions, or lambda-case expressions, that have no alternatives,
+thus:
+<programlisting>
+    case e of { }   -- No alternatives
+or
+    \case { }       -- -XLambdaCase is also required
+</programlisting>
+This can be useful when you know that the expression being scrutinised
+has no non-bottom values.  For example:
+<programlisting>
+  data Void
+  f :: Void -> Int
+  f x = case x of { }
+</programlisting>
+With dependently-typed features it is more useful
+(see <ulink url="http://ghc.haskell.org/trac/ghc/ticket/2431">Trac</ulink>).
+For example, consider these two candidate definitions of <literal>absurd</literal>:
+<programlisting>
+data a :==: b where
+  Refl :: a :==: a
+
+absurd :: True :~: False -> a
+absurd x = error "absurd"    -- (A)
+absurd x = case x of {}      -- (B)
+</programlisting>
+We much prefer (B). Why? Because GHC can figure out that <literal>(True :~: False)</literal>
+is an empty type. So (B) has no partiality and GHC should be able to compile with
+<option>-fwarn-incomplete-patterns</option>.  (Though the pattern match checking is not
+yet clever enough to do that.)
+On the other hand (A) looks dangerous, and GHC doesn't check to make
+sure that, in fact, the function can never get called.
+</para>
+</sect2>
+
 <sect2 id="multi-way-if">
 <title>Multi-way if-expressions</title>
 <para>
@@ -1683,7 +2063,35 @@
     ...
     _ | guardN -> exprN
 </programlisting>
-except that multi-way if-expressions do not alter the layout.
+</para>
+
+<para>Multi-way if expressions introduce a new layout context.  So the
+example above is equivalent to:
+<programlisting>
+  if { | guard1 -> expr1
+     ; | ...
+     ; | guardN -> exprN
+     }
+</programlisting>
+The following behaves as expected:
+<programlisting>
+  if | guard1 -> if | guard2 -> expr2
+                    | guard3 -> expr3
+     | guard4 -> expr4
+</programlisting>
+because layout translates it as
+<programlisting>
+  if { | guard1 -> if { | guard2 -> expr2
+                      ; | guard3 -> expr3
+                      }
+     ; | guard4 -> expr4
+     }
+</programlisting>
+Layout with multi-way if works in the same way as other layout
+contexts, except that the semi-colons between guards in a multi-way if
+are optional.  So it is not necessary to line up all the guards at the
+same column; this is consistent with the way guards work in function
+definitions and case expressions.
 </para>
 </sect2>
 
@@ -2029,6 +2437,36 @@
 
 </sect2>
 
+<sect2 id="explicit-namespaces">
+<title>Explicit namespaces in import/export</title>
+
+<para> In an import or export list, such as 
+<programlisting>
+  module M( f, (++) ) where ...
+    import N( f, (++) ) 
+    ...
+</programlisting>
+the entities <literal>f</literal> and <literal>(++)</literal> are <emphasis>values</emphasis>.
+However, with type operators (<xref linkend="type-operators"/>) it becomes possible
+to declare <literal>(++)</literal> as a <emphasis>type constructor</emphasis>.  In that
+case, how would you export or import it?
+</para>
+<para>
+The <option>-XExplicitNamespaces</option> extension allows you to prefix the name of 
+a type constructor in an import or export list with "<literal>type</literal>" to 
+disambiguate this case, thus:
+<programlisting>
+  module M( f, type (++) ) where ...
+    import N( f, type (++) ) 
+    ...
+  module N( f, type (++) ) where
+    data family a ++ b = L a | R b
+</programlisting>
+The extension <option>-XExplicitNamespaces</option>
+is implied by <option>-XTypeOperators</option> and (for some reason) by <option>-XTypeFamilies</option>.
+</para>
+</sect2>
+
 <sect2 id="syntax-stolen">
 <title>Summary of stolen syntax</title>
 
@@ -2074,9 +2512,7 @@
 	Stolen (in types) by: <option>-XExplicitForAll</option>, and hence by
             <option>-XScopedTypeVariables</option>,
 	    <option>-XLiberalTypeSynonyms</option>,
-	    <option>-XRank2Types</option>,
 	    <option>-XRankNTypes</option>,
-	    <option>-XPolymorphicComponents</option>,
 	    <option>-XExistentialQuantification</option>
 	  </para></listitem>
       </varlistentry>
@@ -2117,8 +2553,7 @@
 
       <varlistentry>
 	<term>
-	  <literal>?<replaceable>varid</replaceable></literal>,
-	  <literal>%<replaceable>varid</replaceable></literal>
+	  <literal>?<replaceable>varid</replaceable></literal>
           <indexterm><primary>implicit parameters</primary></indexterm>
 	</term>
 	<listitem><para>
@@ -2132,7 +2567,11 @@
 	  <literal>[e|</literal>, <literal>[p|</literal>,
 	  <literal>[d|</literal>, <literal>[t|</literal>,
 	  <literal>$(</literal>,
-	  <literal>$<replaceable>varid</replaceable></literal>
+	  <literal>$$(</literal>,
+	  <literal>[||</literal>,
+	  <literal>[e||</literal>,
+	  <literal>$<replaceable>varid</replaceable></literal>,
+	  <literal>$$<replaceable>varid</replaceable></literal>
           <indexterm><primary>Template Haskell</primary></indexterm>
 	</term>
 	<listitem><para>
@@ -2142,7 +2581,7 @@
 
       <varlistentry>
 	<term>
-	  <literal>[:<replaceable>varid</replaceable>|</literal>
+	  <literal>[<replaceable>varid</replaceable>|</literal>
           <indexterm><primary>quasi-quotation</primary></indexterm>
 	</term>
 	<listitem><para>
@@ -2157,13 +2596,39 @@
 	      <replaceable>string</replaceable><literal>&num;</literal>,
 	      <replaceable>integer</replaceable><literal>&num;</literal>,
 	      <replaceable>float</replaceable><literal>&num;</literal>,
-	      <replaceable>float</replaceable><literal>&num;&num;</literal>,
-	      <literal>(&num;</literal>, <literal>&num;)</literal>
+	      <replaceable>float</replaceable><literal>&num;&num;</literal>
 	</term>
 	<listitem><para>
 	Stolen by: <option>-XMagicHash</option>
 	  </para></listitem>
       </varlistentry>
+
+      <varlistentry>
+	<term>
+	      <literal>(&num;</literal>, <literal>&num;)</literal>
+	</term>
+	<listitem><para>
+	Stolen by: <option>-XUnboxedTuples</option>
+	  </para></listitem>
+      </varlistentry>
+
+      <varlistentry>
+	<term>
+	      <replaceable>varid</replaceable><literal>!</literal><replaceable>varid</replaceable>
+	</term>
+	<listitem><para>
+	Stolen by: <option>-XBangPatterns</option>
+	  </para></listitem>
+      </varlistentry>
+
+      <varlistentry>
+	<term>
+	  <literal>pattern</literal>
+	</term>
+	<listitem><para>
+	Stolen by: <option>-XPatternSynonyms</option>
+	  </para></listitem>
+      </varlistentry>
     </variablelist>
 </para>
 </sect2>
@@ -2240,25 +2705,10 @@
   </para></listitem>
 <listitem><para>
   Types, and class constraints, can be written infix.  For example
-  <screen>
-	x :: Int :*: Bool
-        f :: (a :=: b) => a -> b
-  </screen>
-  </para></listitem>
-<listitem><para>
-  A type variable can be an (unqualified) operator e.g. <literal>+</literal>.
-  The lexical syntax is the same as that for variable operators, excluding "(.)",
-  "(!)", and "(*)".  In a binding position, the operator must be
-  parenthesised.  For example:
-<programlisting>
-   type T (+) = Int + Int
-   f :: T Either
-   f = Left 3
-
-   liftA2 :: Arrow (~>)
-	  => (a -> b -> c) -> (e ~> a) -> (e ~> b) -> (e ~> c)
-   liftA2 = ...
-</programlisting>
+<screen>
+  x :: Int :*: Bool
+  f :: (a :=: b) => a -> b
+</screen>
   </para></listitem>
 <listitem><para>
   Back-quotes work
@@ -2284,6 +2734,58 @@
 </para>
 </sect2>
 
+<sect2 id="type-operators">
+<title>Type operators</title>
+<para>
+In types, an operator symbol like <literal>(+)</literal> is normally treated as a type
+<emphasis>variable</emphasis>, just like <literal>a</literal>.  Thus in Haskell 98 you can say
+<programlisting>
+type T (+) = ((+), (+))
+-- Just like: type T a = (a,a)
+
+f :: T Int -> Int
+f (x,y)= x
+</programlisting>
+As you can see, using operators in this way is not very useful, and Haskell 98 does not even
+allow you to write them infix.
+</para>
+<para>
+The language <option>-XTypeOperators</option> changes this behaviour:
+<itemizedlist>
+<listitem><para>
+Operator symbols become type <emphasis>constructors</emphasis> rather than 
+type <emphasis>variables</emphasis>.
+</para></listitem>
+<listitem><para>
+Operator symbols in types can be written infix, both in definitions and uses. 
+for example:
+<programlisting>
+data a + b = Plus a b
+type Foo = Int + Bool
+</programlisting>
+</para></listitem>
+<listitem><para>
+There is now some potential ambiguity in import and export lists; for example
+if you write <literal>import M( (+) )</literal> do you mean the 
+<emphasis>function</emphasis> <literal>(+)</literal> or the 
+<emphasis>type constructor</emphasis> <literal>(+)</literal>?
+The default is the former, but with <option>-XExplicitNamespaces</option> (which is implied
+by <option>-XExplicitTypeOperators</option>) GHC allows you to specify the latter
+by preceding it with the keyword <literal>type</literal>, thus:
+<programlisting>
+import M( type (+) )
+</programlisting>
+See <xref linkend="explicit-namespaces"/>.
+</para></listitem>
+<listitem><para>
+The fixity of a type operator may be set using the usual fixity declarations
+but, as in <xref linkend="infix-tycons"/>, the function and type constructor share
+a single fixity.
+</para></listitem>
+</itemizedlist>
+</para>
+</sect2>
+
 <sect2 id="type-synonyms">
 <title>Liberalised type synonyms</title>
 
@@ -2359,24 +2861,21 @@
 the following mal-formedness which isn't detected simply by kind checking:
 <itemizedlist>
 <listitem><para>
-Type constructor applied to a type involving for-alls.
-</para></listitem>
-<listitem><para>
-Unboxed tuple on left of an arrow.
+Type constructor applied to a type involving for-alls (if <literal>XImpredicativeTypes</literal>
+is off)
 </para></listitem>
 <listitem><para>
 Partially-applied type synonym.
 </para></listitem>
 </itemizedlist>
-So, for example,
-this will be rejected:
+So, for example, this will be rejected:
 <programlisting>
-  type Pr = (# Int, Int #)
+  type Pr = forall a. a
 
-  h :: Pr -> Int
-  h x = ...
+  h :: [Pr]
+  h = ...
 </programlisting>
-because GHC does not allow  unboxed tuples on the left of a function arrow.
+because GHC does not allow type constructors applied to for-all types.
 </para>
 </sect2>
 
@@ -3042,12 +3541,11 @@
 Here is the example of that section, in GADT-style syntax:
 <programlisting>
 data Counter a where
-    NewCounter { _this    :: self
-               , _inc     :: self -> self
-               , _display :: self -> IO ()
-               , tag      :: a
-               }
-        :: Counter a
+    NewCounter :: { _this    :: self
+                  , _inc     :: self -> self
+                  , _display :: self -> IO ()
+                  , tag      :: a
+                  } -> Counter a
 </programlisting>
 As before, only one selector function is generated here, that for <literal>tag</literal>.
 Nevertheless, you can still use all the field names in pattern matching and record construction.
@@ -3061,7 +3559,7 @@
 declaration is displayed infix by <literal>Show</literal> iff (a) it is an operator symbol,
 (b) it has two arguments, (c) it has a programmer-supplied fixity declaration.  For example
 <programlisting>
-   infix 6 (:--:) 
+   infix 6 (:--:)
    data T a where
      (:--:) :: Int -> Bool -> T Int
 </programlisting>
@@ -3159,17 +3657,17 @@
 For example:
 <programlisting>
   data Term a where
-      Lit    { val  :: Int }      :: Term Int
-      Succ   { num  :: Term Int } :: Term Int
-      Pred   { num  :: Term Int } :: Term Int
-      IsZero { arg  :: Term Int } :: Term Bool
-      Pair   { arg1 :: Term a
-             , arg2 :: Term b
-             }                    :: Term (a,b)
-      If     { cnd  :: Term Bool
-             , tru  :: Term a
-             , fls  :: Term a
-             }                    :: Term a
+      Lit    :: { val  :: Int }      -> Term Int
+      Succ   :: { num  :: Term Int } -> Term Int
+      Pred   :: { num  :: Term Int } -> Term Int
+      IsZero :: { arg  :: Term Int } -> Term Bool
+      Pair   :: { arg1 :: Term a
+                , arg2 :: Term b
+                }                    -> Term (a,b)
+      If     :: { cnd  :: Term Bool
+                , tru  :: Term a
+                , fls  :: Term a
+                }                    -> Term a
 </programlisting>
 However, for GADTs there is the following additional constraint:
 every constructor that has a field <literal>f</literal> must have
@@ -3256,8 +3754,16 @@
 </programlisting>
 The syntax is identical to that of an ordinary instance declaration apart from (a) the keyword
 <literal>deriving</literal>, and (b) the absence of the <literal>where</literal> part.
-Note the following points:
+</para>
+<para>
+However, standalone deriving differs from a <literal>deriving</literal> clause in a number
+of important ways:
 <itemizedlist>
+<listitem><para>The standalone deriving declaration does not need to be in the
+same module as the data type declaration.  (But be aware of the dangers of
+orphan instances (<xref linkend="orphan-modules"/>).
+</para></listitem>
+
 <listitem><para>
 You must supply an explicit context (in the example the context is <literal>(Eq a)</literal>),
 exactly as you would in an ordinary instance declaration.
@@ -3266,12 +3772,6 @@
 </para></listitem>
 
 <listitem><para>
-A <literal>deriving instance</literal> declaration
-must obey the same rules concerning form and termination as ordinary instance declarations,
-controlled by the same flags; see <xref linkend="instance-decls"/>.
-</para></listitem>
-
-<listitem><para>
 Unlike a <literal>deriving</literal>
 declaration attached to a <literal>data</literal> declaration, the instance can be more specific
 than the data type (assuming you also use
@@ -3293,6 +3793,8 @@
 GHC does not restrict the form of the data type.  Instead, GHC simply generates the appropriate
 boilerplate code for the specified class, and typechecks it. If there is a type error, it is
 your problem. (GHC will show you the offending code if it has a type error.)
+</para>
+<para>
 The merit of this is that you can derive instances for GADTs and other exotic
 data types, providing only that the boilerplate code does indeed typecheck.  For example:
 <programlisting>
@@ -3308,6 +3810,16 @@
 the instance declaration using stand-alone deriving.
 </para>
 </listitem>
+</itemizedlist></para>
+
+<para>
+In other ways, however, a standalone deriving obeys the same rules as ordinary deriving:
+<itemizedlist>
+<listitem><para>
+A <literal>deriving instance</literal> declaration
+must obey the same rules concerning form and termination as ordinary instance declarations,
+controlled by the same flags; see <xref linkend="instance-decls"/>.
+</para></listitem>
 
 <listitem>
 <para>The stand-alone syntax is generalised for newtypes in exactly the same
@@ -3341,21 +3853,22 @@
 <itemizedlist>
 <listitem><para> With <option>-XDeriveDataTypeable</option>, you can derive instances of the classes
 <literal>Typeable</literal>, and <literal>Data</literal>, defined in the library
-modules <literal>Data.Typeable</literal> and <literal>Data.Generics</literal> respectively.
+modules <literal>Data.Typeable</literal> and <literal>Data.Data</literal> respectively.
 </para>
-<para>An instance of <literal>Typeable</literal> can only be derived if the
-data type has seven or fewer type parameters, all of kind <literal>*</literal>.
-The reason for this is that the <literal>Typeable</literal> class is derived using the scheme
-described in
-<ulink url="http://research.microsoft.com/%7Esimonpj/papers/hmap/gmap2.ps">
-Scrap More Boilerplate: Reflection, Zips, and Generalised Casts
-</ulink>.
-(Section 7.4 of the paper describes the multiple <literal>Typeable</literal> classes that
-are used, and only <literal>Typeable1</literal> up to
-<literal>Typeable7</literal> are provided in the library.)
-In other cases, there is nothing to stop the programmer writing a <literal>TypeableX</literal>
-class, whose kind suits that of the data type constructor, and
-then writing the data type instance by hand.
+<para>Since GHC 7.8.1, <literal>Typeable</literal> is kind-polymorphic (see
+<xref linkend="kind-polymorphism"/>) and can be derived for any datatype and
+type class. Instances for datatypes can be derived by attaching a
+<literal>deriving Typeable</literal> clause to the datatype declaration, or by
+using standalone deriving (see <xref linkend="stand-alone-deriving"/>).
+Instances for type classes can only be derived using standalone deriving.
+For data families, <literal>Typeable</literal> should only be derived for the
+uninstantiated family type; each instance will then automatically have a
+<literal>Typeable</literal> instance too.
+See also <xref linkend="auto-derive-typeable"/>.
+</para>
+<para>
+Also since GHC 7.8.1, handwritten (ie. not derived) instances of
+<literal>Typeable</literal> are forbidden, and will result in an error.
 </para>
 </listitem>
 
@@ -3386,6 +3899,20 @@
 </para>
 </sect2>
 
+<sect2 id="auto-derive-typeable">
+<title>Automatically deriving <literal>Typeable</literal> instances</title>
+
+<para>
+The flag <option>-XAutoDeriveTypeable</option> triggers the generation
+of derived <literal>Typeable</literal> instances for every datatype and type
+class declaration in the module it is used. It will also generate
+<literal>Typeable</literal> instances for any promoted data constructors
+(<xref linkend="promotion"/>). This flag implies
+<option>-XDeriveDataTypeable</option> (<xref linkend="deriving-typeable"/>).
+</para>
+
+</sect2>
+
 <sect2 id="newtype-deriving">
 <title>Generalised derived instances for newtypes</title>
 
@@ -3417,7 +3944,7 @@
 </para>
 
 
-<sect3> <title> Generalising the deriving clause </title>
+<sect3 id="generalized-newtype-deriving"> <title> Generalising the deriving clause </title>
 <para>
 GHC now permits such instances to be derived instead,
 using the flag <option>-XGeneralizedNewtypeDeriving</option>,
@@ -3538,6 +4065,11 @@
 		derive these classes for a newtype, but it happens in the usual way, not
 		via this new mechanism.
 </para></listitem>
+<listitem><para>
+  It is safe to coerce each of the methods of <literal>ci</literal>. That is,
+  the missing last argument to each of the <literal>ci</literal> is not used
+  at a nominal role in any of the <literal>ci</literal>'s methods.
+  (See <xref linkend="roles"/>.)</para></listitem>
 </itemizedlist>
 Then, for each <literal>ci</literal>, the derived instance
 declaration is:
@@ -3741,6 +4273,35 @@
 
 
 </sect3>
+
+<sect3 id="nullary-type-classes">
+<title>Nullary type classes</title>
+Nullary (no parameter) type classes are enabled with <option>-XNullaryTypeClasses</option>.
+Since there are no available parameters, there can be at most one instance
+of a nullary class. A nullary type class might be used to document some assumption
+in a type signature (such as reliance on the Riemann hypothesis) or add some
+globally configurable settings in a program. For example,
+
+<programlisting>
+  class RiemannHypothesis where
+    assumeRH :: a -> a
+
+  -- Deterministic version of the Miller test
+  -- correctness depends on the generalized Riemann hypothesis
+  isPrime :: RiemannHypothesis => Integer -> Bool
+  isPrime n = assumeRH (...)
+</programlisting>
+
+The type signature of <literal>isPrime</literal> informs users that its correctness
+depends on an unproven conjecture. If the function is used, the user has
+to acknowledge the dependence with:
+
+<programlisting>
+  instance RiemannHypothesis where
+    assumeRH = id
+</programlisting>
+
+</sect3>
 </sect2>
 
 <sect2 id="functional-dependencies">
@@ -4070,6 +4631,45 @@
 "<literal>=&gt;</literal>" is the <emphasis>head</emphasis> of the instance declaration.
 </para>
 
+<sect3 id="instance-resolution">
+<title>Instance resolution</title>
+
+<para>
+When GHC tries to resolve, say, the constraint <literal>C Int Bool</literal>,
+it tries to match every instance declaration against the
+constraint,
+by instantiating the head of the instance declaration.  Consider
+these declarations:
+<programlisting>
+  instance context1 => C Int a     where ...  -- (A)
+  instance context2 => C a   Bool  where ...  -- (B)
+</programlisting>
+GHC's default behaviour is that <emphasis>exactly one instance must match the
+constraint it is trying to resolve</emphasis>.
+For example, the constraint <literal>C Int Bool</literal> matches instances (A) and (B),
+and hence would be rejected; while <literal>C Int Char</literal> matches only (A)
+and hence (A) is chosen.</para>
+
+<para>
+Notice that
+<itemizedlist>
+<listitem><para>
+When matching, GHC takes
+no account of the context of the instance declaration
+(<literal>context1</literal> etc).
+</para></listitem>
+<listitem><para>
+It is fine for there to be a <emphasis>potential</emphasis> of overlap (by
+including both declarations (A) and (B), say); an error is only reported if a
+particular constraint matches more than one.
+</para></listitem>
+</itemizedlist>
+See also <xref linkend="instance-overlap"/> for flags that loosen the
+instance resolution rules.
+</para>
+
+</sect3>
+
 <sect3 id="flexible-instance-head">
 <title>Relaxed rules for the instance head</title>
 
@@ -4078,7 +4678,11 @@
 must be of the form <literal>C (T a1 ... an)</literal>, where
 <literal>C</literal> is the class, <literal>T</literal> is a data type constructor,
 and the <literal>a1 ... an</literal> are distinct type variables.
-GHC relaxes these rules in two ways.
+In the case of multi-parameter type classes, this rule applies to each parameter of
+the instance head.  (Arguably it should be OK if just one has this form and the others
+are type variables, but that's the rules at the moment.)</para>
+
+<para>GHC relaxes this rule in two ways.
 <itemizedlist>
 <listitem><para>
 With the <option>-XTypeSynonymInstances</option> flag, instance heads may use type
@@ -4288,8 +4892,10 @@
 
 <sect3 id="instance-overlap">
 <title>Overlapping instances</title>
+
 <para>
-In general, <emphasis>GHC requires that that it be unambiguous which instance
+In general, as discussed in <xref linkend="instance-resolution"/>,
+<emphasis>GHC requires that it be unambiguous which instance
 declaration
 should be used to resolve a type-class constraint</emphasis>. This behaviour
 can be modified by two flags: <option>-XOverlappingInstances</option>
@@ -4299,36 +4905,39 @@
 <indexterm><primary>-XIncoherentInstances
 </primary></indexterm>, as this section discusses.  Both these
 flags are dynamic flags, and can be set on a per-module basis, using
-an <literal>OPTIONS_GHC</literal> pragma if desired (<xref linkend="source-file-options"/>).</para>
+an <literal>LANGUAGE</literal> pragma if desired (<xref linkend="language-pragma"/>).</para>
 <para>
-When GHC tries to resolve, say, the constraint <literal>C Int Bool</literal>,
-it tries to match every instance declaration against the
-constraint,
-by instantiating the head of the instance declaration.  For example, consider
-these declarations:
+The <option>-XOverlappingInstances</option> flag instructs GHC to loosen
+the instance resolution described in <xref linkend="instance-resolution"/>, by
+allowing more than one instance to match, <emphasis>provided there is a most
+specific one</emphasis>. The <option>-XIncoherentInstances</option> flag
+further loosens the resolution, by allowing more than one instance to match,
+irespective of whether there is a most specific one.
+</para>
+
+<para>
+For example, consider
 <programlisting>
-  instance context1 => C Int a     where ...  -- (A)
+  instance context1 => C Int b     where ...  -- (A)
   instance context2 => C a   Bool  where ...  -- (B)
-  instance context3 => C Int [a]   where ...  -- (C)
+  instance context3 => C a   [b]   where ...  -- (C)
   instance context4 => C Int [Int] where ...  -- (D)
 </programlisting>
-The instances (A) and (B) match the constraint <literal>C Int Bool</literal>,
-but (C) and (D) do not.  When matching, GHC takes
-no account of the context of the instance declaration
-(<literal>context1</literal> etc).
-GHC's default behaviour is that <emphasis>exactly one instance must match the
-constraint it is trying to resolve</emphasis>.
-It is fine for there to be a <emphasis>potential</emphasis> of overlap (by
-including both declarations (A) and (B), say); an error is only reported if a
-particular constraint matches more than one.
+compiled with <option>-XOverlappingInstances</option> enabled. The constraint
+<literal>C Int [Int]</literal> matches instances (A), (C) and (D), but the last
+is more specific, and hence is chosen.
+</para>
+<para>If (D) did not exist then (A) and (C) would still be matched, but neither is
+most specific. In that case, the program would be rejected even with
+<option>-XOverlappingInstances</option>. With
+<option>-XIncoherentInstances</option> enabled, it would be accepted and (A) or
+(C) would be chosen arbitrarily.
 </para>
-
 <para>
-The <option>-XOverlappingInstances</option> flag instructs GHC to allow
-more than one instance to match, provided there is a most specific one.  For
-example, the constraint <literal>C Int [Int]</literal> matches instances (A),
-(C) and (D), but the last is more specific, and hence is chosen.  If there is no
-most-specific match, the program is rejected.
+An instance declaration is <emphasis>more specific</emphasis> than another iff
+the head of former is a substitution instance of the latter. For example
+(D) is "more specific" than (C) because you can get from (C) to (D) by
+substituting <literal>a:=Int</literal>.
 </para>
 <para>
 However, GHC is conservative about committing to an overlapping instance.  For example:
@@ -4337,14 +4946,15 @@
   f x = ...
 </programlisting>
 Suppose that from the RHS of <literal>f</literal> we get the constraint
-<literal>C Int [b]</literal>.  But
+<literal>C b [b]</literal>.  But
 GHC does not commit to instance (C), because in a particular
 call of <literal>f</literal>, <literal>b</literal> might be instantiate
 to <literal>Int</literal>, in which case instance (D) would be more specific still.
-So GHC rejects the program.
-(If you add the flag <option>-XIncoherentInstances</option>,
-GHC will instead pick (C), without complaining about
-the problem of subsequent instantiations.)
+So GHC rejects the program.</para>
+<para>
+If, however, you add the flag <option>-XIncoherentInstances</option> when
+compiling the module that contians (D), GHC will instead pick (C), without
+complaining about the problem of subsequent instantiations.
 </para>
 <para>
 Notice that we gave a type signature to <literal>f</literal>, so GHC had to
@@ -4354,7 +4964,7 @@
 simplifying the constraint <literal>C Int [b]</literal> (for the same reason
 as before) but, rather than rejecting the program, it will infer the type
 <programlisting>
-  f :: C Int [b] => [b] -> [b]
+  f :: C b [b] => [b] -> [b]
 </programlisting>
 That postpones the question of which instance to pick to the
 call site for <literal>f</literal>
@@ -4432,26 +5042,44 @@
 the <emphasis>instance declaration</emphasis> itself, controlled by the
 presence or otherwise of the <option>-XOverlappingInstances</option>
 and <option>-XIncoherentInstances</option> flags when that module is
-being defined.  Specifically, during the lookup process:
+being defined.  Suppose we are searching for an instance of the 
+<emphasis>target constraint</emphasis> <literal>(C ty1 .. tyn)</literal>.
+The search works like this.
 <itemizedlist>
 <listitem><para>
-If the constraint being looked up matches two instance declarations IA and IB,
-and
+Find all instances I that <emphasis>match</emphasis> the target constraint;
+that is, the target constraint is a substitution instance of I.  These
+instance declarations are the <emphasis>candidates</emphasis>.
+</para></listitem>
+
+<listitem><para>
+Find all <emphasis>non-candidate</emphasis> instances 
+that <emphasis>unify</emphasis> with the target constraint.
+Such non-candidates instances might match when the target constraint is further
+instantiated.  If all of them were compiled with
+<option>-XIncoherentInstances</option>, proceed; if not, the search fails.
+</para></listitem>
+
+<listitem><para>
+Eliminate any candidate IX for which both of the following hold:
+
 <itemizedlist>
-<listitem><para>IB is a substitution instance of IA (but not vice versa);
-that is, IB is strictly more specific than IA</para></listitem>
-<listitem><para>either IA or IB was compiled with <option>-XOverlappingInstances</option></para></listitem>
+<listitem><para>There is another candidate IY that is strictly more specific;
+that is, IY is a substitution instance of IX but not vice versa.
+</para></listitem>
+<listitem><para>Either IX or IY was compiled with 
+<option>-XOverlappingInstances</option>.
+</para></listitem>
 </itemizedlist>
-then the less-specific instance IA is ignored.
+
 </para></listitem>
+
 <listitem><para>
-Suppose an instance declaration does not match the constraint being looked up, but
-does <emphasis>unify</emphasis> with it, so that it might match when the constraint is further
-instantiated.  Usually GHC will regard this as a reason for not committing to
-some other constraint.  But if the instance declaration was compiled with
-<option>-XIncoherentInstances</option>, GHC will skip the "does-it-unify?"
-check for that declaration.
+If only one candidate remains, pick it.
+Otherwise if all remaining candidates were compiled with
+<option>-XInccoherentInstances</option>, pick an arbitrary candidate.
 </para></listitem>
+
 </itemizedlist>
 These rules make it possible for a library author to design a library that relies on
 overlapping instances without the library client having to know.
@@ -4489,7 +5117,7 @@
        xs :: [b]
        xs = [x,x,x]
 </programlisting>
-Provided that you also specify <option>-XScopedTypeVariables</option> 
+Provided that you also specify <option>-XScopedTypeVariables</option>
 (<xref linkend="scoped-type-variables"/>),
 the <literal>forall b</literal> scopes over the definition of <literal>foo</literal>,
 and in particular over the type signature for <literal>xs</literal>.
@@ -4574,13 +5202,196 @@
 </para>
 </sect2>
 
+<sect2 id="overloaded-lists">
+<title>Overloaded lists</title>
+
+<para> GHC supports <emphasis>overloading of the list notation</emphasis>.
+Let us recap the notation for
+constructing lists. In Haskell, the list notation can be be used in the
+following seven ways:
+
+<programlisting>
+[]          -- Empty list
+[x]         -- x : []
+[x,y,z]     -- x : y : z : []
+[x .. ]     -- enumFrom x
+[x,y ..]    -- enumFromThen x y
+[x .. y]    -- enumFromTo x y
+[x,y .. z]  -- enumFromThenTo x y z
+</programlisting>
+
+When the <option>OverloadedLists</option> extension is turned on, the
+aforementioned seven notations are desugared as follows: </para>
+
+<programlisting>
+[]          -- fromListN 0 []
+[x]         -- fromListN 1 (x : [])
+[x,y,z]     -- fromListN 3 (x : y : z : [])
+[x .. ]     -- fromList (enumFrom x)
+[x,y ..]    -- fromList (enumFromThen x y)
+[x .. y]    -- fromList (enumFromTo x y)
+[x,y .. z]  -- fromList (enumFromThenTo x y z)
+</programlisting>
+
+<para> This extension allows programmers to use the list notation for
+construction of structures like: <literal>Set</literal>,
+<literal>Map</literal>, <literal>IntMap</literal>, <literal>Vector</literal>,
+<literal>Text</literal> and <literal>Array</literal>. The following code
+listing gives a few examples:</para>
+
+<programlisting>
+['0' .. '9']             :: Set Char
+[1 .. 10]                :: Vector Int
+[("default",0), (k1,v1)] :: Map String Int
+['a' .. 'z']             :: Text
+</programlisting>
+<para>
+List patterns are also overloaded. When the <option>OverloadedLists</option>
+extension is turned on, these definitions are desugared as follows
+<programlisting>
+f [] = ...          -- f (toList -> []) = ...
+g [x,y,z] = ...     -- g (toList -> [x,y,z]) = ...
+</programlisting>
+(Here we are using view-pattern syntax for the translation, see <xref linkend="view-patterns"/>.)
+</para>
+
+<sect3>
+<title>The <literal>IsList</literal> class</title>
+
+<para>In the above desugarings, the functions <literal>toList</literal>,
+<literal>fromList</literal> and <literal>fromListN</literal> are all
+methods of
+the <literal>IsList</literal> class, which is itself exported from
+the <literal>GHC.Exts</literal> module.
+The type class is defined as follows:</para>
+
+<programlisting>
+class IsList l where
+  type Item l
+
+  fromList :: [Item l] -> l
+  toList   :: l -> [Item l]
+
+  fromListN :: Int -> [Item l] -> l
+  fromListN _ = fromList
+</programlisting>
+
+<para>The <literal>FromList</literal> class and its methods are intended to be
+used in conjunction with the <option>OverloadedLists</option> extension.
+<itemizedlist>
+<listitem> <para> The type function
+<literal>Item</literal> returns the type of items of the
+structure <literal>l</literal>.
+</para></listitem>
+<listitem><para>
+The function <literal>fromList</literal>
+constructs the structure <literal>l</literal> from the given list of
+<literal>Item l</literal>.
+</para></listitem>
+<listitem><para>
+The function <literal>fromListN</literal> takes the
+input list's length as a hint. Its behaviour should be equivalent to
+<literal>fromList</literal>. The hint can be used for more efficient
+construction of the structure <literal>l</literal> compared to
+<literal>fromList</literal>. If the given hint is not equal to the input
+list's length the behaviour of <literal>fromListN</literal> is not
+specified.
+</para></listitem>
+<listitem><para>
+The function <literal>toList</literal> should be
+the inverse of <literal>fromList</literal>.
+</para></listitem>
+</itemizedlist>
+</para>
+<para>It is perfectly fine to declare new instances
+of <literal>IsList</literal>, so that list notation becomes
+useful for completely new data types.
+Here are several example instances:
+<programlisting>
+instance FromList [a] where
+  type Item [a] = a
+  fromList = id
+  toList = id
+
+instance (Ord a) => FromList (Set a) where
+  type Item (Set a) = a
+  fromList = Set.fromList
+  toList = Set.toList
+
+instance (Ord k) => FromList (Map k v) where
+  type Item (Map k v) = (k,v)
+  fromList = Map.fromList
+  toList = Map.toList
+
+instance FromList (IntMap v) where
+  type Item (IntMap v) = (Int,v)
+  fromList = IntMap.fromList
+  toList = IntMap.toList
+
+instance FromList Text where
+  type Item Text = Char
+  fromList = Text.pack
+  toList = Text.unpack
+
+instance FromList (Vector a) where
+  type Item (Vector a) = a
+  fromList  = Vector.fromList
+  fromListN = Vector.fromListN
+  toList = Vector.toList
+</programlisting>
+</para>
+</sect3>
+
+<sect3>
+<title>Rebindable syntax</title>
+
+<para> When desugaring list notation with <option>-XOverloadedLists</option>
+GHC uses the <literal>fromList</literal> (etc) methods from module <literal>GHC.Exts</literal>.
+You do not need to import <literal>GHC.Exts</literal> for this to happen.
+</para>
+<para> However if you use <option>-XRebindableSyntax</option>, then
+GHC instead uses whatever is in
+scope with the names of <literal>toList</literal>, <literal>fromList</literal> and
+<literal>fromListN</literal>. That is, these functions are rebindable;
+c.f. <xref linkend="rebindable-syntax"/>. </para>
+</sect3>
+
+<sect3>
+<title>Defaulting</title>
+
+<para>Currently, the <literal>IsList</literal> class is not accompanied with
+defaulting rules. Although feasible, not much thought has gone into how to
+specify the meaning of the default declarations like:</para>
+
+<programlisting>
+default ([a])
+</programlisting>
+</sect3>
+
+<sect3>
+<title>Speculation about the future</title>
+
+
+<para>The current implementation of the <option>OverloadedLists</option>
+extension can be improved by handling the lists that are only populated with
+literals in a special way. More specifically, the compiler could allocate such
+lists statically using a compact representation and allow
+<literal>IsList</literal> instances to take advantage of the compact
+representation. Equipped with this capability the
+<option>OverloadedLists</option> extension will be in a good position to
+subsume the <option>OverloadedStrings</option> extension (currently, as a
+special case, string literals benefit from statically allocated compact
+representation).</para>
+</sect3>
+</sect2>
+
 </sect1>
 
 <sect1 id="type-families">
 <title>Type families</title>
 
 <para>
-  <firstterm>Indexed type families</firstterm> are a new GHC extension to
+  <firstterm>Indexed type families</firstterm> form an extension to
   facilitate type-level
   programming. Type families are a generalisation of <firstterm>associated
   data types</firstterm>
@@ -4623,11 +5434,11 @@
   indices.
 </para>
 <para>
-  Indexed type families come in two flavours: <firstterm>data
-    families</firstterm> and <firstterm>type synonym
-    families</firstterm>. They are the indexed family variants of algebraic
-  data types and type synonyms, respectively. The instances of data families
-  can be data types and newtypes.
+  Indexed type families come in three flavours: <firstterm>data
+  families</firstterm>, <firstterm>open type synonym families</firstterm>, and
+  <firstterm>closed type synonym families</firstterm>. They are the indexed
+  family variants of algebraic data types and type synonyms, respectively. The
+  instances of data families can be data types and newtypes.
 </para>
 <para>
   Type families are enabled by the flag <option>-XTypeFamilies</option>.
@@ -4735,7 +5546,7 @@
     </para>
 
     <para>
-      Even if type families are defined as toplevel declarations, functions
+      Even if data families are defined as toplevel declarations, functions
       that perform different computations for different family instances may still
       need to be defined as methods of type classes.  In particular, the
       following is not possible:
@@ -4781,22 +5592,24 @@
   <title>Synonym families</title>
 
   <para>
-    Type families appear in two flavours: (1) they can be defined on the
-    toplevel or (2) they can appear inside type classes (in which case they
-    are known as associated type synonyms).  The former is the more general
-    variant, as it lacks the requirement for the type-indexes to coincide with
-    the class parameters.  However, the latter can lead to more clearly
-    structured code and compiler warnings if some type instances were -
-    possibly accidentally - omitted.  In the following, we always discuss the
-    general toplevel form first and then cover the additional constraints
-    placed on associated types.
+    Type families appear in three flavours: (1) they can be defined as open
+    families on the toplevel, (2) they can be defined as closed families on
+    the toplevel, or (3) they can appear inside type classes (in which case
+    they are known as associated type synonyms). Toplevel families are more
+    general, as they lack the requirement for the type-indexes to coincide
+    with the class parameters. However, associated type synonyms can lead to
+    more clearly structured code and compiler warnings if some type instances
+    were - possibly accidentally - omitted. In the following, we always
+    discuss the general toplevel forms first and then cover the additional
+    constraints placed on associated types. Note that closed associated type
+    synonyms do not exist.
   </para>
 
   <sect3 id="type-family-declarations">
     <title>Type family declarations</title>
 
     <para>
-      Indexed type families are introduced by a signature, such as
+      Open indexed type families are introduced by a signature, such as
 <programlisting>
 type family Elem c :: *
 </programlisting>
@@ -4832,31 +5645,71 @@
   <sect3 id="type-instance-declarations">
     <title>Type instance declarations</title>
     <para>
-      Instance declarations of type families are very similar to standard type
-      synonym declarations.  The only two differences are that the
-      keyword <literal>type</literal> is followed
-      by <literal>instance</literal> and that some or all of the type
-      arguments can be non-variable types, but may not contain forall types or
-      type synonym families. However, data families are generally allowed, and
-      type synonyms are allowed as long as they are fully applied and expand
-      to a type that is admissible - these are the exact same requirements as
-      for data instances.  For example, the <literal>[e]</literal> instance
-      for <literal>Elem</literal> is
+      Instance declarations of type families are very similar to
+      standard type synonym declarations. The only two differences are that
+      the keyword <literal>type</literal> is followed by
+      <literal>instance</literal> and that some or all of the type arguments
+      can be non-variable types, but may not contain forall types or type
+      synonym families. However, data families are generally allowed, and type
+      synonyms are allowed as long as they are fully applied and expand to a
+      type that is admissible - these are the exact same requirements as for
+      data instances. For example, the <literal>[e]</literal> instance for
+      <literal>Elem</literal> is
 <programlisting>
 type instance Elem [e] = e
 </programlisting>
     </para>
+
     <para>
       Type family instance declarations are only legitimate when an
       appropriate family declaration is in scope - just like class instances
-      require the class declaration to be visible.  Moreover, each instance
+      require the class declaration to be visible. Moreover, each instance
       declaration has to conform to the kind determined by its family
       declaration, and the number of type parameters in an instance
       declaration must match the number of type parameters in the family
-      declaration.   Finally, the right-hand side of a type instance must be a
+      declaration. Finally, the right-hand side of a type instance must be a
       monotype (i.e., it may not include foralls) and after the expansion of
       all saturated vanilla type synonyms, no synonyms, except family synonyms
-      may remain.  Here are some examples of admissible and illegal type
+      may remain.
+    </para>
+  </sect3>
+
+  <sect3 id="closed-type-families">
+    <title>Closed type families</title>
+    <para>
+      A type family can also be declared with a <literal>where</literal> clause,
+      defining the full set of equations for that family. For example:
+<programlisting>
+type family F a where
+  F Int  = Double
+  F Bool = Char
+  F a    = String
+</programlisting>
+      A closed type family's equations are tried in order, from top to bottom,
+      when simplifying a type family application. In this example, we declare
+      an instance for <literal>F</literal> such that <literal>F Int</literal>
+      simplifies to <literal>Double</literal>, <literal>F Bool</literal>
+      simplifies to <literal>Char</literal>, and for any other type
+      <literal>a</literal> that is known not to be <literal>Int</literal> or
+      <literal>Bool</literal>, <literal>F a</literal> simplifies to
+      <literal>String</literal>. Note that GHC must be sure that
+      <literal>a</literal> cannot unify with <literal>Int</literal> or
+      <literal>Bool</literal> in that last case; if a programmer specifies
+      just <literal>F a</literal> in their code, GHC will not be able to
+      simplify the type. After all, <literal>a</literal> might later be
+      instantiated with <literal>Int</literal>.
+    </para>
+
+    <para>
+      A closed type family's equations have the same restrictions as the
+      equations for an open type family instances.
+    </para>
+  </sect3>
+
+  <sect3 id="type-family-examples">
+    <title>Type family examples</title>
+    <para>
+Here are some examples of admissible and illegal type
       instances:
 <programlisting>
 type family F a :: *
@@ -4865,6 +5718,11 @@
 type instance F (F a)              = a           -- WRONG: type parameter mentions a type family
 type instance F (forall a. (a, b)) = b           -- WRONG: a forall type appears in a type parameter
 type instance F Float              = forall a.a  -- WRONG: right-hand side may not be a forall type
+type family H a where                            -- OK!
+  H Int  = Int
+  H Bool = Bool
+  H a    = String
+type instance H Char = Char       -- WRONG: cannot have instances of closed family
 
 type family G a b :: * -> *
 type instance G Int            = (,)     -- WRONG: must be two type parameters
@@ -4873,21 +5731,31 @@
     </para>
     </sect3>
     <sect3 id="type-family-overlap">
-      <title>Overlap of type synonym instances</title>
+      <title>Compatibility and apartness of type family equations</title>
       <para>
-	The instance declarations of a type family used in a single program
-	may only overlap if the right-hand sides of the overlapping instances
-	coincide for the overlapping types.  More formally, two instance
-	declarations overlap if there is a substitution that makes the
-	left-hand sides of the instances syntactically the same.  Whenever
-	that is the case, the right-hand sides of the instances must also be
-	syntactically equal under the same substitution.  This condition is
-	independent of whether the type family is associated or not, and it is
-	not only a matter of consistency, but one of type safety.
+        There must be some restrictions on the equations of type families, lest
+	we define an ambiguous rewrite system. So, equations of open type families
+	are restricted to be <firstterm>compatible</firstterm>. Two type patterns
+	are compatible if
+<orderedlist>
+<listitem><para>all corresponding types in the patterns are <firstterm>apart</firstterm>, or</para></listitem>
+<listitem><para>the two patterns unify producing a substitution, and the right-hand sides are equal under that substitution.</para></listitem>
+</orderedlist>
+        Two types are considered <firstterm>apart</firstterm> if, for all possible
+	substitutions, the types cannot reduce to a common reduct.
       </para>
+
       <para>
-	Here are two example to illustrate the condition under which overlap
-	is permitted.
+	The first clause of "compatible" is the more straightforward one. It says
+	that the patterns of two distinct type family instances cannot overlap.
+	For example, the following is disallowed:
+<programlisting>
+type instance F Int = Bool
+type instance F Int = Char
+</programlisting>
+        The second clause is a little more interesting. It says that two
+        overlapping type family instances are allowed if the right-hand
+	sides coincide in the region of overlap. Some examples help here:
 <programlisting>
 type instance F (a, Int) = [a]
 type instance F (Int, b) = [b]   -- overlap permitted
@@ -4895,7 +5763,52 @@
 type instance G (a, Int)  = [a]
 type instance G (Char, a) = [a]  -- ILLEGAL overlap, as [Char] /= [Int]
 </programlisting>
-      </para>
+	Note that this compatibility condition is independent of whether the type family
+	is associated or not, and it is not only a matter of consistency, but
+	one of type safety. </para>
+
+	<para>
+	  The definition for "compatible" uses a notion of "apart", whose definition
+	  in turn relies on type family reduction. This condition of "apartness", as
+	  stated, is impossible to check, so we use this conservative approximation:
+	  two types are considered to be apart when the two types cannot be unified,
+	  even by a potentially infinite unifier. Allowing the unifier to be infinite
+	  disallows the following pair of instances:
+<programlisting>
+type instance H x   x = Int
+type instance H [x] x = Bool
+</programlisting>
+          The type patterns in this pair equal if <literal>x</literal> is replaced
+	  by an infinite nesting of lists. Rejecting instances such as these is
+	  necessary for type soundness.
+	</para>
+
+	<para>
+	  Compatibility also affects closed type families. When simplifying an
+	  application of a closed type family, GHC will select an equation only
+	  when it is sure that no incompatible previous equation will ever apply.
+	  Here are some examples:
+<programlisting>
+type family F a where
+  F Int = Bool
+  F a   = Char
+
+type family G a where
+  G Int = Int
+  G a   = a
+</programlisting>
+          In the definition for <literal>F</literal>, the two equations are
+          incompatible -- their patterns are not apart, and yet their
+          right-hand sides do not coincide. Thus, before GHC selects the
+          second equation, it must be sure that the first can never apply. So,
+          the type <literal>F a</literal> does not simplify; only a type such
+          as <literal>F Double</literal> will simplify to
+          <literal>Char</literal>. In <literal>G</literal>, on the other hand,
+          the two equations are compatible. Thus, GHC can ignore the first
+          equation when looking at the second. So, <literal>G a</literal> will
+          simplify to <literal>a</literal>.</para>
+
+    <para> However see <xref linkend="ghci-decls"/> for the overlap rules in GHCi.</para>
     </sect3>
 
     <sect3 id="type-family-decidability">
@@ -4960,7 +5873,7 @@
   type Elem ce :: *
   ...
 </programlisting>
-When doing so, we drop the "<literal>family</literal>" keyword.
+When doing so, we (optionally) may drop the "<literal>family</literal>" keyword.
 </para>
 <para>
 	The type parameters must all be type variables, of course,
@@ -4981,7 +5894,7 @@
       <title>Associated instances</title>
       <para>
 	When an associated data or type synonym family instance is declared within a type
-	class instance, we drop the <literal>instance</literal> keyword in the
+	class instance, we (optionally) may drop the <literal>instance</literal> keyword in the
 	family instance:
 <programlisting>
 instance (GMapKey a, GMapKey b) => GMapKey (Either a b) where
@@ -5035,14 +5948,16 @@
 <programlisting>
 class IsBoolMap v where
   type Key v
-  type Key v = Int
+  type instance Key v = Int
 
   lookupKey :: Key v -> v -> Maybe Bool
 
 instance IsBoolMap [(Int, Bool)] where
   lookupKey = lookup
 </programlisting>
-
+The <literal>instance</literal> keyword is optional.
+      </para>
+<para>
 There can also be multiple defaults for a single type, as long as they do not
 overlap:
 <programlisting>
@@ -5080,6 +5995,23 @@
         type safety.
       </para>
     </sect3>
+
+    <sect3><title>Instance contexts and associated type and data instances</title>
+    <para>Associated type and data instance declarations do not inherit any
+          context specified on the enclosing instance. For type instance declarations,
+	  it is unclear what the context would mean. For data instance declarations,
+	  it is unlikely a user would want the context repeated for every data constructor.
+	  The only place where the context might likely be useful is in a
+	  <literal>deriving</literal> clause of an associated data instance. However,
+	  even here, the role of the outer instance context is murky. So, for
+	  clarity, we just stick to the rule above: the enclosing instance context
+	  is ignored. If you need to use
+	  a non-trivial context on a derived instance,
+	  use a <link linkend="stand-alone-deriving">standalone
+	  deriving</link> clause (at the top level).
+    </para>
+    </sect3>
+
   </sect2>
 
   <sect2 id="data-family-import-export">
@@ -5277,7 +6209,7 @@
 <title>Kind polymorphism</title>
 <para>
 This section describes <emphasis>kind polymorphism</emphasis>, and extension
-enabled by <option>-XPolyKinds</option>.  
+enabled by <option>-XPolyKinds</option>.
 It is described in more detail in the paper
 <ulink url="http://dreixel.net/research/pdf/ghp.pdf">Giving Haskell a
 Promotion</ulink>, which appeared at TLDI 2012.
@@ -5323,27 +6255,53 @@
 
 <para>
 Generally speaking, with <option>-XPolyKinds</option>, GHC will infer a polymorphic
-kind for un-decorated whenever possible.  For example:
+kind for un-decorated declarations, whenever possible.  For example:
 <programlisting>
 data T m a = MkT (m a)
 -- GHC infers kind   T :: forall k. (k -> *) -> k -> *
 </programlisting>
-Just as in the world of terms, you can restrict polymorphism using a signature
+Just as in the world of terms, you can restrict polymorphism using a
+kind signature (sometimes called a kind annotation)
 (<option>-XPolyKinds</option> implies <option>-XKindSignatures</option>):
 <programlisting>
 data T m (a :: *) = MkT (m a)
 -- GHC now infers kind   T :: (* -> *) -> * -> *
 </programlisting>
-There is no "forall" for kind variables.  Instead, you can simply mention a kind
-variable in a kind signature, thus:
+There is no "forall" for kind variables.  Instead, when binding a type variable,
+you can simply mention a kind
+variable in a kind annotation for that type-variable binding, thus:
 <programlisting>
 data T (m :: k -> *) a = MkT (m a)
 -- GHC now infers kind   T :: forall k. (k -> *) -> k -> *
 </programlisting>
+The kind "forall" is placed
+just outside the outermost type-variable binding whose kind annotation mentions
+the kind variable. For example
+<programlisting>
+f1 :: (forall a m. m a -> Int) -> Int
+         -- f1 :: forall (k:BOX).
+         --       (forall (a:k) (m:k->*). m a -> Int)
+         --       -> Int
+
+f2 :: (forall (a::k) m. m a -> Int) -> Int
+         -- f2 :: (forall (k:BOX) (a:k) (m:k->*). m a -> Int)
+         --       -> Int
+</programlisting>
+Here in <literal>f1</literal> there is no kind annotation mentioning the polymorphic
+kind variable, so <literal>k</literal> is generalised at the top
+level of the signature for <literal>f1</literal>,
+making the signature for <literal>f1</literal> is as polymorphic as possible.
+But in the case of of <literal>f2</literal> we give a kind annotation in the <literal>forall (a:k)</literal>
+binding, and GHC therefore puts the kind <literal>forall</literal> right there too.
+</para>
+<para>
+(Note: These rules are a bit indirect and clumsy.  Perhaps GHC should allow explicit kind quantification.
+But the implicit quantification (e.g. in the declaration for data type T above) is certainly
+very convenient, and it is not clear what the syntax for explicit quantification should be.)
 </para>
 </sect2>
 
-<sect2> <title>Polymorphic kind recursion and complete kind signatures</title>
+<sect2 id="complete-kind-signatures"> <title>Polymorphic kind recursion and complete kind signatures</title>
 
 <para>
 Just as in type inference, kind inference for recursive types can only use <emphasis>monomorphic</emphasis> recursion.
@@ -5353,7 +6311,7 @@
 -- GHC infers kind  T :: (* -> *) -> * -> *
 </programlisting>
 The recursive use of <literal>T</literal> forced the second argument to have kind <literal>*</literal>.
-However, just as in type inference, you can achieve polymorphic recursion by giving a 
+However, just as in type inference, you can achieve polymorphic recursion by giving a
 <emphasis>complete kind signature</emphasis> for <literal>T</literal>. The way to give
 a complete kind signature for a data type is to use a GADT-style declaration with an
 explicit kind signature thus:
@@ -5388,14 +6346,21 @@
 </para></listitem>
 
 <listitem><para>
-A type or data family declaration <emphasis>always</emphasis> have a 
+An open type or data family declaration <emphasis>always</emphasis> has a
 complete user-specified kind signature; no "<literal>::</literal>" is required:
 <programlisting>
 data family D1 a           	-- D1 :: * -> *
 data family D2 (a :: k)    	-- D2 :: forall k. k -> *
 data family D3 (a :: k) :: *    -- D3 :: forall k. k -> *
 type family S1 a :: k -> *      -- S1 :: forall k. * -> k -> *
+
+class C a where                 -- C  :: k -> Constraint
+  type AT a b                   -- AT :: k -> * -> *
 </programlisting>
+In the last example, the variable <literal>a</literal> has an implicit kind
+variable annotation from the class declaration. It keeps its polymorphic kind
+in the associated type declaration. The variable <literal>b</literal>, however,
+gets defaulted to <literal>*</literal>.
 </para></listitem>
 </itemizedlist>
 In a complete user-specified kind signature, any un-decorated type variable to the
@@ -5404,6 +6369,68 @@
 </para>
 
 </sect2>
+
+<sect2><title>Kind inference in closed type families</title>
+
+<para>Although all open type families are considered to have a complete
+user-specified kind signature, we can relax this condition for closed type
+families, where we have equations on which to perform kind inference. GHC will
+infer a kind for any type variable in a closed type family when that kind is
+never used in pattern-matching. If you want a kind variable to be used in
+pattern-matching, you must declare it explicitly.
+</para>
+
+<para>
+Here are some examples (assuming <literal>-XDataKinds</literal> is enabled):
+<programlisting>
+type family Not a where      -- Not :: Bool -> Bool
+  Not False = True
+  Not True  = False
+
+type family F a where        -- ERROR: requires pattern-matching on a kind variable
+  F Int   = Bool
+  F Maybe = Char
+
+type family G (a :: k) where -- G :: k -> *
+  G Int   = Bool
+  G Maybe = Char
+
+type family SafeHead where   -- SafeHead :: [k] -> Maybe k
+  SafeHead '[] = Nothing     -- note that k is not required for pattern-matching
+  SafeHead (h ': t) = Just h
+</programlisting>
+</para>
+
+</sect2>
+
+<sect2><title>Kind inference in class instance declarations</title>
+
+<para>Consider the following example of a poly-kinded class and an instance for it:</para>
+
+<programlisting>
+class C a where
+  type F a
+
+instance C b where
+  type F b = b -> b
+</programlisting>
+
+<para>In the class declaration, nothing constrains the kind of the type
+<literal>a</literal>, so it becomes a poly-kinded type variable <literal>(a :: k)</literal>.
+Yet, in the instance declaration, the right-hand side of the associated type instance
+<literal>b -> b</literal> says that <literal>b</literal> must be of kind <literal>*</literal>. GHC could theoretically propagate this information back into the instance head, and
+make that instance declaration apply only to type of kind <literal>*</literal>, as opposed
+to types of any kind. However, GHC does <emphasis>not</emphasis> do this.</para>
+
+<para>In short: GHC does <emphasis>not</emphasis> propagate kind information from
+the members of a class instance declaration into the instance declaration head.</para>
+
+<para>This lack of kind inference is simply an engineering problem within GHC, but
+getting it to work would make a substantial change to the inference infrastructure,
+and it's not clear the payoff is worth it. If you want to restrict <literal>b</literal>'s
+kind in the instance above, just use a kind signature in the instance head.</para>
+
+</sect2>
 </sect1>
 
 <sect1 id="promotion">
@@ -5469,7 +6496,7 @@
 data List a = Nil | Cons a (List a)
 
 data Pair a b = Pair a b
- 
+
 data Sum a b = L a | R b
 </programlisting>
 give rise to the following kinds and type constructors:
@@ -5498,7 +6525,10 @@
 <para>
 The following restrictions apply to promotion:
 <itemizedlist>
- <listitem><para>We only promote datatypes whose kinds are of the form
+ <listitem><para>We promote <literal>data</literal> types and <literal>newtypes</literal>,
+    but not type synonyms, or type/data families (<xref linkend="type-families"/>).
+  </para></listitem>
+ <listitem><para>We only promote types whose kinds are of the form
  <literal>* -> ... -> * -> *</literal>. In particular, we do not promote
  higher-kinded datatypes such as <literal>data Fix f = In (f (Fix f))</literal>,
  or datatypes whose kinds involve promoted types such as
@@ -5507,8 +6537,6 @@
  polymorphic, involve constraints, mention type or data families, or involve types that
  are not promotable.
  </para></listitem>
- <listitem><para>We do not promote data family instances (<xref linkend="data-families"/>).
- </para></listitem>
 </itemizedlist>
 </para>
 </sect2>
@@ -5533,7 +6561,7 @@
 type T2 = 'P    -- promoted 2
 </programlisting>
 Note that promoted datatypes give rise to named kinds. Since these can never be
-ambiguous, we do not allow quotes in kind names. 
+ambiguous, we do not allow quotes in kind names.
 </para>
 <para>Just as in the case of Template Haskell (<xref linkend="th-syntax"/>), there is
 no way to quote a data constructor or type constructor whose second character
@@ -5557,14 +6585,78 @@
 </para>
 </sect2>
 
-<sect2 id="promoted-literals">
-<title>Promoted Literals</title>
+<sect2 id="promotion-existentials">
+<title>Promoting existential data constructors</title>
 <para>
-Numeric and string literals are promoted to the type level, giving convenient
-access to a large number of predefined type-level constants.  Numeric literals
-are of kind <literal>Nat</literal>, while string literals are of kind
-<literal>Symbol</literal>.  These kinds are defined in the module
-<literal>GHC.TypeLits</literal>.
+Note that we do promote existential data constructors that are otherwise suitable.
+For example, consider the following:
+<programlisting>
+data Ex :: * where
+  MkEx :: forall a. a -> Ex
+</programlisting>
+Both the type <literal>Ex</literal> and the data constructor <literal>MkEx</literal>
+get promoted, with the polymorphic kind <literal>'MkEx :: forall k. k -> Ex</literal>.
+Somewhat surprisingly, you can write a type family to extract the member
+of a type-level existential:
+<programlisting>
+type family UnEx (ex :: Ex) :: k
+type instance UnEx (MkEx x) = x
+</programlisting>
+At first blush, <literal>UnEx</literal> seems poorly-kinded. The return kind
+<literal>k</literal> is not mentioned in the arguments, and thus it would seem
+that an instance would have to return a member of <literal>k</literal>
+<emphasis>for any</emphasis> <literal>k</literal>. However, this is not the
+case. The type family <literal>UnEx</literal> is a kind-indexed type family.
+The return kind <literal>k</literal> is an implicit parameter to <literal>UnEx</literal>.
+The elaborated definitions are as follows:
+<programlisting>
+type family UnEx (k :: BOX) (ex :: Ex) :: k
+type instance UnEx k (MkEx k x) = x
+</programlisting>
+Thus, the instance triggers only when the implicit parameter to <literal>UnEx</literal>
+matches the implicit parameter to <literal>MkEx</literal>. Because <literal>k</literal>
+is actually a parameter to <literal>UnEx</literal>, the kind is not escaping the
+existential, and the above code is valid.
+</para>
+
+<para>
+See also <ulink url="http://ghc.haskell.org/trac/ghc/ticket/7347">Trac #7347</ulink>.
+</para>
+</sect2>
+
+<sect2>
+<title>Promoting type operators</title>
+<para>
+Type operators are <emphasis>not</emphasis> promoted to the kind level. Why not? Because
+<literal>*</literal> is a kind, parsed the way identifiers are. Thus, if a programmer
+tried to write <literal>Either * Bool</literal>, would it be <literal>Either</literal>
+applied to <literal>*</literal> and <literal>Bool</literal>? Or would it be
+<literal>*</literal> applied to <literal>Either</literal> and <literal>Bool</literal>.
+To avoid this quagmire, we simply forbid promoting type operators to the kind level.
+</para>
+</sect2>
+
+
+</sect1>
+
+<sect1 id="type-level-literals">
+<title>Type-Level Literals</title>
+<para>
+GHC supports numeric and string literals at the type level, giving convenient
+access to a large number of predefined type-level constants.
+Numeric literals are of kind <literal>Nat</literal>, while string literals
+are of kind <literal>Symbol</literal>.
+This feature is enabled by the <literal>XDataKinds</literal>
+language extension.
+</para>
+
+<para>
+The kinds of the literals and all other low-level operations for this feature
+are defined in module <literal>GHC.TypeLits</literal>. Note that the module
+defines some type-level operators that clash with their value-level
+counterparts (e.g. <literal>(+)</literal>).  Import and export declarations
+referring to these operators require an explicit namespace
+annotation (see <xref linkend="explicit-namespaces"/>).
 </para>
 
 <para>
@@ -5599,44 +6691,84 @@
 example = from (Point 1 2) (Get :: Label "x")
 </programlisting>
 </para>
-</sect2>
 
-<sect2 id="promotion-existentials">
-<title>Promoting existential data constructors</title>
+<sect2 id="typelit-runtime">
+<title>Runtime Values for Type-Level Literals</title>
 <para>
-Note that we do promote existential data constructors that are otherwise suitable.
-For example, consider the following:
+Sometimes it is useful to access the value-level literal assocaited with
+a type-level literal.  This is done with the functions
+<literal>natVal</literal> and <literal>symbolVal</literal>. For example:
 <programlisting>
-data Ex :: * where
-  MkEx :: forall a. a -> Ex
+GHC.TypeLits> natVal (Proxy :: Proxy 2)
+2
 </programlisting>
-Both the type <literal>Ex</literal> and the data constructor <literal>MkEx</literal>
-get promoted, with the polymorphic kind <literal>'MkEx :: forall k. k -> Ex</literal>. 
-Somewhat surprisingly, you can write a type family to extract the member
-of a type-level existential:
+These functions are overloaded because they need to return a different
+result, depending on the type at which they are instantiated.
 <programlisting>
-type family UnEx (ex :: Ex) :: k
-type instance UnEx (MkEx x) = x
+natVal :: KnownNat n => proxy n -> Integer
+
+-- instance KnownNat 0
+-- instance KnownNat 1
+-- instance KnownNat 2
+-- ...
 </programlisting>
-At first blush, <literal>UnEx</literal> seems poorly-kinded. The return kind
-<literal>k</literal> is not mentioned in the arguments, and thus it would seem
-that an instance would have to return a member of <literal>k</literal> 
-<emphasis>for any</emphasis> <literal>k</literal>. However, this is not the
-case. The type family <literal>UnEx</literal> is a kind-indexed type family.
-The return kind <literal>k</literal> is an implicit parameter to <literal>UnEx</literal>.
-The elaborated definitions are as follows:
+GHC discharges the constraint as soon as it knows what concrete
+type-level literal is being used in the program.  Note that this works
+only for <emphasis>literals</emphasis> and not arbitrary type expressions.
+For example, a constraint of the form <literal>KnownNat (a + b)</literal>
+will <emphasis>not</emphasis> be simplified to
+<literal>(KnownNat a, KnownNat b)</literal>; instead, GHC will keep the
+constraint as is, until it can simplify <literal>a + b</literal> to
+a constant value.
+</para>
+</sect2>
+
+<para>
+It is also possible to convert a run-time integer or string value to
+the corresponding type-level literal.  Of course, the resulting type
+literal will be unknown at compile-time, so it is hidden in an existential
+type.   The conversion may be performed using <literal>someNatVal</literal>
+for integers and <literal>someSymbolVal</literal> for strings:
 <programlisting>
-type family UnEx (k :: BOX) (ex :: Ex) :: k
-type instance UnEx k (MkEx k x) = x
+someNatVal :: Integer -> Maybe SomeNat
+SomeNat    :: KnownNat n => Proxy n -> SomeNat
 </programlisting>
-Thus, the instance triggers only when the implicit parameter to <literal>UnEx</literal>
-matches the implicit parameter to <literal>MkEx</literal>. Because <literal>k</literal>
-is actually a parameter to <literal>UnEx</literal>, the kind is not escaping the
-existential, and the above code is valid.
+The operations on strings are similar.
 </para>
 
+<sect2 id="typelit-tyfuns">
+<title>Computing With Type-Level Naturals</title>
 <para>
-See also <ulink url="http://hackage.haskell.org/trac/ghc/ticket/7347">Trac #7347</ulink>.
+GHC 7.8 can evaluate arithmetic expressions involving type-level natural
+numbers.  Such expressions may be constructed using the type-families
+<literal>(+), (*), (^)</literal> for addition, multiplication,
+and exponentiation.  Numbers may be compared using <literal>(&lt;=?)</literal>,
+which returns a promoted boolean value, or <literal>(&lt;=)</literal>, which
+compares numbers as a constraint.  For example:
+<programlisting>
+GHC.TypeLits> natVal (Proxy :: Proxy (2 + 3))
+5
+</programlisting>
+</para>
+<para>
+At present, GHC is quite limited in its reasoning about arithmetic:
+it will only evalute the arithmetic type functions and compare the results---
+in the same way that it does for any other type function.  In particular,
+it does not know more general facts about arithmetic, such as the commutativity
+and associativity of <literal>(+)</literal>, for example.
+</para>
+
+<para>
+However, it is possible to perform a bit of "backwards" evaluation.
+For example, here is how we could get GHC to compute arbitrary logarithms
+at the type level:
+<programlisting>
+lg :: Proxy base -> Proxy (base ^ pow) -> Proxy pow
+lg _ _ = Proxy
+
+GHC.TypeLits> natVal (lg (Proxy :: Proxy 2) (Proxy :: Proxy 8))
+3
+</programlisting>
 </para>
 </sect2>
 
@@ -5684,6 +6816,21 @@
       with the class head.  Method signatures are not affected by that
       process.
     </para>
+
+  <sect2 id="coercible">
+  <title>The <literal>Coercible</literal> constraint</title>
+  <para>
+  The constraint <literal>Coercible t1 t2</literal> is similar to <literal>t1 ~
+  t2</literal>, but denotes representational equality between
+  <literal>t1</literal> and <literal>t2</literal> in the sense of Roles
+  (<xref linkend="roles"/>). It is exported by
+  <ulink url="&libraryBaseLocation;/Data-Coerce.html"><literal>Data.Coerce</literal></ulink>,
+  which also contains the documentation. More details and discussion can be found in
+  the paper
+  <ulink href="http://www.cis.upenn.edu/~eir/papers/2014/coercible/coercible.pdf">Safe Coercions"</ulink>.
+  </para>
+  </sect2>
+
   </sect1>
 
 <sect1 id="constraint-kind">
@@ -5724,9 +6871,10 @@
 			type <literal>(Show a, Ord a)</literal> is of kind <literal>Constraint</literal>.
 		</listitem>
 		<listitem>
-			Anything whose form is not yet know, but the user has declared to have kind <literal>Constraint</literal>.
-			So for example <literal>type Foo (f :: * -> Constraint) = forall b. f b => b -> b</literal> is allowed, as
-			well as examples involving type families:
+			Anything whose form is not yet know, but the user has declared to have kind <literal>Constraint</literal>
+			(for which they need to import it from <literal>GHC.Exts</literal>).  So for example
+			<literal>type Foo (f :: * -> Constraint) = forall b. f b => b -> b</literal> is allowed, as well as
+			examples involving type families:
 <programlisting>
 type family Typ a b :: Constraint
 type instance Typ Int  b = Show b
@@ -5809,7 +6957,7 @@
 The <option>-XFlexibleContexts</option> flag lifts the Haskell 98 restriction
 that the type-class constraints in a type signature must have the
 form <emphasis>(class type-variable)</emphasis> or
-<emphasis>(class (type-variable type-variable ...))</emphasis>.
+<emphasis>(class (type-variable type1 type2 ... typen))</emphasis>.
 With <option>-XFlexibleContexts</option>
 these type signatures are perfectly OK
 <programlisting>
@@ -5820,106 +6968,119 @@
 restriction on class declarations (<xref linkend="superclass-rules"/>) and instance declarations
 (<xref linkend="instance-rules"/>).
 </para>
+</sect2>
 
-<para>
-GHC imposes the following restrictions on the constraints in a type signature.
-Consider the type:
+<sect2 id="ambiguity"><title>Ambiguous types and the ambiguity check</title>
 
+<para>
+Each user-written type signature is subjected to an
+<emphasis>ambiguity check</emphasis>.  
+The ambiguity check rejects functions that can never be called; for example:
 <programlisting>
-  forall tv1..tvn (c1, ...,cn) => type
+   f :: C a => Int
 </programlisting>
-
-(Here, we write the "foralls" explicitly, although the Haskell source
-language omits them; in Haskell 98, all the free type variables of an
-explicit source-language type signature are universally quantified,
-except for the class type variables in a class declaration.  However,
-in GHC, you can give the foralls if you want.  See <xref linkend="explicit-foralls"/>).
+The idea is there can be no legal calls to <literal>f</literal> because every call will
+give rise to an ambiguous constraint.  
+Indeed, the <emphasis>only</emphasis> purpose of the
+ambiguity check is to report functions that cannot possibly be called.
+We could soundly omit the
+ambiguity check on type signatures entirely, at the expense of
+delaying ambiguity errors to call sites.  Indeed, the language extension
+<option>-XAllowAmbiguousTypes</option> switches off the ambiguity check.
 </para>
-
-<para>
-
-<orderedlist>
-<listitem>
-
 <para>
- <emphasis>Each universally quantified type variable
-<literal>tvi</literal> must be reachable from <literal>type</literal></emphasis>.
-
-A type variable <literal>a</literal> is "reachable" if it appears
-in the same constraint as either a type variable free in
-<literal>type</literal>, or another reachable type variable.
-A value with a type that does not obey
-this reachability restriction cannot be used without introducing
-ambiguity; that is why the type is rejected.
-Here, for example, is an illegal type:
-
-
+Ambiguity can be subtle.  Consider this example which uses functional dependencies:
 <programlisting>
-  forall a. Eq a => Int
+   class D a b | a -> b where ..
+   h :: D Int b => Int 
 </programlisting>
-
-
-When a value with this type was used, the constraint <literal>Eq tv</literal>
-would be introduced where <literal>tv</literal> is a fresh type variable, and
-(in the dictionary-translation implementation) the value would be
-applied to a dictionary for <literal>Eq tv</literal>.  The difficulty is that we
-can never know which instance of <literal>Eq</literal> to use because we never
-get any more information about <literal>tv</literal>.
-</para>
-<para>
-Note
-that the reachability condition is weaker than saying that <literal>a</literal> is
-functionally dependent on a type variable free in
-<literal>type</literal> (see <xref
-linkend="functional-dependencies"/>).  The reason for this is there
-might be a "hidden" dependency, in a superclass perhaps.  So
-"reachable" is a conservative approximation to "functionally dependent".
-For example, consider:
+The <literal>Int</literal> may well fix <literal>b</literal> at the call site, so that signature should
+not be rejected.  Moreover, the dependencies might be hidden. Consider
 <programlisting>
-  class C a b | a -> b where ...
-  class C a b => D a b where ...
-  f :: forall a b. D a b => a -> a
+   class X a b where ...
+   class D a b | a -> b where ...
+   instance D a b => X [a] b where...
+   h :: X a b => a -> a
 </programlisting>
-This is fine, because in fact <literal>a</literal> does functionally determine <literal>b</literal>
-but that is not immediately apparent from <literal>f</literal>'s type.
+Here <literal>h</literal>'s type looks ambiguous in <literal>b</literal>, but here's a legal call:
+<programlisting>
+   ...(h [True])...
+</programlisting>
+That gives rise to a <literal>(X [Bool] beta)</literal> constraint, and using the
+instance means we need <literal>(D Bool beta)</literal> and that 
+fixes <literal>beta</literal> via <literal>D</literal>'s
+fundep!
 </para>
-</listitem>
-<listitem>
-
 <para>
- <emphasis>Every constraint <literal>ci</literal> must mention at least one of the
-universally quantified type variables <literal>tvi</literal></emphasis>.
-
-For example, this type is OK because <literal>C a b</literal> mentions the
-universally quantified type variable <literal>b</literal>:
-
-
+Behind all these special cases there is a simple guiding principle. 
+Consider
 <programlisting>
-  forall a. C a b => burble
-</programlisting>
+  f :: <replaceable>type</replaceable>
+  f = ...blah...
 
+  g :: <replaceable>type</replaceable>
+  g = f
+</programlisting>
+You would think that the definition of <literal>g</literal> would surely typecheck!
+After all <literal>f</literal> has exactly the same type, and <literal>g=f</literal>. 
+But in fact <literal>f</literal>'s type
+is instantiated and the instantiated constraints are solved against
+the constraints bound by <literal>g</literal>'s signature.  So, in the case an ambiguous type, solving will fail.
+For example, consider the earlier definition <literal>f :: C a => Int</literal>:
+<programlisting>
+  f :: C a => Int
+  f = ...blah...
 
-The next type is illegal because the constraint <literal>Eq b</literal> does not
-mention <literal>a</literal>:
+  g :: C a => Int
+  g = f
+</programlisting>
+In <literal>g</literal>'s definition,
+we'll instantiate to <literal>(C alpha)</literal> and try to
+deduce <literal>(C alpha)</literal> from <literal>(C a)</literal>,
+and fail.
+</para>
+<para>
+So in fact we use this as our <emphasis>definition</emphasis> of ambiguity: a type
+<literal><replaceable>ty</replaceable></literal> is
+ambiguious if and only if <literal>((undefined :: <replaceable>ty</replaceable>)
+:: <replaceable>ty</replaceable>)</literal> would fail to typecheck.  We use a
+very similar test for <emphasis>inferred</emphasis> types, to ensure that they too are
+unambiguous.
+</para>
+<para><emphasis>Switching off the ambiguity check.</emphasis>
+Even if a function is has an ambiguous type according the "guiding principle",
+it is possible that the function is callable.  For example:
+<programlisting>
+  class D a b where ...
+  instance D Bool b where ...
 
+  strange :: D a b => a -> a
+  strange = ...blah...
 
+  foo = strange True
+</programlisting>
+Here <literal>strange</literal>'s type is ambiguous, but the call in <literal>foo</literal>
+is OK because it gives rise to a constraint <literal>(D Bool beta)</literal>, which is
+soluble by the <literal>(D Bool b)</literal> instance.  So the language extension
+<option>-XAllowAmbiguousTypes</option> allows you to switch off the ambiguity check.
+But even with ambiguity checking switched off, GHC will complain about a function
+that can <emphasis>never</emphasis> be called, such as this one:
 <programlisting>
-  forall a. Eq b => burble
+  f :: (Int ~ Bool) => a -> a
 </programlisting>
-
-
-The reason for this restriction is milder than the other one.  The
-excluded types are never useful or necessary (because the offending
-context doesn't need to be witnessed at this point; it can be floated
-out).  Furthermore, floating them out increases sharing. Lastly,
-excluding them is a conservative choice; it leaves a patch of
-territory free in case we need it later.
-
 </para>
-</listitem>
-
-</orderedlist>
 
+<para>
+<emphasis>A historical note.</emphasis>
+GHC used to impose some more restrictive and less principled conditions
+on type signatures. For type type
+<literal>forall tv1..tvn (c1, ...,cn) => type</literal>
+GHC used to require (a) that each universally quantified type variable
+<literal>tvi</literal> must be "reachable" from <literal>type</literal>, 
+and (b) that every constraint <literal>ci</literal> mentions at least one of the
+universally quantified type variables <literal>tvi</literal>.
+These ad-hoc restrictions are completely subsumed by the new ambiguity check.
+<emphasis>End of historical note.</emphasis>
 </para>
 
 </sect2>
@@ -5932,9 +7093,7 @@
 J Lewis, MB Shields, E Meijer, J Launchbury,
 27th ACM Symposium on Principles of Programming Languages (POPL'00),
 Boston, Jan 2000.
-</para>
-
-<para>(Most of the following, still rather incomplete, documentation is
+(Most of the following, still rather incomplete, documentation is
 due to Jeff Lewis.)</para>
 
 <para>Implicit parameter support is enabled with the option
@@ -6151,183 +7310,6 @@
 </sect3>
 </sect2>
 
-    <!--   ======================= COMMENTED OUT ========================
-
-    We intend to remove linear implicit parameters, so I'm at least removing
-    them from the 6.6 user manual
-
-<sect2 id="linear-implicit-parameters">
-<title>Linear implicit parameters</title>
-<para>
-Linear implicit parameters are an idea developed by Koen Claessen,
-Mark Shields, and Simon PJ.  They address the long-standing
-problem that monads seem over-kill for certain sorts of problem, notably:
-</para>
-<itemizedlist>
-<listitem> <para> distributing a supply of unique names </para> </listitem>
-<listitem> <para> distributing a supply of random numbers </para> </listitem>
-<listitem> <para> distributing an oracle (as in QuickCheck) </para> </listitem>
-</itemizedlist>
-
-<para>
-Linear implicit parameters are just like ordinary implicit parameters,
-except that they are "linear"; that is, they cannot be copied, and
-must be explicitly "split" instead.  Linear implicit parameters are
-written '<literal>%x</literal>' instead of '<literal>?x</literal>'.
-(The '/' in the '%' suggests the split!)
-</para>
-<para>
-For example:
-<programlisting>
-    import GHC.Exts( Splittable )
-
-    data NameSupply = ...
-
-    splitNS :: NameSupply -> (NameSupply, NameSupply)
-    newName :: NameSupply -> Name
-
-    instance Splittable NameSupply where
-	split = splitNS
-
-
-    f :: (%ns :: NameSupply) => Env -> Expr -> Expr
-    f env (Lam x e) = Lam x' (f env e)
-		    where
-		      x'   = newName %ns
-		      env' = extend env x x'
-    ...more equations for f...
-</programlisting>
-Notice that the implicit parameter %ns is consumed
-<itemizedlist>
-<listitem> <para> once by the call to <literal>newName</literal> </para> </listitem>
-<listitem> <para> once by the recursive call to <literal>f</literal> </para></listitem>
-</itemizedlist>
-</para>
-<para>
-So the translation done by the type checker makes
-the parameter explicit:
-<programlisting>
-    f :: NameSupply -> Env -> Expr -> Expr
-    f ns env (Lam x e) = Lam x' (f ns1 env e)
-		       where
-	 		 (ns1,ns2) = splitNS ns
-			 x' = newName ns2
-			 env = extend env x x'
-</programlisting>
-Notice the call to 'split' introduced by the type checker.
-How did it know to use 'splitNS'?  Because what it really did
-was to introduce a call to the overloaded function 'split',
-defined by the class <literal>Splittable</literal>:
-<programlisting>
-	class Splittable a where
-	  split :: a -> (a,a)
-</programlisting>
-The instance for <literal>Splittable NameSupply</literal> tells GHC how to implement
-split for name supplies.  But we can simply write
-<programlisting>
-	g x = (x, %ns, %ns)
-</programlisting>
-and GHC will infer
-<programlisting>
-	g :: (Splittable a, %ns :: a) => b -> (b,a,a)
-</programlisting>
-The <literal>Splittable</literal> class is built into GHC.  It's exported by module
-<literal>GHC.Exts</literal>.
-</para>
-<para>
-Other points:
-<itemizedlist>
-<listitem> <para> '<literal>?x</literal>' and '<literal>%x</literal>'
-are entirely distinct implicit parameters: you
-  can use them together and they won't interfere with each other. </para>
-</listitem>
-
-<listitem> <para> You can bind linear implicit parameters in 'with' clauses. </para> </listitem>
-
-<listitem> <para>You cannot have implicit parameters (whether linear or not)
-  in the context of a class or instance declaration. </para></listitem>
-</itemizedlist>
-</para>
-
-<sect3><title>Warnings</title>
-
-<para>
-The monomorphism restriction is even more important than usual.
-Consider the example above:
-<programlisting>
-    f :: (%ns :: NameSupply) => Env -> Expr -> Expr
-    f env (Lam x e) = Lam x' (f env e)
-		    where
-		      x'   = newName %ns
-		      env' = extend env x x'
-</programlisting>
-If we replaced the two occurrences of x' by (newName %ns), which is
-usually a harmless thing to do, we get:
-<programlisting>
-    f :: (%ns :: NameSupply) => Env -> Expr -> Expr
-    f env (Lam x e) = Lam (newName %ns) (f env e)
-		    where
-		      env' = extend env x (newName %ns)
-</programlisting>
-But now the name supply is consumed in <emphasis>three</emphasis> places
-(the two calls to newName,and the recursive call to f), so
-the result is utterly different.  Urk!  We don't even have
-the beta rule.
-</para>
-<para>
-Well, this is an experimental change.  With implicit
-parameters we have already lost beta reduction anyway, and
-(as John Launchbury puts it) we can't sensibly reason about
-Haskell programs without knowing their typing.
-</para>
-
-</sect3>
-
-<sect3><title>Recursive functions</title>
-<para>Linear implicit parameters can be particularly tricky when you have a recursive function
-Consider
-<programlisting>
-        foo :: %x::T => Int -> [Int]
-        foo 0 = []
-        foo n = %x : foo (n-1)
-</programlisting>
-where T is some type in class Splittable.</para>
-<para>
-Do you get a list of all the same T's or all different T's
-(assuming that split gives two distinct T's back)?
-</para><para>
-If you supply the type signature, taking advantage of polymorphic
-recursion, you get what you'd probably expect.  Here's the
-translated term, where the implicit param is made explicit:
-<programlisting>
-        foo x 0 = []
-        foo x n = let (x1,x2) = split x
-                  in x1 : foo x2 (n-1)
-</programlisting>
-But if you don't supply a type signature, GHC uses the Hindley
-Milner trick of using a single monomorphic instance of the function
-for the recursive calls. That is what makes Hindley Milner type inference
-work.  So the translation becomes
-<programlisting>
-        foo x = let
-                  foom 0 = []
-                  foom n = x : foom (n-1)
-                in
-                foom
-</programlisting>
-Result: 'x' is not split, and you get a list of identical T's.  So the
-semantics of the program depends on whether or not foo has a type signature.
-Yikes!
-</para><para>
-You may say that this is a good reason to dislike linear implicit parameters
-and you'd be right.  That is why they are an experimental feature.
-</para>
-</sect3>
-
-</sect2>
-
-================ END OF Linear Implicit Parameters commented out -->
-
 <sect2 id="kinding">
 <title>Explicitly-kinded quantification</title>
 
@@ -6428,20 +7410,12 @@
 it has rank-2 types on the left of a function arrow.
 </para>
 <para>
-GHC has three flags to control higher-rank types:
-<itemizedlist>
-<listitem><para>
- <option>-XPolymorphicComponents</option>: data constructors (only) can have polymorphic argument types.
-</para></listitem>
-<listitem><para>
- <option>-XRank2Types</option>: any function (including data constructors) can have a rank-2 type.
-</para></listitem>
-<listitem><para>
- <option>-XRankNTypes</option>: any function (including data constructors) can have an arbitrary-rank type.
-That is,  you can nest <literal>forall</literal>s
+The language option <option>-XRankNTypes</option> (which implies <option>-XExplicitForAll</option>, <xref linkend="explicit-foralls"/>)
+enables higher-rank types.
+That is, you can nest <literal>forall</literal>s
 arbitrarily deep in function arrows.
-In particular, a forall-type (also called a "type scheme"),
-including an operational type class context, is legal:
+For example, a forall-type (also called a "type scheme"),
+including a type-class context, is legal:
 <itemizedlist>
 <listitem> <para> On the left or right (see <literal>f4</literal>, for example)
 of a function arrow </para> </listitem>
@@ -6451,10 +7425,19 @@
 <listitem> <para> As the type of an implicit parameter </para> </listitem>
 <listitem> <para> In a pattern type signature (see <xref linkend="scoped-type-variables"/>) </para> </listitem>
 </itemizedlist>
-</para></listitem>
-</itemizedlist>
+The <option>-XRankNTypes</option> option is also required for any
+type with a <literal>forall</literal> or
+context to the right of an arrow (e.g. <literal>f :: Int -> forall a. a->a</literal>, or
+<literal>g :: Int -> Ord a => a -> a</literal>).  Such types are technically rank 1, but
+are clearly not Haskell-98, and an extra flag did not seem worth the bother.
 </para>
 
+<para>
+The obselete language options <option>-XPolymorphicComponents</option> and <option>-XRank2Types</option>
+are synonyms for <option>-XRankNTypes</option>.  They used to specify finer distinctions that
+GHC no longer makes.  (They should really elicit a deprecation warning, but they don't, purely
+to avoid the need to library authors to change their old flags specifciations.)
+</para>
 
 <sect3 id="univ">
 <title>Examples
@@ -6501,7 +7484,11 @@
 constructor <function>MkSwizzle</function>, an implicit "<literal>forall a.</literal>" is
 prefixed to the argument type.  The implicit <literal>forall</literal>
 quantifies all type variables that are not already in scope, and are
-mentioned in the type quantified over.
+mentioned in the type quantified over. (Arguably, it would be better
+to <emphasis>require</emphasis> explicit quantification on constructor arguments
+where that is what is wanted.
+See <ulink url="http://ghc.haskell.org/trac/ghc/ticket/4426">Trac #4426</ulink>.)
+
 </para>
 
 <para>
@@ -6509,19 +7496,17 @@
 types too.  So if you write this:
 
 <programlisting>
-  data T a = MkT (Either a b) (b -> b)
+  f :: (a -> a) -> a
 </programlisting>
 
 it's just as if you had written this:
 
 <programlisting>
-  data T a = MkT (forall b. Either a b) (forall b. b -> b)
+  f :: forall a. (a -> a) -> a
 </programlisting>
 
-That is, since the type variable <literal>b</literal> isn't in scope, it's
-implicitly universally quantified.  (Arguably, it would be better
-to <emphasis>require</emphasis> explicit quantification on constructor arguments
-where that is what is wanted.  Feedback welcomed.)
+That is, since the type variable <literal>a</literal> isn't in scope, it's
+implicitly universally quantified.
 </para>
 
 <para>
@@ -6738,9 +7723,6 @@
 <para>Lexically-scoped type variables are enabled by
 <option>-XScopedTypeVariables</option>.  This flag implies <option>-XRelaxedPolyRec</option>.
 </para>
-<para>Note: GHC 6.6 contains substantial changes to the way that scoped type
-variables work, compared to earlier releases.  Read this section
-carefully!</para>
 
 <sect3>
 <title>Overview</title>
@@ -7003,8 +7985,25 @@
 
 </sect2>
 
+<sect2>
+<title>Bindings and generalisation</title>
 
-<sect2 id="typing-binds">
+<sect3 id="monomorphism">
+<title>Switching off the dreaded Monomorphism Restriction</title>
+          <indexterm><primary><option>-XNoMonomorphismRestriction</option></primary></indexterm>
+
+<para>Haskell's monomorphism restriction (see
+<ulink url="http://www.haskell.org/onlinereport/decls.html#sect4.5.5">Section
+4.5.5</ulink>
+of the Haskell Report)
+can be completely switched off by
+<option>-XNoMonomorphismRestriction</option>. Since GHC 7.8.1, the monomorphism
+restriction is switched off by default in GHCi.
+</para>
+</sect3>
+
+
+<sect3 id="typing-binds">
 <title>Generalised typing of mutually recursive bindings</title>
 
 <para>
@@ -7065,25 +8064,154 @@
   g y = (y &lt;= y) || f True
 </programlisting>
 </para>
+</sect3>
+
+<sect3 id="mono-local-binds">
+<title>Let-generalisation</title>
+<para>
+An ML-style language usually generalises the type of any let-bound or where-bound variable,
+so that it is as polymorphic as possible.
+With the flag <option>-XMonoLocalBinds</option> GHC implements a slightly more conservative policy:
+<emphasis>it generalises only "closed" bindings</emphasis>.
+A binding is considered "closed" if either
+<itemizedlist>
+<listitem><para>It is one of the top-level bindings of a module, or </para></listitem>
+<listitem><para>Its free variables are all themselves closed</para></listitem>
+</itemizedlist>
+For example, consider
+<programlisting>
+f x = x + 1
+g x = let h y = f y * 2
+          k z = z+x
+      in  h x + k x
+</programlisting>
+Here <literal>f</literal> and <literal>g</literal> are closed because they are bound at top level.
+Also <literal>h</literal> is closed because its only free variable <literal>f</literal> is closed.
+But <literal>k</literal> is not closed because it mentions <literal>x</literal> which is locally bound.
+Another way to think of it is this: all closed bindings <literal>could</literal> be defined at top level.
+(In the example, we could move <literal>h</literal> to top level.)
+</para><para>
+All of this applies only to bindings that lack an explicit type signature, so that GHC has to
+infer its type.  If you supply a type signature, then that fixes type of the binding, end of story.
+</para><para>
+The rationale for this more conservative strategy is given in
+<ulink url="http://research.microsoft.com/~simonpj/papers/constraints/index.htm">the papers</ulink> "Let should not be generalised" and "Modular type inference with local assumptions", and
+a related <ulink url="http://ghc.haskell.org/trac/ghc/blog/LetGeneralisationInGhc7">blog post</ulink>.
+</para><para>
+The flag <option>-XMonoLocalBinds</option> is implied by <option>-XTypeFamilies</option> and <option>-XGADTs</option>.  You can switch it off again
+with <option>-XNoMonoLocalBinds</option> but type inference becomes less predicatable if you do so. (Read the papers!)
+</para>
+</sect3>
 </sect2>
 
-<sect2 id="mono-local-binds">
-<title>Monomorphic local bindings</title>
+</sect1>
+<!-- ==================== End of type system extensions =================  -->
+
+<sect1 id="typed-holes">
+<title>Typed Holes</title>
+
+<para>Typed hole support is enabled with the option
+<option>-fwarn-typed-holes</option>, which is enabled by default.</para>
+
 <para>
-We are actively thinking of simplifying GHC's type system, by <emphasis>not generalising local bindings</emphasis>.
-The rationale is described in the paper
-<ulink url="http://research.microsoft.com/~simonpj/papers/constraints/index.htm">Let should not be generalised</ulink>.
+This option allows special placeholders, written with a leading underscore (e.g. "<literal>_</literal>",
+"<literal>_foo</literal>", "<literal>_bar</literal>"), to be used as an expression.
+During compilation these holes will generate an error message describing what type is expected there,
+information about the origin of any free type variables, and a list of local bindings
+that might help fill the hole with actual code.
 </para>
+
 <para>
-The experimental new behaviour is enabled by the flag <option>-XMonoLocalBinds</option>.  The effect is
-that local (that is, non-top-level) bindings without a type signature are not generalised at all.  You can
-think of it as an extreme (but much more predictable) version of the Monomorphism Restriction.
-If you supply a type signature, then the flag has no effect.
+The goal of the typed holes warning is not to change the type system, but to help with writing Haskell
+code. Typed holes can be used to obtain extra information from the type checker, which might otherwise be hard
+to get.
+Normally, using GHCi, users can inspect the (inferred) type signatures of all top-level bindings.
+However, this method is less convenient with terms which are not defined on top-level or
+inside complex expressions. Holes allow to check the type of the term you're about to write.
+</para>
+
+<para>
+Holes work together well with <link linkend="defer-type-errors">deferring type errors to runtime</link>:
+with <literal>-fdefer-type-errors</literal>, the error from a hole is also deferred, effctively making the hole
+typecheck just like <literal>undefined</literal>, but with the added benefit that it will show its warning message
+if it gets evaluated. This way, other parts of the code can still be executed and tested.
+</para>
+
+<para>
+For example, compiling the following module with GHC:
+<programlisting>
+f :: a -> a
+f x = _
+</programlisting>
+will fail with the following error:
+<programlisting>
+hole.hs:2:7:
+    Found hole `_' with type: a
+    Where: `a' is a rigid type variable bound by
+               the type signature for f :: a -> a at hole.hs:1:6
+    Relevant bindings include
+      f :: a -> a (bound at hole.hs:2:1)
+      x :: a (bound at hole.hs:2:3)
+    In the expression: _
+    In an equation for `f': f x = _
+</programlisting>
+</para>
+
+<para>
+Multiple typed holes can be used to find common type variables between expressions. For example:
+<programlisting>
+sum :: [Int] -> Int
+sum xs = foldr _f _z xs
+</programlisting>
+Shows:
+<programlisting>
+holes.hs:2:15:
+    Found hole `_f' with type: Int -> Int -> Int
+    In the first argument of `foldr', namely `_'
+    In the expression: foldr _a _b _c
+    In an equation for `sum': sum x = foldr _a _b _c
+
+holes.hs:2:17:
+    Found hole `_z' with type: Int
+    In the second argument of `foldr', namely `_'
+    In the expression: foldr _a _b _c
+    In an equation for `sum': sum x = foldr _a _b _c
+</programlisting>
+</para>
+
+<para>
+Unbound identifiers with the same name are never unified, even within the same function, but always printed individually.
+For example:
+<programlisting>
+cons = _x : _x
+</programlisting>
+results in the following errors:
+<programlisting>
+unbound.hs:1:8:
+    Found hole '_x' with type: a
+    Where: `a' is a rigid type variable bound by
+               the inferred type of cons :: [a] at unbound.hs:1:1
+    Relevant bindings include cons :: [a] (bound at unbound.hs:1:1)
+    In the first argument of `(:)', namely `_x'
+    In the expression: _x : _x
+    In an equation for `cons': cons = _x : _x
+
+unbound.hs:1:13:
+    Found hole '_x' with type: [a]
+    Arising from: an undeclared identifier `_x' at unbound.hs:1:13-14
+    Where: `a' is a rigid type variable bound by
+               the inferred type of cons :: [a] at unbound.hs:1:1
+    Relevant bindings include cons :: [a] (bound at unbound.hs:1:1)
+    In the second argument of `(:)', namely `_x'
+    In the expression: _x : _x
+    In an equation for `cons': cons = _x : _x
+</programlisting>
+This ensures that an unbound identifier is never reported with a too polymorphic type, like
+<literal>forall a. a</literal>, when used multiple times for types that can not be unified.
 </para>
-</sect2>
 
 </sect1>
-<!-- ==================== End of type system extensions =================  -->
+<!-- ==================== Deferring type errors =================  -->
 
 <sect1 id="defer-type-errors">
 <title>Deferring type errors to runtime</title>
@@ -7104,7 +8232,7 @@
   </para>
   <para>
     For more motivation and details please refer to the <ulink
-      url="http://hackage.haskell.org/trac/ghc/wiki/DeferErrorsToRuntime">HaskellWiki</ulink>
+      url="http://ghc.haskell.org/trac/ghc/wiki/DeferErrorsToRuntime">HaskellWiki</ulink>
     page or the <ulink
       url="http://research.microsoft.com/en-us/um/people/simonpj/papers/ext-f/">original
       paper</ulink>.
@@ -7151,7 +8279,7 @@
     In the expression: 1 == 'a'
     In the first argument of `fst', namely `(True, 1 == 'a')'
 </programlisting>
-Otherwise, in the common case of a simple type error such as 
+Otherwise, in the common case of a simple type error such as
 typing <literal>reverse True</literal> at the prompt, you would get a warning and then
 an immediately-following type error when the expression is evaluated.
   </para>
@@ -7218,9 +8346,7 @@
       constructions.  You need to use the flag
       <option>-XTemplateHaskell</option>
 	<indexterm><primary><option>-XTemplateHaskell</option></primary>
-      </indexterm>to switch these syntactic extensions on
-      (<option>-XTemplateHaskell</option> is no longer implied by
-      <option>-fglasgow-exts</option>).</para>
+      </indexterm>to switch these syntactic extensions on.</para>
 
 	<itemizedlist>
 	      <listitem><para>
@@ -7234,12 +8360,13 @@
 		  <itemizedlist>
 		    <listitem><para> an expression; the spliced expression must
 		    have type <literal>Q Exp</literal></para></listitem>
-		    <listitem><para> an type; the spliced expression must
-		    have type <literal>Q Typ</literal></para></listitem>
-		    <listitem><para> a list of top-level declarations; the spliced expression
+		    <listitem><para> a pattern; the spliced pattern must
+		    have type <literal>Q Pat</literal></para></listitem>
+		    <listitem><para> a type; the spliced expression must
+		    have type <literal>Q Type</literal></para></listitem>
+		    <listitem><para> a list of declarations; the spliced expression
                     must have type <literal>Q [Dec]</literal></para></listitem>
 		    </itemizedlist>
-            Note that pattern splices are not supported.
             Inside a splice you can only call functions defined in imported modules,
 	    not functions defined elsewhere in the same module.</para></listitem>
 
@@ -7257,6 +8384,36 @@
                              the quotation has type <literal>Q Pat</literal>.</para></listitem>
 		  </itemizedlist></para></listitem>
 
+	      <listitem>
+		<para>
+		  A <emphasis>typed</emphasis> expression splice is written
+		  <literal>$$x</literal>, where <literal>x</literal> is an
+		  identifier, or <literal>$$(...)</literal>, where the "..." is
+		  an arbitrary expression.
+		</para>
+		<para>
+		  A typed expression splice can occur in place of an
+		  expression; the spliced expression must have type <literal>Q
+		  (TExp a)</literal>
+		</para>
+	      </listitem>
+
+	      <listitem>
+		<para>
+		  A <emphasis>typed</emphasis> expression quotation is written
+		  as <literal>[|| ... ||]</literal>, or <literal>[e||
+		  ... ||]</literal>, where the "..." is an expression; if the
+		  "..." expression has type <literal>a</literal>, then the
+		  quotation has type <literal>Q (TExp a)</literal>.
+		</para>
+
+		<para>
+		  Values of type <literal>TExp a</literal> may be converted to
+		  values of type <literal>Exp</literal> using the function
+		  <literal>unType :: TExp a -> Exp</literal>.
+		</para>
+	      </listitem>
+
 	      <listitem><para>
 		  A quasi-quotation can appear in either a pattern context or an
 		  expression context and is also written in Oxford brackets:
@@ -7271,7 +8428,7 @@
 		  <itemizedlist>
 		    <listitem><para> <literal>'f</literal> has type <literal>Name</literal>, and names the function <literal>f</literal>.
 		  Similarly <literal>'C</literal> has type <literal>Name</literal> and names the data constructor <literal>C</literal>.
-		  In general <literal>'</literal><replaceable>thing</replaceable> 
+		  In general <literal>'</literal><replaceable>thing</replaceable>
                   interprets <replaceable>thing</replaceable> in an expression context.</para>
                     <para>A name whose second character is a single
                     quote (sadly) cannot be quoted in this way,
@@ -7312,13 +8469,117 @@
 </programlisting>
             This abbreviation makes top-level declaration slices quieter and less intimidating.
 	    </para></listitem>
+	    
+	    <listitem>
+	      <para>
+		Binders are lexically scoped. For example, consider the
+		following code, where a value <literal>g</literal> of type
+		<literal>Bool -> Q Pat</literal> is in scope, having been
+		imported from another module
+<programlisting>
+y :: Int
+y = 7
+
+f :: Int -> Int -> Int
+f n = \ $(g True) -> y+n
+</programlisting>
+                The <literal>y</literal> in the right-hand side of
+                <literal>f</literal> refers to the top-level <literal>y =
+                7</literal>, even if the pattern splice <literal>$(g
+                n)</literal> also generates a binder <literal>y</literal>.
+	      </para>
+
+	      <para>
+		Note that a pattern quasiquoter <emphasis>may</emphasis>
+		generate binders that scope over the right-hand side of a
+		definition because these binders are in scope lexically. For
+		example, given a quasiquoter <literal>haskell</literal> that
+		parses Haskell, in the following code, the <literal>y</literal>
+		in the right-hand side of <literal>f</literal> refers to the
+		<literal>y</literal> bound by the <literal>haskell</literal>
+		pattern quasiquoter, <emphasis>not</emphasis> the top-level
+		<literal>y = 7</literal>.
+<programlisting>
+y :: Int
+y = 7
+
+f :: Int -> Int -> Int
+f n = \ [haskell|y|] -> y+n
+</programlisting>
+	      </para>
+	    </listitem>
+	    <listitem>
+	      <para>
+		The type environment seen by <literal>reify</literal> includes
+		all the top-level declaration up to the end of the immediately
+		preceding <emphasis>declaration group</emphasis>, but no more.
+	      </para>
+
+	      <para>
+		A <emphasis>declaration group</emphasis> is the group of
+		declarations created by a top-level declaration splice, plus
+		those following it, down to but not including the next top-level
+		declaration splice. The first declaration group in a module
+		includes all top-level definitions down to but not including the
+		first top-level declaration splice.
+	      </para>
+
+
+	      <para>
+		Concretely, consider the following code
+<programlisting>
+module M where
+   import ...
+   f x = x
+   $(th1 4)
+   h y = k y y $(blah1)
+   $(th2 10)
+   w z = $(blah2)
+</programlisting>
+
+              In this example
+              <orderedlist>
+		<listitem>
+		  <para>
+		    A <literal>reify</literal> inside the splice <literal>$(th1
+		    ..)</literal> would see the definition of
+		    <literal>f</literal>.
+		  </para>
+		</listitem>
+		<listitem>
+		  <para>
+		    A <literal>reify</literal> inside the splice
+		    <literal>$(blah1)</literal> would see the definition of
+		    <literal>f</literal>, but would not see the definition of
+		    <literal>h</literal>.
+		  </para>
+		</listitem>
+		<listitem>
+		  <para>
+		    A <literal>reify</literal> inside the splice
+		    <literal>$(th2..)</literal> would see the definition of
+		    <literal>f</literal>, all the bindings created by
+		    <literal>$(th1..)</literal>, and the definition of
+		    <literal>h</literal>.
+		  </para>
+		</listitem>
+		<listitem>
+		  <para>
+		    A <literal>reify</literal> inside the splice
+		    <literal>$(blah2)</literal> would see the same definitions
+		    as the splice <literal>$(th2...)</literal>.
+		  </para>
+		</listitem>
+              </orderedlist>
+	      </para>
+	    </listitem>
 
 
 	</itemizedlist>
 (Compared to the original paper, there are many differences of detail.
 The syntax for a declaration splice uses "<literal>$</literal>" not "<literal>splice</literal>".
 The type of the enclosed expression must be  <literal>Q [Dec]</literal>, not  <literal>[Q Dec]</literal>.
-Pattern splices and quotations are not implemented.)
+Typed expression splices and quotations are supported.)
 
 </sect2>
 
@@ -7512,7 +8773,7 @@
 quoter function interpret <literal>"|~]"</literal> as <literal>"|]"</literal>.
 One way to implement this is to compose your quoter with a pre-processing pass to
 perform your escape conversion.  See the
-<ulink url="http://hackage.haskell.org/trac/ghc/ticket/5348">
+<ulink url="http://ghc.haskell.org/trac/ghc/ticket/5348">
 discussion in Trac</ulink> for details.
 </para></listitem>
 </itemizedlist>
@@ -7897,7 +9158,7 @@
 which is translated to
 <screen>
 arr (\ (x,y) -> if f x y then Left x else Right y) >>>
-        (arr (\x -> x+1) >>> f) ||| (arr (\y -> y+2) >>> g)
+        (arr (\x -> x+1) >>> g) ||| (arr (\y -> y+2) >>> h)
 </screen>
 Since the translation uses <function>|||</function>,
 the arrow concerned must belong to the <literal>ArrowChoice</literal> class.
@@ -7937,7 +9198,7 @@
 may also be used to build commands from commands.
 For example, the <literal>ArrowPlus</literal> class includes a combinator
 <programlisting>
-ArrowPlus a => (&lt;+>) :: a e c -> a e c -> a e c
+ArrowPlus a => (&lt;+>) :: a b c -> a b c -> a b c
 </programlisting>
 so we can use it to build commands:
 <programlisting>
@@ -7967,18 +9228,24 @@
                 y &lt;- term -&lt; ()
                 expr' -&lt; x - y)
 </programlisting>
+We are actually using <literal>&lt;+></literal> here with the more specific type
+<programlisting>
+ArrowPlus a => (&lt;+>) :: a (e,()) c -> a (e,()) c -> a (e,()) c
+</programlisting>
 It is essential that this operator be polymorphic in <literal>e</literal>
 (representing the environment input to the command
 and thence to its subcommands)
 and satisfy the corresponding naturality property
 <screen>
-arr k >>> (f &lt;+> g) = (arr k >>> f) &lt;+> (arr k >>> g)
+arr (first k) >>> (f &lt;+> g) = (arr (first k) >>> f) &lt;+> (arr (first k) >>> g)
 </screen>
 at least for strict <literal>k</literal>.
 (This should be automatic if you're not using <function>seq</function>.)
 This ensures that environments seen by the subcommands are environments
 of the whole command,
 and also allows the translation to safely trim these environments.
+(The second component of the input pairs can contain unnamed input values,
+as described in the next section.)
 The operator must also not use any variable defined within the current
 arrow abstraction.
 </para>
@@ -7986,7 +9253,7 @@
 <para>
 We could define our own operator
 <programlisting>
-untilA :: ArrowChoice a => a e () -> a e Bool -> a e ()
+untilA :: ArrowChoice a => a (e,s) () -> a (e,s) Bool -> a (e,s) ()
 untilA body cond = proc x ->
         b &lt;- cond -&lt; x
         if b then returnA -&lt; ()
@@ -8016,7 +9283,7 @@
 exception that occurred to the handler.
 Such an operator might have a type
 <screen>
-handleA :: ... => a e c -> a (e,Ex) c -> a e c
+handleA :: ... => a (e,s) c -> a (e,(Ex,s)) c -> a (e,s) c
 </screen>
 where <literal>Ex</literal> is the type of exceptions handled.
 You could then use this with arrow notation by writing a command
@@ -8031,22 +9298,24 @@
 we are talking about commands, and something different is going on.
 The input to the arrow represented by a command consists of values for
 the free local variables in the command, plus a stack of anonymous values.
-In all the prior examples, this stack was empty.
+In all the prior examples, we made no assumptions about this stack.
 In the second argument to <function>handleA</function>,
-this stack consists of one value, the value of the exception.
+the value of the exception has been added to the stack input to the handler.
 The command form of lambda merely gives this value a name.
 </para>
 
 <para>
 More concretely,
-the values on the stack are paired to the right of the environment.
+the input to a command consists of a pair of an environment and a stack.
+Each value on the stack is paired with the remainder of the stack,
+with an empty stack being <literal>()</literal>.
 So operators like <function>handleA</function> that pass
 extra inputs to their subcommands can be designed for use with the notation
-by pairing the values with the environment in this way.
+by placing the values on the stack paired with the environment in this way.
 More precisely, the type of each argument of the operator (and its result)
 should have the form
 <screen>
-a (...(e,t1), ... tn) t
+a (e, (t1, ... (tn, ())...)) t
 </screen>
 where <replaceable>e</replaceable> is a polymorphic variable
 (representing the environment)
@@ -8058,9 +9327,9 @@
 However the arrows involved need not be the same.
 Here are some more examples of suitable operators:
 <screen>
-bracketA :: ... => a e b -> a (e,b) c -> a (e,c) d -> a e d
-runReader :: ... => a e c -> a' (e,State) c
-runState :: ... => a e c -> a' (e,State) (c,State)
+bracketA :: ... => a (e,s) b -> a (e,(b,s)) c -> a (e,(c,s)) d -> a (e,s) d
+runReader :: ... => a (e,s) c -> a' (e,(State,s)) c
+runState :: ... => a (e,s) c -> a' (e,(State,s)) (c,State)
 </screen>
 We can supply the extra input required by commands built with the last two
 by applying them to ordinary expressions, as in
@@ -8082,16 +9351,16 @@
 though the results would be somewhat clumsy.
 For example, we could simulate <literal>do</literal>-notation by defining
 <programlisting>
-bind :: Arrow a => a e b -> a (e,b) c -> a e c
+bind :: Arrow a => a (e,s) b -> a (e,(b,s)) c -> a (e,s) c
 u `bind` f = returnA &amp;&amp;&amp; u >>> f
 
-bind_ :: Arrow a => a e b -> a e c -> a e c
+bind_ :: Arrow a => a (e,s) b -> a (e,s) c -> a (e,s) c
 u `bind_` f = u `bind` (arr fst >>> f)
 </programlisting>
 We could simulate <literal>if</literal> by defining
 <programlisting>
-cond :: ArrowChoice a => a e b -> a e b -> a (e,Bool) b
-cond f g = arr (\ (e,b) -> if b then Left e else Right e) >>> f ||| g
+cond :: ArrowChoice a => a (e,s) b -> a (e,s) b -> a (e,(Bool,s)) b
+cond f g = arr (\ (e,(b,s)) -> if b then Left (e,s) else Right (e,s)) >>> f ||| g
 </programlisting>
 </para>
 
@@ -8116,6 +9385,14 @@
 </para>
 </listitem>
 
+<listitem>
+<para>In the paper and the previous implementation,
+values on the stack were paired to the right of the environment
+in a single argument,
+but now the environment and stack are separate arguments.
+</para>
+</listitem>
+
 </itemizedlist>
 
 </sect2>
@@ -8174,7 +9451,7 @@
 patterns</emphasis>, written <literal>!<replaceable>pat</replaceable></literal>.
 Bang patterns are under consideration for Haskell Prime.
 The <ulink
-url="http://hackage.haskell.org/trac/haskell-prime/wiki/BangPatterns">Haskell
+url="http://ghc.haskell.org/trac/haskell-prime/wiki/BangPatterns">Haskell
 prime feature description</ulink> contains more discussion and examples
 than the material below.
 </para>
@@ -8422,7 +9699,9 @@
 <literal>e</literal>.  You can also disable assertions using the
       <option>-fignore-asserts</option>
       option<indexterm><primary><option>-fignore-asserts</option></primary>
-      </indexterm>.</para>
+      </indexterm>.  The option <option>-fno-ignore-asserts</option> allows
+enabling assertions even when optimisation is turned on.
+</para>
 
 <para>
 Assertion failures can be caught, see the documentation for the
@@ -8502,7 +9781,7 @@
 
       <para>Every language extension can also be turned into a command-line flag
 	by prefixing it with "<literal>-X</literal>"; for example <option>-XForeignFunctionInterface</option>.
-	(Similarly, all "<literal>-X</literal>" flags can be written as <literal>LANGUAGE</literal> pragmas.
+	(Similarly, all "<literal>-X</literal>" flags can be written as <literal>LANGUAGE</literal> pragmas.)
       </para>
 
       <para>A list of all supported language extensions can be obtained by invoking
@@ -8592,8 +9871,9 @@
 	</listitem>
       </itemizedlist>
       Warnings and deprecations are not reported for
-      (a) uses within the defining module, and
-      (b) uses in an export list.
+      (a) uses within the defining module,
+      (b) defining a method in a class instance, and
+      (c) uses in an export list.
       The latter reduces spurious complaints within a library
       in which one module gathers together and re-exports
       the exports of several others.
@@ -8602,6 +9882,43 @@
       <option>-fno-warn-warnings-deprecations</option>.</para>
     </sect2>
 
+    <sect2 id="minimal-pragma">
+      <title>MINIMAL pragma</title>
+      <indexterm><primary>MINIMAL</primary></indexterm>
+      <para>The MINIMAL pragma is used to specify the minimal complete definition of a class. I.e. specify which methods must be implemented by all instances. If an instance does not satisfy the minimal complete definition, then a warning is generated.
+      This can be useful when a class has methods with circular defaults. For example
+      </para>
+<programlisting>
+class Eq a where
+    (==) :: a -> a -> Bool
+    (/=) :: a -> a -> Bool
+    x == y = not (x /= y)
+    x /= y = not (x == y)
+    {-# MINIMAL (==) | (/=) #-}
+</programlisting>
+      <para>Without the MINIMAL pragma no warning would be generated for an instance that implements neither method.
+      </para>
+      <para>The syntax for minimal complete definition is:</para>
+<screen>
+mindef ::= name
+        |  '(' mindef ')'
+        |  mindef '|' mindef
+        |  mindef ',' mindef
+</screen>
+      <para>A vertical bar denotes disjunction, i.e. one of the two sides is required.
+      A comma denotes conjunction, i.e. both sides are required.
+      Conjunction binds stronger than disjunction.</para>
+      <para>
+      If no MINIMAL pragma is given in the class declaration, it is just as if 
+      a pragma <literal>{-# MINIMAL op1, op2, ..., opn #-}</literal> was given, where
+      the <literal>opi</literal> are the methods 
+      (a) that lack a default method in the class declaration, and 
+      (b) whose name that does not start with an underscore  
+      (c.f. <option>-fwarn-missing-methods</option>, <xref linkend="options-sanity"/>).
+      </para>
+      <para>This warning can be turned off with the flag <option>-fno-warn-missing-methods</option>.</para>
+    </sect2>
+
     <sect2 id="inline-noinline-pragma">
       <title>INLINE and NOINLINE pragmas</title>
 
@@ -8612,13 +9929,32 @@
 	<title>INLINE pragma</title>
 	<indexterm><primary>INLINE</primary></indexterm>
 
-	<para>GHC (with <option>-O</option>, as always) tries to
-        inline (or &ldquo;unfold&rdquo;) functions/values that are
-        &ldquo;small enough,&rdquo; thus avoiding the call overhead
-        and possibly exposing other more-wonderful optimisations.
-        Normally, if GHC decides a function is &ldquo;too
-        expensive&rdquo; to inline, it will not do so, nor will it
-        export that unfolding for other modules to use.</para>
+        <para>
+          GHC (with <option>-O</option>, as always) tries to inline
+          (or &ldquo;unfold&rdquo;) functions/values that are
+          &ldquo;small enough,&rdquo; thus avoiding the call overhead
+          and possibly exposing other more-wonderful optimisations.
+          GHC has a set of heuristics, tuned over a long period of
+          time using many benchmarks, that decide when it is
+          beneficial to inline a function at its call site.  The
+          heuristics are designed to inline functions when it appears
+          to be beneficial to do so, but without incurring excessive
+          code bloat.  If a function looks too big, it won't be
+          inlined, and functions larger than a certain size will not
+          even have their definition exported in the interface file.
+          Some of the thresholds that govern these heuristic decisions
+          can be changed using flags, see <xref linkend="options-f"
+          />.
+        </para>
+
+        <para>
+          Normally GHC will do a reasonable job of deciding by itself
+          when it is a good idea to inline a function.  However,
+          sometimes you might want to override the default behaviour.
+          For example, if you have a key function that is important to
+          inline because it leads to further optimisations, but GHC
+          judges it to be too big to inline.
+        </para>
 
         <para>The sledgehammer you can bring to bear is the
         <literal>INLINE</literal><indexterm><primary>INLINE
@@ -8729,11 +10065,6 @@
         and <literal>INLINABLE</literal> (<xref linkend="inlinable-pragma"/>)
         pragmas.</para>
 
-	<para>Note: the HBC compiler doesn't like <literal>INLINE</literal> pragmas,
-	  so if you want your code to be HBC-compatible you'll have to surround
-	  the pragma with C pre-processor directives
-	  <literal>#ifdef __GLASGOW_HASKELL__</literal>...<literal>#endif</literal>.</para>
-
       </sect3>
 
       <sect3 id="inlinable-pragma">
@@ -9139,10 +10470,6 @@
 The pragma must occur inside the <literal>where</literal> part
 of the instance declaration.
 </para>
-<para>
-Compatible with HBC, by the way, except perhaps in the placement
-of the pragma.
-</para>
 
 </sect2>
 
@@ -9172,7 +10499,7 @@
       conjunction with <option>-O</option><footnote>in fact, UNPACK
           has no effect without <option>-O</option>, for technical
           reasons
-      (see <ulink url="http://hackage.haskell.org/trac/ghc/ticket/5252">tick
+      (see <ulink url="http://ghc.haskell.org/trac/ghc/ticket/5252">tick
             5252</ulink>)</footnote>, in order to expose
       unfoldings to the compiler so the reboxing can be removed as
       often as possible.  For example:</para>
@@ -9321,6 +10648,12 @@
 notation "[~2]" is also accepted, meaning that the rule is active up to, but not including,
 Phase 2.
 </para>
+<para>
+Rules support the special phase-control notation "[~]", which means the rule is never active.
+This feature supports plugins (see <xref linkend="compiler-plugins"/>), by making it possible
+to define a RULE that is never run by GHC, but is nevertheless parsed, typechecked etc, so that
+it is available to the plugin.
+</para>
 </listitem>
 
 
@@ -9950,24 +11283,17 @@
 
 <sect1 id="special-ids">
 <title>Special built-in functions</title>
-<para>GHC has a few built-in functions with special behaviour.  These
-are now described in the module <ulink
-url="&libraryGhcPrimLocation;/GHC-Prim.html"><literal>GHC.Prim</literal></ulink>
-in the library documentation.
+<para>GHC has a few built-in functions with special behaviour.
 In particular:
 <itemizedlist>
 <listitem><para>
-<ulink url="&libraryGhcPrimLocation;/GHC-Prim.html#v%3Ainline"><literal>inline</literal></ulink>
+<ulink url="&libraryBaseLocation;/GHC-Exts.html#v%3Ainline"><literal>inline</literal></ulink>
 allows control over inlining on a per-call-site basis.
 </para></listitem>
 <listitem><para>
-<ulink url="&libraryGhcPrimLocation;/GHC-Prim.html#v%3Alazy"><literal>lazy</literal></ulink>
+<ulink url="&libraryBaseLocation;/GHC-Exts.html#v%3Alazy"><literal>lazy</literal></ulink>
 restrains the strictness analyser.
 </para></listitem>
-<listitem><para>
-<ulink url="&libraryGhcPrimLocation;/GHC-Prim.html#v%3AunsafeCoerce%23"><literal>unsafeCoerce#</literal></ulink>
-allows you to fool the type checker.
-</para></listitem>
 </itemizedlist>
 </para>
 </sect1>
@@ -10199,52 +11525,260 @@
 
 </sect1>
 
+<sect1 id="roles">
+<title>Roles
+<indexterm><primary>roles</primary></indexterm>
+</title>
 
-<sect1 id="monomorphism">
-<title>Control over monomorphism</title>
+<para>
+Using <option>-XGeneralizedNewtypeDeriving</option> (<xref
+linkend="generalized-newtype-deriving" />), a programmer can take existing
+instances of classes and "lift" these into instances of that class for a
+newtype. However, this is not always safe. For example, consider the following:
+</para>
 
-<para>GHC supports two flags that control the way in which generalisation is
-carried out at let and where bindings.
+<programlisting>
+  newtype Age = MkAge { unAge :: Int }
+
+  type family Inspect x
+  type instance Inspect Age = Int
+  type instance Inspect Int = Bool
+
+  class BadIdea a where
+    bad :: a -> Inspect a
+
+  instance BadIdea Int where
+    bad = (> 0)
+
+  deriving instance BadIdea Age    -- not allowed!
+</programlisting>
+
+<para>
+If the derived instance were allowed, what would the type of its method
+<literal>bad</literal> be? It would seem to be <literal>Age -> Inspect
+Age</literal>, which is equivalent to <literal>Age -> Int</literal>, according
+to the type family <literal>Inspect</literal>. Yet, if we simply adapt the
+implementation from the instance for <literal>Int</literal>, the implementation
+for <literal>bad</literal> produces a <literal>Bool</literal>, and we have trouble.
 </para>
 
+<para>
+The way to identify such situations is to have <emphasis>roles</emphasis> assigned
+to type variables of datatypes, classes, and type synonyms.</para>
+
+<para>
+Roles as implemented in GHC are a from a simplified version of the work
+described in <ulink
+url="http://www.seas.upenn.edu/~sweirich/papers/popl163af-weirich.pdf">Generative
+type abstraction and type-level computation</ulink>, published at POPL 2011.</para>
+
 <sect2>
-<title>Switching off the dreaded Monomorphism Restriction</title>
-          <indexterm><primary><option>-XNoMonomorphismRestriction</option></primary></indexterm>
+<title>Nominal, Representational, and Phantom</title>
 
-<para>Haskell's monomorphism restriction (see
-<ulink url="http://www.haskell.org/onlinereport/decls.html#sect4.5.5">Section
-4.5.5</ulink>
-of the Haskell Report)
-can be completely switched off by
-<option>-XNoMonomorphismRestriction</option>.
+<para>The goal of the roles system is to track when two types have the same
+underlying representation. In the example above, <literal>Age</literal> and
+<literal>Int</literal> have the same representation. But, the corresponding
+instances of <literal>BadIdea</literal> would <emphasis>not</emphasis> have
+the same representation, because the types of the implementations of
+<literal>bad</literal> would be different.</para>
+
+<para>Suppose we have two uses of a type constructor, each applied to the same
+parameters except for one difference. (For example, <literal>T Age Bool
+c</literal> and <literal>T Int Bool c</literal> for some type
+<literal>T</literal>.) The role of a type parameter says what we need to
+know about the two differing type arguments in order to know that the two
+outer types have the same representation (in the example, what must be true
+about <literal>Age</literal> and <literal>Int</literal> in order to show that
+<literal>T Age Bool c</literal> has the same representation as <literal>
+T Int Bool c</literal>).</para>
+
+<para>GHC supports three different roles for type parameters: nominal,
+representational, and phantom. If a type parameter has a nominal role, then
+the two types that differ must not actually differ at all: they must be
+identical (after type family reduction). If a type parameter has a
+representational role, then the two types must have the same representation.
+(If <literal>T</literal>'s first parameter's role is representational, then
+<literal>T Age Bool c</literal> and <literal>T Int Bool c</literal> would have
+the same representation, because <literal>Age</literal> and
+<literal>Int</literal> have the same representation.) If a type parameter has
+a phantom role, then we need no further information.</para>
+
+<para>Here are some examples:</para>
+
+<programlisting>
+  data Simple a = MkSimple a          -- a has role representational
+
+  type family F
+  type instance F Int = Bool
+  type instance F Age = Char
+
+  data Complex a = MkComplex (F a)    -- a has role nominal
+
+  data Phant a = MkPhant Bool         -- a has role phantom
+</programlisting>
+
+<para>The type <literal>Simple</literal> has its parameter at role
+representational, which is generally the most common case. <literal>Simple
+Age</literal> would have the same representation as <literal>Simple
+Int</literal>. The type <literal>Complex</literal>, on the other hand, has its
+parameter at role nominal, because <literal>Simple Age</literal> and
+<literal>Simple Int</literal> are <emphasis>not</emphasis> the same. Lastly,
+<literal>Phant Age</literal> and <literal>Phant Bool</literal> have the same
+representation, even though <literal>Age</literal> and <literal>Bool</literal>
+are unrelated.</para>
+
+</sect2>
+
+<sect2>
+<title>Role inference</title>
+
+<para>
+What role should a given type parameter should have? GHC performs role
+inference to determine the correct role for every parameter. It starts with a
+few base facts: <literal>(->)</literal> has two representational parameters;
+<literal>(~)</literal> has two nominal parameters; all type families'
+parameters are nominal; and all GADT-like parameters are nominal. Then, these
+facts are propagated to all places where these types are used. The default
+role for datatypes and synonyms is phantom; the default role for classes is
+nominal. Thus, for datatypes and synonyms, any parameters unused in the
+right-hand side (or used only in other types in phantom positions) will be
+phantom. Whenever a parameter is used in a representational position (that is,
+used as a type argument to a constructor whose corresponding variable is at
+role representational), we raise its role from phantom to representational.
+Similarly, when a parameter is used in a nominal position, its role is
+upgraded to nominal. We never downgrade a role from nominal to phantom or
+representational, or from representational to phantom. In this way, we infer
+the most-general role for each parameter.
+</para>
+
+<para>
+Classes have their roles default to nominal to promote coherence of class
+instances. If a <literal>C Int</literal> were stored in a datatype, it would
+be quite bad if that were somehow changed into a <literal>C Age</literal>
+somewhere, especially if another <literal>C Age</literal> had been declared!
 </para>
+
+<para>There is one particularly tricky case that should be explained:</para>
+
+<programlisting>
+  data Tricky a b = MkTricky (a b)
+</programlisting>
+
+<para>What should <literal>Tricky</literal>'s roles be? At first blush, it
+would seem that both <literal>a</literal> and <literal>b</literal> should be
+at role representational, since both are used in the right-hand side and
+neither is involved in a type family. However, this would be wrong, as the
+following example shows:</para>
+
+<programlisting>
+  data Nom a = MkNom (F a)   -- type family F from example above
+</programlisting>
+
+<para>Is <literal>Tricky Nom Age</literal> representationally equal to
+<literal>Tricky Nom Int</literal>? No! The former stores a
+<literal>Char</literal> and the latter stores a <literal>Bool</literal>. The
+solution to this is to require all parameters to type variables to have role
+nominal. Thus, GHC would infer role representational for <literal>a</literal>
+but role nominal for <literal>b</literal>.</para>
+
 </sect2>
 
 <sect2>
-<title>Monomorphic pattern bindings</title>
-          <indexterm><primary><option>-XNoMonoPatBinds</option></primary></indexterm>
-          <indexterm><primary><option>-XMonoPatBinds</option></primary></indexterm>
+<title>Role annotations
+<indexterm><primary>-XRoleAnnotations</primary></indexterm>
+</title>
+
+<para>
+Sometimes the programmer wants to constrain the inference process. For
+example, the base library contains the following definition:
+</para>
 
-	  <para> As an experimental change, we are exploring the possibility of
-	  making pattern bindings monomorphic; that is, not generalised at all.
-	    A pattern binding is a binding whose LHS has no function arguments,
-	    and is not a simple variable.  For example:
 <programlisting>
-  f x = x                    -- Not a pattern binding
-  f = \x -> x                -- Not a pattern binding
-  f :: Int -> Int = \x -> x  -- Not a pattern binding
+  data Ptr a = Ptr Addr#
+</programlisting>
 
-  (g,h) = e                  -- A pattern binding
-  (f) = e                    -- A pattern binding
-  [x] = e                    -- A pattern binding
+<para>
+The idea is that <literal>a</literal> should really be a representational
+parameter, but role inference assigns it to phantom. This makes some level of
+sense: a pointer to an <literal>Int</literal> really is representationally the
+same as a pointer to a <literal>Bool</literal>. But, that's not at all how we
+want to use <literal>Ptr</literal>s! So, we want to be able to say</para>
+
+<programlisting>
+  type role Ptr representational
+  data Ptr a = Ptr Addr#
 </programlisting>
-Experimentally, GHC now makes pattern bindings monomorphic <emphasis>by
-default</emphasis>.  Use <option>-XNoMonoPatBinds</option> to recover the
-standard behaviour.
+
+<para>
+The <literal>type role</literal> (enabled with
+<option>-XRoleAnnotations</option>) declaration forces the parameter
+<literal>a</literal> to be at role representational, not role phantom. GHC
+then checks the user-supplied roles to make sure they don't break any
+promises. It would be bad, for example, if the user could make
+<literal>BadIdea</literal>'s role be representational.
 </para>
+
+<para>As another example, we can consider a type <literal>Set a</literal> that
+represents a set of data, ordered according to <literal>a</literal>'s
+<literal>Ord</literal> instance. While it would generally be type-safe to
+consider <literal>a</literal> to be at role representational, it is possible
+that a <literal>newtype</literal> and its base type have
+<emphasis>different</emphasis> orderings encoded in their respective
+<literal>Ord</literal> instances. This would lead to misbehavior at runtime.
+So, the author of the <literal>Set</literal> datatype would like its parameter
+to be at role nominal. This would be done with a declaration</para>
+
+<programlisting>
+  type role Set nominal
+</programlisting>
+
+<para>Role annotations can also be used should a programmer wish to write
+a class with a representational (or phantom) role.</para>
+
+<para>The other place where role annotations may be necessary are in
+<literal>hs-boot</literal> files (<xref linkend="mutual-recursion"/>), where
+the right-hand sides of definitions can be omitted. As usual, the
+types/classes declared in an <literal>hs-boot</literal> file must match up
+with the definitions in the <literal>hs</literal> file, including down to the
+roles. The default role is representational in <literal>hs-boot</literal> files,
+corresponding to the common use case.</para>
+
+<para>
+Role annotations are allowed on data, newtype, and class declarations. A role
+annotation declaration starts with <literal>type role</literal> and is
+followed by one role listing for each parameter of the type. (This parameter
+count includes parameters implicitly specified by a kind signature in a
+GADT-style data or newtype declaration.) Each role listing is a role
+(<literal>nominal</literal>, <literal>representational</literal>, or
+<literal>phantom</literal>) or a <literal>_</literal>. Using a
+<literal>_</literal> says that GHC should infer that role. The role annotation
+may go anywhere in the same module as the datatype or class definition
+(much like a value-level type signature).
+Here are some examples:</para>
+
+<programlisting>
+  type role T1 _ phantom
+  data T1 a b = MkT1 a     -- b is not used; annotation is fine but unnecessary
+
+  type role T2 _ phantom
+  data T2 a b = MkT2 b     -- ERROR: b is used and cannot be phantom
+
+  type role T3 _ nominal
+  data T3 a b = MkT3 a     -- OK: nominal is higher than necessary, but safe
+
+  type role T4 nominal
+  data T4 a = MkT4 (a Int) -- OK, but nominal is higher than necessary
+
+  type role C representational _
+  class C a b where ...    -- OK, b will get a nominal role
+
+  type role X nominal
+  type X a = ...           -- ERROR: role annotations not allowed for type synonyms
+</programlisting>
+
 </sect2>
-</sect1>
 
+</sect1>
 
 <!-- Emacs stuff:
      ;;; Local Variables: ***
diff -urd 7.6.3-original/intro.xml original/intro.xml
--- 7.6.3-original/intro.xml	2014-06-27 09:19:06.085241036 +0900
+++ original/intro.xml	2014-04-10 22:34:21.000000000 +0900
@@ -53,7 +53,7 @@
 
     <para>Alternatively, if you want to build GHC yourself, head on
       over to the
-      <ulink url="http://hackage.haskell.org/trac/ghc/wiki/Building">GHC
+      <ulink url="http://ghc.haskell.org/trac/ghc/wiki/Building">GHC
         Building Guide</ulink> to find out how to get the sources, and
         build it on your system.  Note that GHC itself is written in
         Haskell, so you will still need to install GHC in order to
@@ -76,7 +76,7 @@
       </listitem>
 
       <listitem>
-	<para><ulink url="http://hackage.haskell.org/trac/ghc/">GHC
+	<para><ulink url="http://ghc.haskell.org/trac/ghc/">GHC
 	Developers Home</ulink> (developer documentation, wiki, and
 	bug tracker)</para>
       </listitem>
@@ -130,60 +130,15 @@
       </varlistentry>
 
       <varlistentry>
-	<term>glasgow-haskell-bugs:</term>
-	<listitem>
-	  <para>This list is for reporting and discussing GHC bugs.
-	    However, please see <xref linkend="bug-reporting" /> before
-	    posting here.</para>
-
-	  <variablelist>
-	    <varlistentry>
-	      <term>list email address:</term>
-	      <listitem>
-		<para><email>glasgow-haskell-bugs@haskell.org</email></para>
-	      </listitem>
-	    </varlistentry>
-
-	    <varlistentry>
-	      <term>subscribe at:</term>
-	      <listitem>
-		<para><ulink
-	      url="http://www.haskell.org/mailman/listinfo/glasgow-haskell-bugs"><literal>http://www.haskell.org/mailman/listinfo/glasgow-haskell-bugs</literal></ulink>.</para>
-	      </listitem>
-	    </varlistentry>
-
-	    <varlistentry>
-	      <term>admin email address:</term>
-	      <listitem>
-		<para><email>glasgow-haskell-bugs-admin@haskell.org</email></para>
-	      </listitem>
-	    </varlistentry>
-
-	    <varlistentry>
-	      <term>list archives:</term>
-	      <listitem>
-		<para><ulink
-                         url="http://www.haskell.org/pipermail/glasgow-haskell-bugs/"><literal>http://www.haskell.org/pipermail/glasgow-haskell-bugs/</literal></ulink></para>
-	      </listitem>
-	    </varlistentry>
-	  </variablelist>
-	</listitem>
-      </varlistentry>
-
-      <varlistentry>
-	<term>cvs-ghc:</term>
+	<term>ghc-devs:</term>
 	<listitem>
-	  <para>The hardcore GHC developers hang out here.  This list
-	  also gets commit message from the GHC darcs repository.  There are
-	  other lists for other darcs
-	  repositories (most notably <literal>cvs-libraries</literal>).
-	  </para>
+	  <para>The hardcore GHC developers hang out here.</para>
 
 	  <variablelist>
 	    <varlistentry>
 	      <term>list email address:</term>
 	      <listitem>
-		<para><email>cvs-ghc@haskell.org</email></para>
+		<para><email>ghc-devs@haskell.org</email></para>
 	      </listitem>
 	    </varlistentry>
 
@@ -191,14 +146,14 @@
 	      <term>subscribe at:</term>
 	      <listitem>
 		<para><ulink
-	      url="http://www.haskell.org/mailman/listinfo/cvs-ghc"><literal>http://www.haskell.org/mailman/listinfo/cvs-ghc</literal></ulink>.</para>
+	      url="http://www.haskell.org/mailman/listinfo/ghc-devs"><literal>http://www.haskell.org/mailman/listinfo/ghc-devs</literal></ulink>.</para>
 	      </listitem>
 	    </varlistentry>
 
 	    <varlistentry>
 	      <term>admin email address:</term>
 	      <listitem>
-		<para><email>cvs-ghc-admin@haskell.org</email></para>
+		<para><email>ghc-devs-admin@haskell.org</email></para>
 	      </listitem>
 	    </varlistentry>
 
@@ -206,7 +161,7 @@
 	      <term>list archives:</term>
 	      <listitem>
 		<para><ulink
-          url="http://www.haskell.org/pipermail/cvs-ghc/"><literal>http://www.haskell.org/pipermail/cvs-ghc/</literal></ulink></para>
+          url="http://www.haskell.org/pipermail/ghc-devs/"><literal>http://www.haskell.org/pipermail/ghc-devs/</literal></ulink></para>
 	      </listitem>
 	    </varlistentry>
 	  </variablelist>
@@ -234,7 +189,7 @@
     <para>
         Glasgow Haskell is a changing system so there are sure to be
         bugs in it. If you find one, please see
-        <ulink url="http://hackage.haskell.org/trac/ghc/wiki/ReportABug">this wiki page</ulink>
+        <ulink url="http://ghc.haskell.org/trac/ghc/wiki/ReportABug">this wiki page</ulink>
         for information on how to report it.
     </para>
 
@@ -281,7 +236,7 @@
             We may make snapshot releases of the current stable branch <ulink
             url="http://www.haskell.org/ghc/dist/stable/dist/">available for
             download</ulink>, and the latest sources are available from <ulink
-            url="http://hackage.haskell.org/trac/ghc/wiki/Repositories">the git
+            url="http://ghc.haskell.org/trac/ghc/wiki/Repositories">the git
             repositories</ulink>.
 	  </para>
 
@@ -316,7 +271,7 @@
             We may make snapshot releases of the HEAD <ulink
             url="http://www.haskell.org/ghc/dist/current/dist/">available for
             download</ulink>, and the latest sources are available from <ulink
-            url="http://hackage.haskell.org/trac/ghc/wiki/Repositories">the git
+            url="http://ghc.haskell.org/trac/ghc/wiki/Repositories">the git
             repositories</ulink>.
 	  </para>
 
@@ -347,7 +302,7 @@
 
     <para>The version number of your copy of GHC can be found by
     invoking <literal>ghc</literal> with the
-    <literal>&ndash;&ndash;version</literal> flag (see <xref
+    <literal>--version</literal> flag (see <xref
     linkend="options-help"/>).</para>
   </sect1>
 
diff -urd 7.6.3-original/packages.xml original/packages.xml
--- 7.6.3-original/packages.xml	2014-06-27 09:19:06.055241831 +0900
+++ original/packages.xml	2014-04-08 03:26:08.000000000 +0900
@@ -13,7 +13,7 @@
     url="http://hackage.haskell.org/packages/hackage.html">HackageDB</ulink>.</para>
 
   <para>Using a package couldn't be simpler: if you're using
-    <option>&ndash;&ndash;make</option> or GHCi, then most of the installed packages will be
+    <option>--make</option> or GHCi, then most of the installed packages will be
     automatically available to your program without any further options.  The
     exceptions to this rule are covered below in <xref
       linkend="using-packages" />.</para>
@@ -147,8 +147,8 @@
             or dynamically is controlled by the flag
             pair <option>-static</option>/<option>-dynamic</option>.</para>
 
-          <para>In <option>&ndash;&ndash;make</option> mode
-            and <option>&ndash;&ndash;interactive</option> mode (see
+          <para>In <option>--make</option> mode
+            and <option>--interactive</option> mode (see
             <xref linkend="modes" />), the compiler normally
             determines which packages are required by the current
             Haskell modules, and links only those.  In batch mode
@@ -252,8 +252,8 @@
           </indexterm></term>
         <listitem>
           <para>By default, GHC will automatically link in the
-            <literal>haskell98</literal> package. This flag disables that
-            behaviour.</para>
+            <literal>base</literal> and <literal>rts</literal> packages.
+            This flag disables that behaviour.</para>
         </listitem>
       </varlistentry>
 
@@ -961,9 +961,9 @@
 
       <varlistentry>
         <term>
-          <option>&ndash;&ndash;force</option>
+          <option>--force</option>
           <indexterm><primary>
-              <option>&ndash;&ndash;force</option>
+              <option>--force</option>
             </primary></indexterm>
         </term>
         <listitem>
@@ -977,7 +977,7 @@
 
       <varlistentry>
         <term>
-          <option>&ndash;&ndash;global</option><indexterm><primary><option>&ndash;&ndash;global</option></primary>
+          <option>--global</option><indexterm><primary><option>--global</option></primary>
           </indexterm>
         </term>
         <listitem>
@@ -991,7 +991,7 @@
 
       <varlistentry>
         <term>
-          <option>&ndash;&ndash;help</option><indexterm><primary><option>&ndash;&ndash;help</option></primary>
+          <option>--help</option><indexterm><primary><option>--help</option></primary>
           </indexterm>
         </term>
         <term>
@@ -1005,7 +1005,7 @@
 
       <varlistentry>
         <term>
-          <option>&ndash;&ndash;user</option><indexterm><primary><option>&ndash;&ndash;user</option></primary>
+          <option>--user</option><indexterm><primary><option>--user</option></primary>
           </indexterm>
         </term>
         <listitem>
@@ -1040,7 +1040,7 @@
           </indexterm>
         </term>
         <term>
-          <option>&ndash;&ndash;version</option><indexterm><primary><option>&ndash;&ndash;version</option></primary>
+          <option>--version</option><indexterm><primary><option>--version</option></primary>
           </indexterm>
         </term>
         <listitem>
@@ -1115,11 +1115,11 @@
           it.  To build one manually, the following
           GNU <command>ld</command> command can be used:</para>
 
-<screen>ld -r &ndash;&ndash;whole-archive -o HSfoo.o libHSfoo.a</screen>
+<screen>ld -r --whole-archive -o HSfoo.o libHSfoo.a</screen>
 
         <para>(replace
-          <literal>&ndash;&ndash;whole-archive</literal> with
-          <literal>&ndash;all_load</literal> on MacOS X)</para>
+          <literal>--whole-archive</literal> with
+          <literal>-all_load</literal> on MacOS X)</para>
       </listitem>
       <listitem>
         <para>When building the package as shared library, GHC can be used to
diff -urd 7.6.3-original/parallel.xml original/parallel.xml
--- 7.6.3-original/parallel.xml	2014-06-27 09:19:05.750249915 +0900
+++ original/parallel.xml	2014-04-08 03:26:08.000000000 +0900
@@ -185,7 +185,7 @@
       parallel <literal>map</literal>.</para>
   </sect2>
 
-<sect2><title>Data Parallel Haskell</title>
+<sect2 id="dph"><title>Data Parallel Haskell</title>
   <para>GHC includes experimental support for Data Parallel Haskell (DPH). This code
         is highly unstable and is only provided as a technology preview. More
         information can be found on the corresponding <ulink
diff -urd 7.6.3-original/phases.xml original/phases.xml
--- 7.6.3-original/phases.xml	2014-06-27 09:19:05.721250684 +0900
+++ original/phases.xml	2014-04-08 03:26:08.000000000 +0900
@@ -137,6 +137,17 @@
               linkend="options-linker" />.</para>
         </listitem>
       </varlistentry>
+
+      <varlistentry>
+        <term>
+          <option>-pgmlibtool</option> <replaceable>cmd</replaceable>
+          <indexterm><primary><option>-pgmlibtool</option></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Use <replaceable>cmd</replaceable> as the libtool command 
+          (when using <option>-staticlib</option> only).</para>
+        </listitem>
+      </varlistentry>
     </variablelist>
   </sect2>
 
@@ -387,6 +398,21 @@
 
       <varlistentry>
         <term>
+          <constant>&lowbar;&lowbar;GLASGOW&lowbar;HASKELL&lowbar;LLVM&lowbar;&lowbar;</constant>
+          <indexterm><primary><constant>&lowbar;&lowbar;GLASGOW&lowbar;HASKELL&lowbar;LLVM&lowbar;&lowbar;</constant></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Only defined when <option>-fllvm</option> is specified. When GHC
+          is using version
+          <literal><replaceable>x</replaceable>.<replaceable>y</replaceable>.<replaceable>z</replaceable></literal>
+          of LLVM, the value of
+          <constant>&lowbar;&lowbar;GLASGOW&lowbar;HASKELL&lowbar;LLVM&lowbar;&lowbar;</constant>
+          is the integer <replaceable>xy</replaceable>.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
           <constant>&lowbar;&lowbar;PARALLEL&lowbar;HASKELL&lowbar;&lowbar;</constant>
           <indexterm><primary><constant>&lowbar;&lowbar;PARALLEL&lowbar;HASKELL&lowbar;&lowbar;</constant></primary></indexterm>
         </term>
@@ -678,7 +704,7 @@
         </term>
         <listitem>
           <para>Omits the link step.  This option can be used with
-            <option>&ndash;&ndash;make</option> to avoid the automatic linking
+            <option>--make</option> to avoid the automatic linking
             that takes place if the program contains a <literal>Main</literal>
             module.</para>
         </listitem>
@@ -706,7 +732,7 @@
           <indexterm><primary><option>-framework</option></primary></indexterm>
         </term>
         <listitem>
-          <para>On Darwin/MacOS X only, link in the framework <replaceable>name</replaceable>.
+          <para>On Darwin/OS X/iOS only, link in the framework <replaceable>name</replaceable>.
           This option corresponds to the <option>-framework</option> option for Apple's Linker.
           Please note that frameworks and packages are two different things - frameworks don't
           contain any haskell code. Rather, they are Apple's way of packaging shared libraries.
@@ -718,6 +744,21 @@
 
       <varlistentry>
         <term>
+          <option>-staticlib</option>
+          <indexterm><primary><option>-staticlib</option></primary></indexterm>
+        </term>
+        <listitem>
+          <para>On Darwin/OS X/iOS only, link all passed files into a static library suitable
+          for linking into an iOS (when using a cross-compiler) or Mac Xcode project. To control
+          the name, use the <option>-o</option> <replaceable>name</replaceable> option as usual.
+          The default name is <literal>liba.a</literal>.
+          This should nearly always be passed when compiling for iOS with a cross-compiler.
+          </para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
           <option>-L</option><replaceable>dir</replaceable>
           <indexterm><primary><option>-L</option></primary></indexterm>
         </term>
@@ -734,7 +775,7 @@
           <indexterm><primary><option>-framework-path</option></primary></indexterm>
         </term>
         <listitem>
-          <para>On Darwin/MacOS X only, prepend the directory <replaceable>dir</replaceable> to
+          <para>On Darwin/OS X/iOS only, prepend the directory <replaceable>dir</replaceable> to
           the framework directories path. This option corresponds to the <option>-F</option>
           option for Apple's Linker (<option>-F</option> already means something else for GHC).</para>
         </listitem>
@@ -1174,7 +1215,7 @@
           </indexterm>
         </term>
         <listitem>
-          <para>On Darwin/MacOS X, dynamic libraries are stamped at build time with an
+          <para>On Darwin/OS X, dynamic libraries are stamped at build time with an
               "install name", which is the ultimate install path of the library file.
               Any libraries or executables that subsequently link against it will pick
               up that path as their runtime search location for it. By default, ghc sets
diff -urd 7.6.3-original/profiling.xml original/profiling.xml
--- 7.6.3-original/profiling.xml	2014-06-27 09:19:05.731250419 +0900
+++ original/profiling.xml	2014-04-08 03:26:08.000000000 +0900
@@ -357,7 +357,13 @@
       cost centre <literal>M.CAF</literal>, where <literal>M</literal>
       is the name of the module.  It is also possible to give each CAF
       a different stack, using the option
-      <option>-fprof-cafs</option><indexterm><primary><option>-fprof-cafs</option></primary></indexterm>.</para>
+      <option>-fprof-cafs</option><indexterm><primary><option>-fprof-cafs</option></primary></indexterm>.
+      This is especially useful when compiling with
+      <option>-ffull-laziness</option> (as is default with
+      <option>-O</option> and higher), as constants in function bodies
+      will be lifted to the top-level and become CAFs.  You will probably
+      need to consult the Core (<option>-ddump-simpl</option>) in order
+      to determine what these CAFs correspond to.</para>
     </sect2>
   </sect1>
 
@@ -884,8 +890,8 @@
       by defining what we mean by a retainer:</para>
 
       <blockquote>
-	<para>A retainer is either the system stack, or an unevaluated
-	closure (thunk).</para>
+        <para>A retainer is either the system stack, an unevaluated
+        closure (thunk), or an explicitly mutable object.</para>
       </blockquote>
 
       <para>In particular, constructors are <emphasis>not</emphasis>
@@ -1071,7 +1077,7 @@
   </sect1>
 
   <sect1 id="hp2ps">
-    <title><command>hp2ps</command>&ndash;&ndash;heap profile to PostScript</title>
+    <title><command>hp2ps</command>--heap profile to PostScript</title>
 
     <indexterm><primary><command>hp2ps</command></primary></indexterm>
     <indexterm><primary>heap profiles</primary></indexterm>
@@ -1626,8 +1632,10 @@
     --include=[PACKAGE:][MODULE]  include MODULE and/or PACKAGE
     --srcdir=DIR                  path to source directory of .hs files
                                   multi-use of srcdir possible
-    --hpcdir=DIR                  sub-directory that contains .mix files
+    --hpcdir=DIR                  append sub-directory that contains .mix files
                                   default .hpc [rarely used]
+    --reset-hpcdirs               empty the list of hpcdir's
+                                  [rarely used]
     --xml-output                  show output in XML
 </screen>
        </sect3>
@@ -1644,8 +1652,10 @@
     --include=[PACKAGE:][MODULE]  include MODULE and/or PACKAGE
     --srcdir=DIR                  path to source directory of .hs files
                                   multi-use of srcdir possible
-    --hpcdir=DIR                  sub-directory that contains .mix files
+    --hpcdir=DIR                  append sub-directory that contains .mix files
                                   default .hpc [rarely used]
+    --reset-hpcdirs               empty the list of hpcdir's
+                                  [rarely used]
     --fun-entry-count             show top-level function entry counts
     --highlight-covered           highlight covered code, rather that code gaps
     --destdir=DIR                 path to write output to
@@ -1723,8 +1733,10 @@
 
     --srcdir=DIR   path to source directory of .hs files
                    multi-use of srcdir possible
-    --hpcdir=DIR   sub-directory that contains .mix files
-                   default .hpc [rarely used]
+    --hpcdir=DIR                  append sub-directory that contains .mix files
+                                  default .hpc [rarely used]
+    --reset-hpcdirs               empty the list of hpcdir's
+                                  [rarely used]
     --output=FILE  output FILE
 % hpc help draft
 Usage: hpc draft [OPTION] .. &lt;TIX_FILE&gt;
@@ -1735,8 +1747,10 @@
     --include=[PACKAGE:][MODULE]  include MODULE and/or PACKAGE
     --srcdir=DIR                  path to source directory of .hs files
                                   multi-use of srcdir possible
-    --hpcdir=DIR                  sub-directory that contains .mix files
+    --hpcdir=DIR                  append sub-directory that contains .mix files
                                   default .hpc [rarely used]
+    --reset-hpcdirs               empty the list of hpcdir's
+                                  [rarely used]
     --output=FILE                 output FILE
 </screen>
       </sect3>
@@ -1755,164 +1769,12 @@
     <title>Using &ldquo;ticky-ticky&rdquo; profiling (for implementors)</title>
     <indexterm><primary>ticky-ticky profiling</primary></indexterm>
 
-    <para>(ToDo: document properly.)</para>
-
-    <para>It is possible to compile Haskell programs so that
-    they will count lots and lots of interesting things, e.g., number
-    of updates, number of data constructors entered, etc., etc.  We
-    call this &ldquo;ticky-ticky&rdquo;
-    profiling,<indexterm><primary>ticky-ticky
-    profiling</primary></indexterm> <indexterm><primary>profiling,
-    ticky-ticky</primary></indexterm> because that's the sound a CPU
-    makes when it is running up all those counters
-    (<emphasis>slowly</emphasis>).</para>
-
-    <para>Ticky-ticky profiling is mainly intended for implementors;
-    it is quite separate from the main &ldquo;cost-centre&rdquo;
-    profiling system, intended for all users everywhere.</para>
-
-    <para>
-      You don't need to build GHC, the libraries, or the RTS a special
-      way in order to use ticky-ticky profiling.  You can decide on a
-      module-by-module basis which parts of a program have the
-      counters compiled in, using the
-      compile-time <option>-ticky</option> option.  Those modules that
-      were not compiled with <option>-ticky</option> won't contribute
-      to the ticky-ticky profiling results, and that will normally
-      include all the pre-compiled packages that your program links
-      with.
-    </para>
-
-    <para>
-      To get your compiled program to spit out the ticky-ticky
-      numbers:
-
-      <itemizedlist>
-        <listitem>
-          <para>
-            Link the program with <option>-debug</option>
-            (<option>-ticky</option> is a synonym
-            for <option>-debug</option> at link-time).  This links in
-            the debug version of the RTS, which includes the code for
-            aggregating and reporting the results of ticky-ticky
-            profiling.
-          </para>
-        </listitem>
-        <listitem>
-          <para>
-            Run the program with the <option>-r</option> RTS
-            option<indexterm><primary>-r RTS option</primary></indexterm>.
-            See <xref linkend="runtime-control"/>.
-          </para>
-        </listitem>
-      </itemizedlist>
-    </para>
-
-    <para>
-      Here is a sample ticky-ticky statistics file, generated by
-      the invocation
-      <command>foo +RTS -rfoo.ticky</command>.
-      </para>
-
-<screen>
- foo +RTS -rfoo.ticky
-
-ALLOCATIONS: 3964631 (11330900 words total: 3999476 admin, 6098829 goods, 1232595 slop)
-                                total words:        2     3     4     5    6+
-  69647 (  1.8%) function values                 50.0  50.0   0.0   0.0   0.0
-2382937 ( 60.1%) thunks                           0.0  83.9  16.1   0.0   0.0
-1477218 ( 37.3%) data values                     66.8  33.2   0.0   0.0   0.0
-      0 (  0.0%) big tuples
-      2 (  0.0%) black holes                      0.0 100.0   0.0   0.0   0.0
-      0 (  0.0%) prim things
-  34825 (  0.9%) partial applications             0.0   0.0   0.0 100.0   0.0
-      2 (  0.0%) thread state objects             0.0   0.0   0.0   0.0 100.0
-
-Total storage-manager allocations: 3647137 (11882004 words)
-        [551104 words lost to speculative heap-checks]
-
-STACK USAGE:
-
-ENTERS: 9400092  of which 2005772 (21.3%) direct to the entry code
-                  [the rest indirected via Node's info ptr]
-1860318 ( 19.8%) thunks
-3733184 ( 39.7%) data values
-3149544 ( 33.5%) function values
-                  [of which 1999880 (63.5%) bypassed arg-satisfaction chk]
- 348140 (  3.7%) partial applications
- 308906 (  3.3%) normal indirections
-      0 (  0.0%) permanent indirections
-
-RETURNS: 5870443
-2137257 ( 36.4%) from entering a new constructor
-                  [the rest from entering an existing constructor]
-2349219 ( 40.0%) vectored [the rest unvectored]
-
-RET_NEW:         2137257:  32.5% 46.2% 21.3%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%
-RET_OLD:         3733184:   2.8% 67.9% 29.3%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%
-RET_UNBOXED_TUP:       2:   0.0%  0.0%100.0%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%
-
-RET_VEC_RETURN : 2349219:   0.0%  0.0%100.0%  0.0%  0.0%  0.0%  0.0%  0.0%  0.0%
-
-UPDATE FRAMES: 2241725 (0 omitted from thunks)
-SEQ FRAMES:    1
-CATCH FRAMES:  1
-UPDATES: 2241725
-      0 (  0.0%) data values
-  34827 (  1.6%) partial applications
-                  [2 in place, 34825 allocated new space]
-2206898 ( 98.4%) updates to existing heap objects (46 by squeezing)
-UPD_CON_IN_NEW:         0:       0      0      0      0      0      0      0      0      0
-UPD_PAP_IN_NEW:     34825:       0      0      0  34825      0      0      0      0      0
-
-NEW GEN UPDATES: 2274700 ( 99.9%)
-
-OLD GEN UPDATES: 1852 (  0.1%)
-
-Total bytes copied during GC: 190096
-
-**************************************************
-3647137 ALLOC_HEAP_ctr
-11882004 ALLOC_HEAP_tot
-  69647 ALLOC_FUN_ctr
-  69647 ALLOC_FUN_adm
-  69644 ALLOC_FUN_gds
-  34819 ALLOC_FUN_slp
-  34831 ALLOC_FUN_hst_0
-  34816 ALLOC_FUN_hst_1
-      0 ALLOC_FUN_hst_2
-      0 ALLOC_FUN_hst_3
-      0 ALLOC_FUN_hst_4
-2382937 ALLOC_UP_THK_ctr
-      0 ALLOC_SE_THK_ctr
- 308906 ENT_IND_ctr
-      0 E!NT_PERM_IND_ctr requires +RTS -Z
-[... lots more info omitted ...]
-      0 GC_SEL_ABANDONED_ctr
-      0 GC_SEL_MINOR_ctr
-      0 GC_SEL_MAJOR_ctr
-      0 GC_FAILED_PROMOTION_ctr
-  47524 GC_WORDS_COPIED_ctr
-</screen>
-
-    <para>The formatting of the information above the row of asterisks
-    is subject to change, but hopefully provides a useful
-    human-readable summary.  Below the asterisks <emphasis>all
-    counters</emphasis> maintained by the ticky-ticky system are
-    dumped, in a format intended to be machine-readable: zero or more
-    spaces, an integer, a space, the counter name, and a newline.</para>
-
-    <para>In fact, not <emphasis>all</emphasis> counters are
-    necessarily dumped; compile- or run-time flags can render certain
-    counters invalid.  In this case, either the counter will simply
-    not appear, or it will appear with a modified counter name,
-    possibly along with an explanation for the omission (notice
-    <literal>ENT&lowbar;PERM&lowbar;IND&lowbar;ctr</literal> appears
-    with an inserted <literal>!</literal> above).  Software analysing
-    this output should always check that it has the counters it
-    expects.  Also, beware: some of the counters can have
-    <emphasis>large</emphasis> values!</para>
-
+    <para>Because ticky-ticky profiling requires a certain familiarity
+    with GHC internals, we have moved the documentation to the
+    wiki. Take a look at its <ulink
+    url="http://ghc.haskell.org/trac/ghc/wiki/Commentary/Profiling">overview
+    of the profiling options</ulink>, which includeds a link to the
+    ticky-ticky profiling page.</para>
   </sect1>
 
 </chapter>
diff -urd 7.6.3-original/runtime_control.xml original/runtime_control.xml
--- 7.6.3-original/runtime_control.xml	2014-06-27 09:19:06.065241566 +0900
+++ original/runtime_control.xml	2014-04-08 03:26:08.000000000 +0900
@@ -100,7 +100,7 @@
         <para>
           If you absolutely positively want all the rest of the options
           in a command line to go to the program (and not the RTS), use a
-          <option>&ndash;&ndash;RTS</option><indexterm><primary><option>--RTS</option></primary></indexterm>.
+          <option>--RTS</option><indexterm><primary><option>--RTS</option></primary></indexterm>.
         </para>
 
         <para>
@@ -676,10 +676,12 @@
           <indexterm><primary>stack, maximum size</primary></indexterm>
         </term>
 	<listitem>
-	  <para>&lsqb;Default: 8M&rsqb; Set the maximum stack size for
-          an individual thread to <replaceable>size</replaceable>
-          bytes.  If the thread attempts to exceed this limit, it will
-            be send the <literal>StackOverflow</literal> exception.
+	  <para>&lsqb;Default: 80% physical memory size&rsqb; Set the
+          maximum stack size for an individual thread to
+          <replaceable>size</replaceable> bytes. If the thread
+          attempts to exceed this limit, it will be sent the
+          <literal>StackOverflow</literal> exception. The
+          limit can be disabled entirely by specifying a size of zero.
           </para>
           <para>
             This option is there mainly to stop the program eating up
@@ -1435,7 +1437,7 @@
         <term><literal>RTS way</literal></term>
         <listitem>
           <para>The variant (&ldquo;way&rdquo;) of the runtime. The
-          most common values are <literal>rts</literal> (vanilla),
+          most common values are <literal>rts_v</literal> (vanilla),
           <literal>rts_thr</literal> (threaded runtime, i.e. linked using the
           <literal>-threaded</literal> option) and <literal>rts_p</literal>
           (profiling runtime, i.e. linked using the <literal>-prof</literal>
diff -urd 7.6.3-original/safe_haskell.xml original/safe_haskell.xml
--- 7.6.3-original/safe_haskell.xml	2014-06-27 09:19:05.758249703 +0900
+++ original/safe_haskell.xml	2014-04-08 03:26:08.000000000 +0900
@@ -44,6 +44,16 @@
   </itemizedlist>
   </para>
 
+  <para>
+  Safe Haskell, however, <emphasis>does not offer</emphasis> compilation
+  safety. During compilation time it is possible for arbitrary processes to be
+  launched, using for example the <link linkend="pre-processor">custom
+    pre-processor</link> flag. This can be manipulated to either compromise a
+  users system at compilation time, or to modify the source code just before
+  compilation to try to alter set Safe Haskell flags. This is discussed further
+  in section <xref linkend="safe-compilation"/>.
+  </para>
+
   <sect2 id="safe-use-cases">
     <title>Uses of Safe Haskell</title>
     <indexterm><primary>safe haskell uses</primary></indexterm>
@@ -66,7 +76,7 @@
       being the <literal>unsafePerformIO :: IO a -> a</literal> function. The
       safe language dialect of Safe Haskell disallows the use of such
       functions. This can be useful for a variety of purposes as it makes
-      Haskell code easier to analyze and reason about. It also codifies an
+      Haskell code easier to analyse and reason about. It also codifies an
       existing culture in the Haskell community of trying to avoid using such
       unsafe functions unless absolutely necessary. As such using the safe
       language (through the <option>-XSafe</option> flag) can be thought of as
@@ -176,18 +186,18 @@
       </para>
 
       <para>
-      The use of the <option>-XSafe</option> flag to compile the Danger module
-      restricts the features of Haskell that can be used to a
-      <link linkend="safe-language">safe subset</link>. This includes
-      disallowing <literal>unsafePerfromIO</literal>, Template Haskell, pure
-      FFI functions, Generalized Newtype Deriving, RULES and restricting the
-      operation of Overlapping Instances. The <option>-XSafe</option> flag also
-      restricts the modules can be imported by Danger to only those that are
-      considered trusted. Trusted modules are those compiled with
-      <option>-XSafe</option>, where GHC provides a mechanical guarantee that
-      the code is safe. Or those modules compiled with
-      <option>-XTrustworthy</option>, where the module author claims that the
-      module is Safe.
+      The use of the <option>-XSafe</option> flag to compile the
+      Danger module restricts the features of Haskell that can be used
+      to a <link linkend="safe-language">safe subset</link>. This
+      includes disallowing <literal>unsafePerformIO</literal>,
+      Template Haskell, pure FFI functions, RULES and restricting the
+      operation of Overlapping Instances. The <option>-XSafe</option>
+      flag also restricts the modules can be imported by Danger to
+      only those that are considered trusted. Trusted modules are
+      those compiled with <option>-XSafe</option>, where GHC provides
+      a mechanical guarantee that the code is safe. Or those modules
+      compiled with <option>-XTrustworthy</option>, where the module
+      author claims that the module is Safe.
       </para>
 
       <para>
@@ -244,6 +254,7 @@
         for example, that the <literal>unsafePerformIO :: IO a -> a</literal>
         function is disallowed in the safe language.
       </listitem>
+
       <listitem><emphasis>Module boundary control</emphasis> &mdash; Haskell
         code compiled using the safe language is guaranteed to only access
         symbols that are publicly available to it through other modules export
@@ -253,10 +264,8 @@
         through careful use of its export list then code compiled using the
         safe language that imports M is guaranteed to respect those invariants.
         Because of this, <emphasis><link linkend="template-haskell">Template
-        Haskell</link></emphasis> and <emphasis>
-        <link linkend="newtype-deriving">GeneralizedNewtypeDeriving</link>
-        </emphasis> are disabled in the safe language as they can be used
-        to violate this property.
+        Haskell</link></emphasis> is disabled in the safe language as it can be
+        used to violate this property.
       </listitem>
       <listitem><emphasis>Semantic consistency</emphasis> &mdash; The safe
         language is strictly a subset of Haskell as implemented by GHC. Any
@@ -284,10 +293,6 @@
     following features:
 
     <itemizedlist>
-      <listitem><emphasis>GeneralizedNewtypeDeriving</emphasis> &mdash; It can
-        be used to violate constructor access control, by allowing untrusted
-        code to manipulate protected data types in ways the data type author
-        did not intend, breaking invariants they have established.</listitem>
       <listitem><emphasis>TemplateHaskell</emphasis> &mdash; Is particularly
         dangerous, as it can cause side effects even at compilation time and
         can be used to access constructors of abstract data types.</listitem>
@@ -722,6 +727,48 @@
     </variablelist>
   </sect2>
 
+  <sect2 id="safe-compilation">
+    <title>Safe Compilation</title>
+    <indexterm><primary>safe compilation</primary></indexterm>
+
+    <para>
+    GHC includes a variety of flags that allow arbitrary processes to be run at
+    compilation time. One such example is the <link
+      linkend="pre-processor">custom pre-processor</link> flag. Another is the
+    ability of Template Haskell to execute Haskell code at compilation time,
+    including IO actions. Safe Haskell <emphasis>does not address this
+      danger</emphasis> (although, Template Haskell is a disallowed feature).
+    </para>
+
+    <para>
+    Due to this, it is suggested that when compiling untrusted source code that
+    has had no manual inspection done, the following precautions be taken:
+    <itemizedlist>
+      <listitem>Compile in a sandbox, such as a chroot or similar container
+        technology. Or simply as a user with very reduced system
+        access.</listitem>
+      <listitem>Compile untrusted code with the <option>-XSafe</option> flag
+        being specified on the command line. This will ensure that modifications
+        to the source being compiled can't disable the use of the Safe Language
+        as the command line flag takes precedence over a source level
+        pragma.</listitem>
+      <listitem>Ensure that all untrusted code is imported as a
+        <link linkend="safe-imports">safe import</link><emphasis> and</emphasis>
+        that the <link linkend="safe-package-trust"><option>-fpackage-trust</option></link>
+        flag is used with packages from untrusted sources being marked as
+        untrusted.</listitem>
+    </itemizedlist>
+    </para>
+
+    <para>
+    There is a more detailed discussion of the issues involved in compilation
+    safety and some potential solutions on the <ulink
+      url="http://ghc.haskell.org/trac/ghc/wiki/SafeHaskell/SafeCompilation">GHC
+      Wiki</ulink>.
+    </para>
+
+  </sect2>
+
 </sect1>
 
 <!-- Emacs stuff:
diff -urd 7.6.3-original/separate_compilation.xml original/separate_compilation.xml
--- 7.6.3-original/separate_compilation.xml	2014-06-27 09:19:05.804248484 +0900
+++ original/separate_compilation.xml	2014-04-08 03:26:08.000000000 +0900
@@ -600,23 +600,30 @@
 	  </listitem>
 	</varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-ddump-minimal-imports</option>
             <indexterm><primary><option>-ddump-minimal-imports</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Dump to the file "M.imports" (where M is the module
-            being compiled) a "minimal" set of import declarations.
-            You can safely replace all the import declarations in
-            "M.hs" with those found in "M.imports".  Why would you
-            want to do that?  Because the "minimal" imports (a) import
-            everything explicitly, by name, and (b) import nothing
-            that is not required.  It can be quite painful to maintain
-            this property by hand, so this flag is intended to reduce
-            the labour.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Dump to the file
+            <filename><replaceable>M</replaceable>.imports</filename>
+            (where <replaceable>M</replaceable> is the name of the
+            module being compiled) a "minimal" set of import
+            declarations.  The directory where the
+            <filename>.imports</filename> files are created can be
+            controlled via the <option>-dumpdir</option>
+            option.</para> <para>You can safely replace all the import
+            declarations in
+            <filename><replaceable>M</replaceable>.hs</filename> with
+            those found in its respective <filename>.imports</filename>
+            file.  Why would you want to do that?  Because the
+            "minimal" imports (a) import everything explicitly, by
+            name, and (b) import nothing that is not required.  It can
+            be quite painful to maintain this property by hand, so
+            this flag is intended to reduce the labour.</para>
+          </listitem>
+        </varlistentry>
 
 	<varlistentry>
 	  <term>
@@ -692,7 +699,7 @@
       sight!</para>
 
       <para>You can read
-      about <ulink url="http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/RecompilationAvoidance">how
+      about <ulink url="http://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/RecompilationAvoidance">how
           all this works</ulink> in the GHC commentary.</para>
 
     </sect2>
@@ -836,7 +843,13 @@
 </programlisting>
 </para></listitem>
 <listitem><para> Fixity declarations are exactly as in Haskell.</para></listitem>
-<listitem><para> Type synonym declarations are exactly as in Haskell.</para></listitem>
+<listitem><para> Vanilla type synonym declarations are exactly as in Haskell.</para></listitem>
+<listitem><para> Open type and data family declarations are exactly as in Haskell.</para></listitem>
+<listitem><para> A closed type family may optionally omit its equations, as in the following example:
+<programlisting>
+  type family ClosedFam a where ..
+</programlisting>
+The <literal>..</literal> is meant literally -- you should write two dots in your file. Note that the <literal>where</literal> clause is still necessary to distinguish closed families from open ones. If you give any equations of a closed family, you must give all of them, in the same order as they appear in the accompanying Haskell file.</para></listitem>
 <listitem><para> A data type declaration can either be given in full, exactly as in Haskell, or it
 can be given abstractly, by omitting the '=' sign and everything that follows.  For example:
 <programlisting>
@@ -865,6 +878,7 @@
 </para></listitem>
 <listitem><para> You can include instance declarations just as in Haskell; but omit the "where" part.
  </para></listitem>
+<listitem><para>The default role for class and datatype parameters is now representational. To get another role, use a role annotation. (See <xref linkend="roles"/>.)</para></listitem>
 </itemizedlist>
 </para>
     </sect2>
@@ -1037,7 +1051,7 @@
 	locate any imported modules that come from packages.  The
 	package modules won't be included in the dependencies
 	generated, though (but see the
-	<option>&ndash;&ndash;include-pkg-deps</option> option below).</para>
+	<option>--include-pkg-deps</option> option below).</para>
 
 	<para>The dependency generation phase of GHC can take some
         additional options, which you may find useful.
@@ -1104,7 +1118,7 @@
 	  </varlistentry>
 
 	  <varlistentry>
-	    <term><option>&ndash;&ndash;exclude-module=&lt;file&gt;</option></term>
+	    <term><option>--exclude-module=&lt;file&gt;</option></term>
 	    <listitem>
 	      <para>Regard <filename>&lt;file&gt;</filename> as
               "stable"; i.e., exclude it from having dependencies on
@@ -1113,7 +1127,7 @@
 	  </varlistentry>
 
 	  <varlistentry>
-	    <term><option>&ndash;&ndash;include-pkg-deps</option></term>
+	    <term><option>--include-pkg-deps</option></term>
 	    <listitem>
 	      <para>Regard modules imported from packages as unstable,
               i.e., generate dependencies on any imported package modules
diff -urd 7.6.3-original/sooner.xml original/sooner.xml
--- 7.6.3-original/sooner.xml	2014-06-27 09:19:05.762249597 +0900
+++ original/sooner.xml	2014-04-08 03:26:08.000000000 +0900
@@ -294,7 +294,7 @@
           the third field in the pragma; it should say
           <literal>Strictness: &lt;string&gt;</literal>.  The
           <literal>&lt;string&gt;</literal> gives the strictness of
-          the function's arguments: see <ulink url="http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/Demand">
+          the function's arguments: see <ulink url="http://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/Demand">
           the GHC Commentary</ulink> for a description of the strictness notation.
           </para>
 
diff -urd 7.6.3-original/ug-book.xml original/ug-book.xml
--- 7.6.3-original/ug-book.xml	2014-06-27 09:19:05.733250365 +0900
+++ original/ug-book.xml	2014-06-27 09:31:23.084721605 +0900
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="iso-8859-1"?>
 <bookinfo>
-<title>The Glorious Glasgow Haskell Compilation System User's Guide, Version 7.6.2</title>
+<title>The Glorious Glasgow Haskell Compilation System User's Guide, Version 7.8.2</title>
 <author><othername>The GHC Team</othername></author>
 <address>
-<email>glasgow-haskell-&lcub;bugs,users&rcub;-request@haskell.org</email>
+<email>glasgow-haskell-users-request@haskell.org</email>
 </address>
 </bookinfo>
 
diff -urd 7.6.3-original/ug-book.xml.in original/ug-book.xml.in
--- 7.6.3-original/ug-book.xml.in	2014-06-27 09:19:06.090240903 +0900
+++ original/ug-book.xml.in	2014-04-08 03:26:08.000000000 +0900
@@ -3,7 +3,7 @@
 <title>@ProjectName@ User's Guide, Version @ProjectVersion@</title>
 <author><othername>The GHC Team</othername></author>
 <address>
-<email>glasgow-haskell-&lcub;bugs,users&rcub;-request@haskell.org</email>
+<email>glasgow-haskell-users-request@haskell.org</email>
 </address>
 </bookinfo>
 
Only in 7.6.3-original: users_guide
diff -urd 7.6.3-original/using.xml original/using.xml
--- 7.6.3-original/using.xml	2014-06-27 09:19:05.746250021 +0900
+++ original/using.xml	2014-04-08 03:26:08.000000000 +0900
@@ -183,7 +183,7 @@
       <varlistentry>
         <term>Mode flags</term>
         <listitem>
-          <para>For example, <option>&ndash;&ndash;make</option> or <option>-E</option>.
+          <para>For example, <option>--make</option> or <option>-E</option>.
             There may only be a single mode flag on the command line.  The
             available modes are listed in <xref linkend="modes"/>.</para>
         </listitem>
@@ -308,6 +308,7 @@
 
   <sect1 id="modes">
     <title>Modes of operation</title>
+    <indexterm><primary>help options</primary></indexterm>
 
     <para>
       GHC's behaviour is firstly controlled by a mode flag.  Only one
@@ -341,10 +342,10 @@
 
       <varlistentry>
         <term>
-          <cmdsynopsis><command>ghc &ndash;&ndash;make</command>
+          <cmdsynopsis><command>ghc --make</command>
           </cmdsynopsis>
           <indexterm><primary>make mode</primary></indexterm>
-          <indexterm><primary><option>&ndash;&ndash;make</option></primary></indexterm>
+          <indexterm><primary><option>--make</option></primary></indexterm>
         </term>
         <listitem>
           <para>In this mode, GHC will build a multi-module Haskell
@@ -357,7 +358,7 @@
           <para>
             This mode is the default if there are any Haskell
             source files mentioned on the command line, and in this case
-            the <option>&ndash;&ndash;make</option> option can be omitted.
+            the <option>--make</option> option can be omitted.
           </para>
         </listitem>
       </varlistentry>
@@ -435,7 +436,7 @@
           <cmdsynopsis>
           <command>ghc --help</command> <command>ghc -?</command>
             </cmdsynopsis>
-          <indexterm><primary><option>&ndash;&ndash;help</option></primary></indexterm>
+          <indexterm><primary><option>--help</option></primary></indexterm>
         </term>
         <listitem>
           <para>Cause GHC to spew a long usage message to standard
@@ -448,7 +449,7 @@
           <cmdsynopsis>
             <command>ghc --show-iface <replaceable>file</replaceable></command>
           </cmdsynopsis>
-          <indexterm><primary><option>&ndash;&ndash;--show-iface</option></primary></indexterm>
+          <indexterm><primary><option>--show-iface</option></primary></indexterm>
         </term>
         <listitem>
               <para>Read the interface in
@@ -463,7 +464,7 @@
             <command>ghc --supported-extensions</command>
             <command>ghc --supported-languages</command>
           </cmdsynopsis>
-          <indexterm><primary><option>&ndash;&ndash;supported-extensions</option></primary><primary><option>&ndash;&ndash;supported-languages</option></primary></indexterm>
+          <indexterm><primary><option>--supported-extensions</option></primary><primary><option>--supported-languages</option></primary></indexterm>
         </term>
         <listitem>
           <para>Print the supported language extensions.</para>
@@ -473,9 +474,21 @@
       <varlistentry>
         <term>
           <cmdsynopsis>
+            <command>ghc --show-options</command>
+          </cmdsynopsis>
+          <indexterm><primary><option>--show-options</option></primary></indexterm>
+        </term>
+        <listitem>
+          <para>Print the supported command line options. This flag can be used for autocompletion in a shell.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term>
+          <cmdsynopsis>
             <command>ghc --info</command>
           </cmdsynopsis>
-          <indexterm><primary><option>&ndash;&ndash;info</option></primary></indexterm>
+          <indexterm><primary><option>--info</option></primary></indexterm>
         </term>
         <listitem>
           <para>Print information about the compiler.</para>
@@ -489,7 +502,7 @@
             <command>ghc -V</command>
           </cmdsynopsis>
           <indexterm><primary><option>-V</option></primary></indexterm>
-          <indexterm><primary><option>&ndash;&ndash;version</option></primary></indexterm>
+          <indexterm><primary><option>--version</option></primary></indexterm>
         </term>
         <listitem>
           <para>Print a one-line string including GHC's version number.</para>
@@ -501,7 +514,7 @@
           <cmdsynopsis>
             <command>ghc --numeric-version</command>
           </cmdsynopsis>
-          <indexterm><primary><option>&ndash;&ndash;numeric-version</option></primary></indexterm>
+          <indexterm><primary><option>--numeric-version</option></primary></indexterm>
         </term>
         <listitem>
           <para>Print GHC's numeric version number only.</para>
@@ -513,7 +526,7 @@
           <cmdsynopsis>
             <command>ghc --print-libdir</command>
           </cmdsynopsis>
-          <indexterm><primary><option>&ndash;&ndash;print-libdir</option></primary></indexterm>
+          <indexterm><primary><option>--print-libdir</option></primary></indexterm>
         </term>
         <listitem>
           <para>Print the path to GHC's library directory.  This is
@@ -530,8 +543,8 @@
     </variablelist>
 
     <sect2 id="make-mode">
-      <title>Using <command>ghc</command> <option>&ndash;&ndash;make</option></title>
-      <indexterm><primary><option>&ndash;&ndash;make</option></primary></indexterm>
+      <title>Using <command>ghc</command> <option>--make</option></title>
+      <indexterm><primary><option>--make</option></primary></indexterm>
       <indexterm><primary>separate compilation</primary></indexterm>
 
       <para>In this mode, GHC will build a multi-module Haskell program by following
@@ -542,7 +555,7 @@
       program like this:</para>
 
 <screen>
-ghc &ndash;&ndash;make Main.hs
+ghc --make Main.hs
 </screen>
 
       <para>
@@ -563,7 +576,7 @@
       program will also be linked into an executable.</para>
 
       <para>The main advantages to using <literal>ghc
-      &ndash;&ndash;make</literal> over traditional
+      --make</literal> over traditional
       <literal>Makefile</literal>s are:</para>
 
       <itemizedlist>
@@ -571,7 +584,7 @@
           <para>GHC doesn't have to be restarted for each compilation,
           which means it can cache information between compilations.
           Compiling a multi-module program with <literal>ghc
-          &ndash;&ndash;make</literal> can be up to twice as fast as
+          --make</literal> can be up to twice as fast as
           running <literal>ghc</literal> individually on each source
           file.</para>
         </listitem>
@@ -584,11 +597,16 @@
           invoked, so the dependencies never get out of sync with the
           source.</para>
         </listitem>
+        <listitem>
+          <para>Using the <literal>-j</literal> flag, you can compile
+          modules in parallel. Specify <literal>-jN</literal> to
+          compile <replaceable>N</replaceable> jobs in parallel.</para>
+        </listitem>
       </itemizedlist>
 
       <para>Any of the command-line options described in the rest of
       this chapter can be used with
-      <option>&ndash;&ndash;make</option>, but note that any options
+      <option>--make</option>, but note that any options
       you give on the command line will apply to all the source files
       compiled, so if you want any options to apply to a single source
       file only, you'll need to use an <literal>OPTIONS_GHC</literal>
@@ -774,9 +792,8 @@
   </sect1>
 
   <sect1 id="options-help">
-    <title>Help and verbosity options</title>
+    <title>Verbosity options</title>
 
-    <indexterm><primary>help options</primary></indexterm>
     <indexterm><primary>verbosity options</primary></indexterm>
 
     <para>See also the <option>--help</option>, <option>--version</option>, <option>--numeric-version</option>,
@@ -828,8 +845,8 @@
               <listitem>
                 <para>Minimal verbosity: print one line per
                 compilation (this is the default when
-                <option>&ndash;&ndash;make</option> or
-                <option>&ndash;&ndash;interactive</option> is on).</para>
+                <option>--make</option> or
+                <option>--interactive</option> is on).</para>
               </listitem>
             </varlistentry>
 
@@ -864,6 +881,43 @@
         </listitem>
       </varlistentry>
 
+
+      <varlistentry>
+        <term><option>--fprint-explicit-foralls, -fprint-explicit-kinds</option>
+          <indexterm><primary><option>-fprint-explicit-foralls</option></primary></indexterm>
+          <indexterm><primary><option>-fprint-explicit-kinds</option></primary></indexterm>
+        </term>
+        <listitem>
+          <para>These two flags control the way in which GHC displays types, in error messages and in GHCi.
+          Using <option>-fprint-explicit-foralls</option> makes GHC print explicit <literal>forall</literal>
+          quantification at the top level of a type; normally this is suppressed.  For example, in GHCi:
+<screen>
+ghci> let f x = x
+ghci> :t f
+f :: a -> a
+ghci> :set -fprint-explicit-foralls
+ghci> :t f
+f :: forall a. a -> a
+</screen>
+         Using <option>-fprint-explicit-kinds</option> makes GHC print kind-foralls and kind applications
+         in types, which are normally suppressed.  This can be important when you are using kind polymorphism.
+         For example:
+<screen>
+ghci> :set -XPolyKinds
+ghci> data T a = MkT
+ghci> :t MkT
+MkT :: T b
+ghci> :set -fprint-explicit-foralls
+ghci> :t MkT
+MkT :: forall (b::k). T b
+ghci> :set -fprint-explicit-kinds
+ghci> :t MkT
+MkT :: forall (k::BOX) (b:k). T b
+</screen>
+         </para>
+        </listitem>
+      </varlistentry>
+
       <varlistentry>
         <term><option>-ferror-spans</option>
           <indexterm><primary><option>-ferror-spans</option></primary>
@@ -949,16 +1003,23 @@
     program.  These are:
     <option>-fwarn-overlapping-patterns</option>,
     <option>-fwarn-warnings-deprecations</option>,
+    <option>-fwarn-amp</option>,
     <option>-fwarn-deprecated-flags</option>,
+    <option>-fwarn-unrecognised-pragmas</option>,
+    <option>-fwarn-pointless-pragmas</option>,
+    <option>-fwarn-duplicate-constraints</option>,
     <option>-fwarn-duplicate-exports</option>,
+    <option>-fwarn-overflowed-literals</option>,
+    <option>-fwarn-empty-enumerations</option>,
     <option>-fwarn-missing-fields</option>,
     <option>-fwarn-missing-methods</option>,
-    <option>-fwarn-lazy-unlifted-bindings</option>,
     <option>-fwarn-wrong-do-bind</option>,
-    <option>-fwarn-unsupported-calling-conventions</option>, and
-    <option>-fwarn-dodgy-foreign-imports</option>.  The following
-    flags are
-    simple ways to select standard &ldquo;packages&rdquo; of warnings:
+    <option>-fwarn-unsupported-calling-conventions</option>,
+    <option>-fwarn-dodgy-foreign-imports</option>,
+    <option>-fwarn-inline-rule-shadowing</option>, and
+    <option>-fwarn-unsupported-llvm-version</option>.
+    The following flags are simple ways to select standard
+    &ldquo;packages&rdquo; of warnings:
     </para>
 
     <variablelist>
@@ -1033,6 +1094,26 @@
     <variablelist>
 
       <varlistentry>
+        <term><option>-fwarn-typed-holes</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-typed-holes</option></primary>
+          </indexterm>
+          <indexterm><primary>warnings</primary></indexterm>
+            <para>When the compiler encounters an unbound local
+            variable prefixed with <literal>_</literal>, or encounters
+            the literal <literal>_</literal> on the right-hand side of
+            an expression, the error message for the unbound term
+            includes the type it needs to type check. It works
+            particularly well with <link
+            linkend="defer-type-errors">deferred type errors</link>.
+            See <xref linkend="typed-holes"/></para>
+
+            <para>This warning is on by default.</para>
+        </listitem>
+      </varlistentry>
+
+
+      <varlistentry>
         <term><option>-fdefer-type-errors</option>:</term>
         <listitem>
           <indexterm><primary><option>-fdefer-type-errors</option></primary>
@@ -1076,6 +1157,20 @@
       </varlistentry>
 
       <varlistentry>
+        <term><option>-fwarn-pointless-pragmas</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-pointless-pragmas</option></primary>
+          </indexterm>
+          <indexterm><primary>warnings</primary></indexterm>
+          <indexterm><primary>pragmas</primary></indexterm>
+          <para>Causes a warning to be emitted when GHC detects that a
+          module contains a pragma that has no effect.</para>
+
+          <para>This option is on by default.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term><option>-fwarn-warnings-deprecations</option>:</term>
         <listitem>
           <indexterm><primary><option>-fwarn-warnings-deprecations</option></primary>
@@ -1092,6 +1187,24 @@
       </varlistentry>
 
       <varlistentry>
+        <term><option>-fwarn-amp</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-amp</option></primary>
+          </indexterm>
+          <indexterm><primary>amp</primary></indexterm>
+          <indexterm><primary>applicative-monad proposal</primary></indexterm>
+          <para>Causes a warning to be emitted when a definition
+          is in conflict with the AMP (Applicative-Monad proosal),
+          namely:
+          1. Instance of Monad without Applicative;
+          2. Instance of MonadPlus without Alternative;
+          3. Custom definitions of join/pure/&lt;*&gt;</para>
+
+          <para>This option is on by default.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term><option>-fwarn-deprecated-flags</option>:</term>
         <listitem>
           <indexterm><primary><option>-fwarn-deprecated-flags</option></primary>
@@ -1164,10 +1277,43 @@
         <listitem>
           <indexterm><primary><option>-fwarn-dodgy-imports</option></primary>
           </indexterm>
-          <para>Causes a warning to be emitted when a datatype
-      <literal>T</literal> is imported
-      with all constructors, i.e. <literal>T(..)</literal>, but has been
-      exported abstractly, i.e. <literal>T</literal>.</para>
+          <para>Causes a warning to be emitted in the following cases:</para>
+          <itemizedlist>
+            <listitem>
+              <para>When a datatype <literal>T</literal> is imported with all
+                constructors, i.e. <literal>T(..)</literal>, but has been
+                exported abstractly, i.e. <literal>T</literal>.
+              </para>
+            </listitem>
+            <listitem>
+              <para>When an <literal>import</literal> statement hides an
+                entity that is not exported.</para>
+            </listitem>
+          </itemizedlist>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-fwarn-overflowed-literals</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-overflowed-literals</option></primary>
+          </indexterm>
+          <para>
+              Causes a warning to be emitted if a literal will overflow,
+              e.g. <literal>300 :: Word8</literal>.
+          </para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-fwarn-empty-enumerations</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-empty-enumerations</option></primary>
+          </indexterm>
+          <para>
+              Causes a warning to be emitted if an enumeration is
+              empty, e.g. <literal>[5 .. 3]</literal>.
+          </para>
         </listitem>
       </varlistentry>
 
@@ -1176,12 +1322,25 @@
         <listitem>
           <indexterm><primary><option>-fwarn-lazy-unlifted-bindings</option></primary>
           </indexterm>
-          <para>Causes a warning to be emitted when an unlifted type
-      is bound in a way that looks lazy, e.g.
-      <literal>where (I# x) = ...</literal>. Use
-      <literal>where !(I# x) = ...</literal> instead. This will be an
-      error, rather than a warning, in GHC 7.2.
-      </para>
+          <para>This flag is a no-op, and will be removed in GHC 7.10.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-fwarn-duplicate-constraints</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-duplicate-constraints</option></primary></indexterm>
+          <indexterm><primary>duplicate constraints, warning</primary></indexterm>
+
+          <para>Have the compiler warn about duplicate constraints in a type signature. For
+          example
+          <programlisting>
+             f :: (Eq a, Show a, Eq a) => a -> a
+          </programlisting>
+          The warning will indicate the duplicated <literal>Eq a</literal> constraint.
+          </para>
+
+          <para>This option is on by default.</para>
         </listitem>
       </varlistentry>
 
@@ -1401,6 +1560,7 @@
             never <literal>_simpleFn</literal>; and (b)
             instance declarations can define either <literal>complexFn</literal> or <literal>_simpleFn</literal>.
             </para>
+          <para>The MINIMAL pragma can be used to change which combination of methods will be required for instances of a particular class. See <xref linkend="minimal-pragma"/>.</para>
         </listitem>
       </varlistentry>
 
@@ -1476,7 +1636,7 @@
             orphan rules or instances.  The flag <option>-fwarn-auto-orphans</option>
             warns about automatically-generated orphan rules, notably as a result of
             specialising functions, for type classes (<literal>Specialise</literal>)
-            or argument values (<literal>SpecConstr</literal>).</para>
+            or argument values (<literal>-fspec-constr</literal>).</para>
         </listitem>
       </varlistentry>
 
@@ -1787,12 +1947,59 @@
       them explicitly (indeed, doing so could lead to unexpected
       results).  A flag <option>-fwombat</option> can be negated by 
       saying <option>-fno-wombat</option>.  The flags below are off
-      by default, except where noted below.
+      by default, except where noted below.  See <xref linkend="options-f-compact"/> 
+      for a compact list.
      </para>
 
       <variablelist>
         <varlistentry>
           <term>
+            <option>-favoid-vect</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Part of <link linkend="dph">Data Parallel Haskell
+            (DPH)</link>.</para>
+
+            <para><emphasis>Off by default.</emphasis> Enable the
+            <emphasis>vectorisation</emphasis> avoidance optimisation. This
+            optimisation only works when used in combination with the
+            <option>-fvectorise</option> transformation.</para>
+
+            <para>While vectorisation of code using DPH is often a big win, it
+            can also produce worse results for some kinds of code. This
+            optimisation modifies the vectorisation transformation to try to
+            determine if a function would be better of unvectorised and if
+            so, do just that.</para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fcase-merge</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>On by default.</emphasis> 
+            Merge immediately-nested case expressions that scrutinse the same variable. Example
+<programlisting>
+  case x of
+     Red -> e1
+     _   -> case x of 
+              Blue -> e2
+              Green -> e3
+==>
+  case x of
+     Red -> e1
+     Blue -> e2
+     Green -> e2
+</programlisting>
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
             <option>-fcse</option>
             <indexterm><primary><option>-fcse</option></primary></indexterm>
           </term>
@@ -1806,122 +2013,88 @@
 
         <varlistentry>
           <term>
-            <option>-fstrictness</option>
+            <option>-fdicts-cheap</option>
             <indexterm><primary><option></option></primary></indexterm>
           </term>
           <listitem>
-            <para> <emphasis>On by default.</emphasis>.  
-            Switch on the strictness analyser. There is a very old paper about GHC's 
-            strictness analyser, <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/simple-strictnes-analyser.ps.gz">
-              Measuring the effectiveness of a simple strictness analyser</ulink>,
-            but the current one is quite a bit different.
-            </para>
-
-            <para>The strictness analyser figures out when arguments and
-            variables in a function can be treated 'strictly' (that is they
-            are always evaluated in the function at some point). This allow
-            GHC to apply certain optimisations such as unboxing that
-            otherwise don't apply as they change the semantics of the program
-            when applied to lazy arguments.
+            <para>A very experimental flag that makes dictionary-valued
+            expressions seem cheap to the optimiser.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-funbox-strict-fields</option>:
-            <indexterm><primary><option>-funbox-strict-fields</option></primary></indexterm>
-            <indexterm><primary>strict constructor fields</primary></indexterm>
-            <indexterm><primary>constructor fields, strict</primary></indexterm>
+            <option>-fdo-lambda-eta-expansion</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
           <listitem>
-            <para>This option causes all constructor fields which are marked
-            strict (i.e. &ldquo;!&rdquo;) to be unpacked if possible. It is
-            equivalent to adding an <literal>UNPACK</literal> pragma to every
-            strict constructor field (see <xref linkend="unpack-pragma"/>).
+            <para><emphasis>On by default.</emphasis>
+            Eta-expand let-bindings to increase their arity.
             </para>
-
-            <para>This option is a bit of a sledgehammer: it might sometimes
-            make things worse. Selectively unboxing fields by using
-            <literal>UNPACK</literal> pragmas might be better. An alternative
-            is to use <option>-funbox-strict-fields</option> to turn on
-            unboxing by default but disable it for certain constructor
-            fields using the <literal>NOUNPACK</literal> pragma (see
-            <xref linkend="nounpack-pragma"/>).</para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fspec-constr</option>
-            <indexterm><primary><option>-fspec-constr</option></primary></indexterm>
+            <option>-fdo-eta-reduction</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>Off by default, but enabled by -O2.</emphasis>
-            Turn on call-pattern specialisation; see
-            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/spec-constr/index.htm">
-              Call-pattern specialisation for Haskell programs</ulink>.
-            </para>
-
-            <para>This optimisation specializes recursive functions according to
-            their argument "shapes". This is best explained by example so
-            consider:
-<programlisting>
-last :: [a] -> a
-last [] = error "last"
-last (x : []) = x
-last (x : xs) = last xs
-</programlisting>
-            In this code, once we pass the initial check for an empty list we
-            know that in the recursive case this pattern match is redundant. As
-            such <option>-fspec-constr</option> will transform the above code
-            to:
-<programlisting>
-last :: [a] -> a
-last []       = error "last"
-last (x : xs) = last' x xs
-    where
-      last' x []       = x
-      last' x (y : ys) = last' y ys
-</programlisting>
+            <para><emphasis>On by default.</emphasis>
+            Eta-reduce lambda expressions, if doing so gets rid of a whole
+            group of lambdas.
             </para>
+          </listitem>
+        </varlistentry>
 
-            <para>As well avoid unnecessary pattern matching it also helps avoid
-            unnecessary allocation. This applies when a argument is strict in
-            the recursive call to itself but not on the initial entry. As
-            strict recursive branch of the function is created similar to the
-            above example.
+        <varlistentry>
+          <term>
+            <option>-feager-blackholing</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Usually GHC black-holes a thunk only when it switches
+            threads. This flag makes it do so as soon as the thunk is
+            entered. See <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/">
+              Haskell on a shared-memory multiprocessor</ulink>.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fspecialise</option>
-            <indexterm><primary><option>-fspecialise</option></primary></indexterm>
+            <option>-fexcess-precision</option>
+            <indexterm><primary><option>-fexcess-precision</option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>On by default.</emphasis>
-            Specialise each type-class-overloaded function defined in this
-            module for the types at which it is called in this module.  Also
-            specialise imported functions that have an INLINABLE pragma
-            (<xref linkend="inlinable-pragma"/>) for the types at which they
-            are called in this module.
+            <para>When this option is given, intermediate floating
+            point values can have a <emphasis>greater</emphasis>
+            precision/range than the final type.  Generally this is a
+            good thing, but some programs may rely on the exact
+            precision/range of
+            <literal>Float</literal>/<literal>Double</literal> values
+            and should not use this option for their compilation.</para>
+
+            <para>
+              Note that the 32-bit x86 native code generator only
+              supports excess-precision mode, so neither
+              <option>-fexcess-precision</option> nor
+              <option>-fno-excess-precision</option> has any effect.
+              This is a known bug, see <xref linkend="bugs-ghc" />.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fstatic-argument-transformation</option>
-            <indexterm><primary><option>-fstatic-argument-transformation</option></primary></indexterm>
+            <option>-fexpose-all-unfoldings</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
           <listitem>
-            <para>Turn on the static argument transformation, which turns a
-            recursive function into a non-recursive one with a local
-            recursive loop. See Chapter 7 of
-            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/santos-thesis.ps.gz">
-              Andre Santos's PhD thesis</ulink>
+            <para>An experimental flag to expose all unfoldings, even for very
+            large or recursive functions. This allows for all functions to be
+            inlined while usually GHC would avoid inlining larger functions.
             </para>
           </listitem>
         </varlistentry>
@@ -1984,55 +2157,65 @@
 
         <varlistentry>
           <term>
-            <option>-fdo-lambda-eta-expansion</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-ffun-to-thunk</option>
+            <indexterm><primary><option>-ffun-to-thunk</option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>On by default.</emphasis>
-            Eta-expand let-bindings to increase their arity.
+            <para>Worker-wrapper removes unused arguments, but usually we do
+            not remove them all, lest it turn a function closure into a thunk,
+            thereby perhaps creating a space leak and/or disrupting inlining.
+            This flag allows worker/wrapper to remove <emphasis>all</emphasis>
+            value lambdas.  Off by default.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fdo-eta-reduction</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fignore-asserts</option>
+            <indexterm><primary><option>-fignore-asserts</option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>On by default.</emphasis>
-            Eta-reduce lambda expressions, if doing so gets rid of a whole
-            group of lambdas.
+            <para>Causes GHC to ignore uses of the function
+            <literal>Exception.assert</literal> in source code (in
+            other words, rewriting <literal>Exception.assert p
+            e</literal> to <literal>e</literal> (see <xref
+            linkend="assertions"/>).  This flag is turned on by
+            <option>-O</option>.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fcase-merge</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fignore-interface-pragmas</option>
+            <indexterm><primary><option>-fignore-interface-pragmas</option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>On by default.</emphasis> 
-            Merge immediately-nested case expressions that scrutinse the same variable. Example
-<programlisting>
-  case x of
-     Red -> e1
-     _   -> case x of 
-              Blue -> e2
-              Green -> e3
-==>
-  case x of
-     Red -> e1
-     Blue -> e2
-     Green -> e2
-</programlisting>
-            </para>
+            <para>Tells GHC to ignore all inessential information when reading interface files.
+            That is, even if <filename>M.hi</filename> contains unfolding or strictness information
+            for a function, GHC will ignore that information.</para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
+            <option>-flate-dmd-anal</option>
+            <indexterm><primary><option>-flate-dmd-anal</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>Off by default.</emphasis>Run demand analysis
+            again, at the end of the simplification pipeline.  We found some opportunities
+            for discovering strictness that were not visible earlier; and optimisations like
+            <literal>-fspec-constr</literal> can create functions with unused arguments which
+            are eliminated by late demand analysis.  Improvements are modest, but so is the
+            cost.  See notes on the <ulink href="http://ghc.haskell.org/trac/ghc/wiki/LateDmd">Trac wiki page</ulink>.
+            </para>
+            </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
             <option>-fliberate-case</option>
             <indexterm><primary><option>-fliberate-case</option></primary></indexterm>
           </term>
@@ -2049,26 +2232,27 @@
 
         <varlistentry>
           <term>
-            <option>-fdicts-cheap</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fliberate-case-threshold=N</option>
+            <indexterm><primary><option>-fliberate-case-threshold</option></primary></indexterm>
           </term>
           <listitem>
-            <para>A very experimental flag that makes dictionary-valued
-            expressions seem cheap to the optimiser.
+            <para>Set the size threshold for the liberate-case transformation.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-feager-blackholing</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fmax-relevant-bindings=N</option>
+            <indexterm><primary><option>-fmax-relevant-bindings</option></primary></indexterm>
           </term>
           <listitem>
-            <para>Usually GHC black-holes a thunk only when it switches
-            threads. This flag makes it do so as soon as the thunk is
-            entered. See <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/">
-              Haskell on a shared-memory multiprocessor</ulink>.
+            <para>The type checker sometimes displays a fragment of the type environment
+                  in error messages, but only up to some maximum number, set by this flag.
+                  The default is 6.  Turning it off with <option>-fno-max-relevant-bindings</option> 
+                   gives an unlimited number. Syntactically top-level bindings are also 
+                   usually excluded (since they may be numerous), but 
+                   <option>-fno-max-relevant-bindings</option> includes them too.
             </para>
           </listitem>
         </varlistentry>
@@ -2090,6 +2274,42 @@
 
         <varlistentry>
           <term>
+            <option>-fomit-interface-pragmas</option>
+            <indexterm><primary><option>-fomit-interface-pragmas</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Tells GHC to omit all inessential information from the
+            interface file generated for the module being compiled (say M).
+            This means that a module importing M will see only the
+            <emphasis>types</emphasis> of the functions that M exports, but
+            not their unfoldings, strictness info, etc.  Hence, for example,
+            no function exported by M will be inlined into an importing module.
+            The benefit is that modules that import M will need to be
+            recompiled less often (only when M's exports change their type, not
+            when they change their implementation).</para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fomit-yields</option>
+            <indexterm><primary><option>-fomit-yields</option></primary></indexterm>
+          </term>
+          <listitem>
+              <para><emphasis>On by default.</emphasis>  Tells GHC to omit
+            heap checks when no allocation is being performed.  While this improves
+            binary sizes by about 5%, it also means that threads run in
+            tight non-allocating loops will not get preempted in a timely
+            fashion.  If it is important to always be able to interrupt such
+            threads, you should turn this optimization off.  Consider also
+            recompiling all libraries with this optimization turned off, if you
+            need to guarantee interruptibility.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
             <option>-fpedantic-bottoms</option>
             <indexterm><primary><option>-fpedantic-bottoms</option></primary></indexterm>
           </term>
@@ -2105,6 +2325,38 @@
 
         <varlistentry>
           <term>
+            <option>-fregs-graph</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>Off by default, but enabled by -O2. Only applies in
+              combination with the native code generator.</emphasis>
+            Use the graph colouring register allocator for register allocation
+            in the native code generator. By default, GHC uses a simpler,
+            faster linear register allocator. The downside being that the
+            linear register allocator usually generates worse code.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fregs-iterative</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>Off by default, only applies in combination with
+              the native code generator.</emphasis>
+            Use the iterative coalescing graph colouring register allocator for
+            register allocation in the native code generator. This is the same
+            register allocator as the <option>-freg-graph</option> one but also
+            enables iterative coalescing during register allocation.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
             <option>-fsimpl-tick-factor=<replaceable>n</replaceable></option>
             <indexterm><primary><option>-fsimpl-tick-factor</option></primary></indexterm>
           </term>
@@ -2186,140 +2438,227 @@
 
         <varlistentry>
           <term>
-            <option>-fexpose-all-unfoldings</option>
+            <option>-fvectorise</option>
             <indexterm><primary><option></option></primary></indexterm>
           </term>
           <listitem>
-            <para>An experimental flag to expose all unfoldings, even for very
-            large or recursive functions. This allows for all functions to be
-            inlined while usually GHC would avoid inlining larger functions.
-            </para>
+            <para>Part of <link linkend="dph">Data Parallel Haskell
+            (DPH)</link>.</para>
+
+            <para><emphasis>Off by default.</emphasis> Enable the
+            <emphasis>vectorisation</emphasis> optimisation transformation. This
+            optimisation transforms the nested data parallelism code of programs
+            using DPH into flat data parallelism. Flat data parallel programs
+            should have better load balancing, enable SIMD parallelism and
+            friendlier cache behaviour.</para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fvectorise</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fspec-constr</option>
+            <indexterm><primary><option>-fspec-constr</option></primary></indexterm>
           </term>
           <listitem>
-            <para>Data Parallel Haskell.
+            <para><emphasis>Off by default, but enabled by -O2.</emphasis>
+            Turn on call-pattern specialisation; see
+            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/spec-constr/index.htm">
+              Call-pattern specialisation for Haskell programs</ulink>.
             </para>
-            TODO: Document optimisation
-          </listitem>
-        </varlistentry>
 
-        <varlistentry>
-          <term>
-            <option>-favoid-vect</option>
-            <indexterm><primary><option></option></primary></indexterm>
-          </term>
-          <listitem>
-            <para>Data Parallel Haskell.
+            <para>This optimisation specializes recursive functions according to
+            their argument "shapes". This is best explained by example so
+            consider:
+<programlisting>
+last :: [a] -> a
+last [] = error "last"
+last (x : []) = x
+last (x : xs) = last xs
+</programlisting>
+            In this code, once we pass the initial check for an empty list we
+            know that in the recursive case this pattern match is redundant. As
+            such <option>-fspec-constr</option> will transform the above code
+            to:
+<programlisting>
+last :: [a] -> a
+last []       = error "last"
+last (x : xs) = last' x xs
+    where
+      last' x []       = x
+      last' x (y : ys) = last' y ys
+</programlisting>
             </para>
-            TODO: Document optimisation
+
+            <para>As well avoid unnecessary pattern matching it also helps avoid
+            unnecessary allocation. This applies when a argument is strict in
+            the recursive call to itself but not on the initial entry. As
+            strict recursive branch of the function is created similar to the
+            above example.
+            </para>
+
+            <para>It is also possible for library writers to instruct
+            GHC to perform call-pattern specialisation extremely
+            aggressively. This is necessary for some highly optimized
+            libraries, where we may want to specialize regardless of
+            the number of specialisations, or the size of the code. As
+            an example, consider a simplified use-case from the
+            <literal>vector</literal> library:</para>
+<programlisting>
+import GHC.Types (SPEC(..))
+
+foldl :: (a -> b -> a) -> a -> Stream b -> a
+{-# INLINE foldl #-}
+foldl f z (Stream step s _) = foldl_loop SPEC z s
+  where
+    foldl_loop !sPEC z s = case step s of
+                            Yield x s' -> foldl_loop sPEC (f z x) s'
+                            Skip       -> foldl_loop sPEC z s'
+                            Done       -> z
+</programlisting>
+
+            <para>Here, after GHC inlines the body of
+            <literal>foldl</literal> to a call site, it will perform
+            call-pattern specialization very aggressively on
+            <literal>foldl_loop</literal> due to the use of
+            <literal>SPEC</literal> in the argument of the loop
+            body. <literal>SPEC</literal> from
+            <literal>GHC.Types</literal> is specifically recognized by
+            the compiler.</para>
+
+            <para>(NB: it is extremely important you use
+            <literal>seq</literal> or a bang pattern on the
+            <literal>SPEC</literal> argument!)</para>
+
+            <para>In particular, after inlining this will
+            expose <literal>f</literal> to the loop body directly,
+            allowing heavy specialisation over the recursive
+            cases.</para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fregs-graph</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fspecialise</option>
+            <indexterm><primary><option>-fspecialise</option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>Off by default, but enabled by -O2. Only applies in
-              combination with the native code generator.</emphasis>
-            Use the graph colouring register allocator for register allocation
-            in the native code generator. By default, GHC uses a simpler,
-            faster linear register allocator. The downside being that the
-            linear register allocator usually generates worse code.
+            <para><emphasis>On by default.</emphasis>
+            Specialise each type-class-overloaded function defined in this
+            module for the types at which it is called in this module.  Also
+            specialise imported functions that have an INLINABLE pragma
+            (<xref linkend="inlinable-pragma"/>) for the types at which they
+            are called in this module.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fregs-iterative</option>
-            <indexterm><primary><option></option></primary></indexterm>
+            <option>-fstatic-argument-transformation</option>
+            <indexterm><primary><option>-fstatic-argument-transformation</option></primary></indexterm>
           </term>
           <listitem>
-            <para><emphasis>Off by default, only applies in combination with
-              the native code generator.</emphasis>
-            Use the iterative coalescing graph colouring register allocator for
-            register allocation in the native code generator. This is the same
-            register allocator as the <option>-freg-graph</option> one but also
-            enables iterative coalescing during register allocation.
+            <para>Turn on the static argument transformation, which turns a
+            recursive function into a non-recursive one with a local
+            recursive loop. See Chapter 7 of
+            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/santos-thesis.ps.gz">
+              Andre Santos's PhD thesis</ulink>
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fexcess-precision</option>
-            <indexterm><primary><option>-fexcess-precision</option></primary></indexterm>
+            <option>-fstrictness</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
           <listitem>
-            <para>When this option is given, intermediate floating
-            point values can have a <emphasis>greater</emphasis>
-            precision/range than the final type.  Generally this is a
-            good thing, but some programs may rely on the exact
-            precision/range of
-            <literal>Float</literal>/<literal>Double</literal> values
-            and should not use this option for their compilation.</para>
+            <para> <emphasis>On by default.</emphasis>.  
+            Switch on the strictness analyser. There is a very old paper about GHC's 
+            strictness analyser, <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/simple-strictnes-analyser.ps.gz">
+              Measuring the effectiveness of a simple strictness analyser</ulink>,
+            but the current one is quite a bit different.
+            </para>
 
-            <para>
-              Note that the 32-bit x86 native code generator only
-              supports excess-precision mode, so neither
-              <option>-fexcess-precision</option> nor
-              <option>-fno-excess-precision</option> has any effect.
-              This is a known bug, see <xref linkend="bugs-ghc" />.
+            <para>The strictness analyser figures out when arguments and
+            variables in a function can be treated 'strictly' (that is they
+            are always evaluated in the function at some point). This allow
+            GHC to apply certain optimisations such as unboxing that
+            otherwise don't apply as they change the semantics of the program
+            when applied to lazy arguments.
             </para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fignore-asserts</option>
-            <indexterm><primary><option>-fignore-asserts</option></primary></indexterm>
+            <option>-funbox-strict-fields</option>:
+            <indexterm><primary><option>-funbox-strict-fields</option></primary></indexterm>
+            <indexterm><primary>strict constructor fields</primary></indexterm>
+            <indexterm><primary>constructor fields, strict</primary></indexterm>
           </term>
           <listitem>
-            <para>Causes GHC to ignore uses of the function
-            <literal>Exception.assert</literal> in source code (in
-            other words, rewriting <literal>Exception.assert p
-            e</literal> to <literal>e</literal> (see <xref
-            linkend="assertions"/>).  This flag is turned on by
-            <option>-O</option>.
+            <para>This option causes all constructor fields which are marked
+            strict (i.e. &ldquo;!&rdquo;) to be unpacked if possible. It is
+            equivalent to adding an <literal>UNPACK</literal> pragma to every
+            strict constructor field (see <xref linkend="unpack-pragma"/>).
             </para>
-          </listitem>
-        </varlistentry>
 
-        <varlistentry>
-          <term>
-            <option>-fignore-interface-pragmas</option>
-            <indexterm><primary><option>-fignore-interface-pragmas</option></primary></indexterm>
-          </term>
-          <listitem>
-            <para>Tells GHC to ignore all inessential information when reading interface files.
-            That is, even if <filename>M.hi</filename> contains unfolding or strictness information
-            for a function, GHC will ignore that information.</para>
+            <para>This option is a bit of a sledgehammer: it might sometimes
+            make things worse. Selectively unboxing fields by using
+            <literal>UNPACK</literal> pragmas might be better. An alternative
+            is to use <option>-funbox-strict-fields</option> to turn on
+            unboxing by default but disable it for certain constructor
+            fields using the <literal>NOUNPACK</literal> pragma (see
+            <xref linkend="nounpack-pragma"/>).</para>
           </listitem>
         </varlistentry>
 
         <varlistentry>
           <term>
-            <option>-fomit-interface-pragmas</option>
-            <indexterm><primary><option>-fomit-interface-pragmas</option></primary></indexterm>
+            <option>-funbox-small-strict-fields</option>:
+            <indexterm><primary><option>-funbox-small-strict-fields</option></primary></indexterm>
+            <indexterm><primary>strict constructor fields</primary></indexterm>
+            <indexterm><primary>constructor fields, strict</primary></indexterm>
           </term>
           <listitem>
-            <para>Tells GHC to omit all inessential information from the
-            interface file generated for the module being compiled (say M).
-            This means that a module importing M will see only the
-            <emphasis>types</emphasis> of the functions that M exports, but
-            not their unfoldings, strictness info, etc.  Hence, for example,
-            no function exported by M will be inlined into an importing module.
-            The benefit is that modules that import M will need to be
-            recompiled less often (only when M's exports change their type, not
-            when they change their implementation).</para>
+            <para><emphasis>On by default.</emphasis>. This option
+            causes all constructor fields which are marked strict
+            (i.e. &ldquo;!&rdquo;) and which representation is smaller
+            or equal to the size of a pointer to be unpacked, if
+            possible. It is equivalent to adding an
+            <literal>UNPACK</literal> pragma (see <xref
+            linkend="unpack-pragma"/>) to every strict constructor
+            field that fulfils the size restriction.
+            </para>
+
+            <para>For example, the constructor fields in the following
+            data types
+<programlisting>
+data A = A !Int
+data B = B !A
+newtype C = C B
+data D = D !C
+</programlisting>
+            would all be represented by a single
+            <literal>Int#</literal> (see <xref linkend="primitives"/>)
+            value with
+            <option>-funbox-small-strict-fields</option> enabled.
+            </para>
+
+            <para>This option is less of a sledgehammer than
+            <option>-funbox-strict-fields</option>: it should rarely make things
+            worse. If you use <option>-funbox-small-strict-fields</option>
+            to turn on unboxing by default you can disable it for certain
+            constructor fields using the <literal>NOUNPACK</literal> pragma (see
+            <xref linkend="nounpack-pragma"/>).</para>
+
+            <para>
+            Note that for consistency <literal>Double</literal>,
+            <literal>Word64</literal>, and <literal>Int64</literal> constructor
+            fields are unpacked on 32-bit platforms, even though they are
+            technically larger than a pointer on those platforms.
+            </para>
           </listitem>
         </varlistentry>
 
@@ -2662,7 +3001,7 @@
 
     </variablelist>
 
-<para>Currently (as of version 6.8.2), GHC does not have the ability to read in External Core files as source. If you would like GHC to have this ability, please <ulink url="http://hackage.haskell.org/trac/ghc/wiki/MailingListsAndIRC">make your wishes known to the GHC Team</ulink>.</para>
+<para>Currently (as of version 6.8.2), GHC does not have the ability to read in External Core files as source. If you would like GHC to have this ability, please <ulink url="http://ghc.haskell.org/trac/ghc/wiki/MailingListsAndIRC">make your wishes known to the GHC Team</ulink>.</para>
 
 </sect1>
 
diff -urd 7.6.3-original/utils.xml original/utils.xml
--- 7.6.3-original/utils.xml	2014-06-27 09:19:05.766249491 +0900
+++ original/utils.xml	2014-04-08 03:26:08.000000000 +0900
@@ -187,7 +187,7 @@
       <variablelist>
 	<varlistentry>
 	  <term><literal>-o FILE</literal> or
-	  <literal>&ndash;&ndash;output=FILE</literal></term>
+	  <literal>--output=FILE</literal></term>
 	  <listitem>
 	    <para>Name of the Haskell file.</para>
 	  </listitem>
@@ -195,7 +195,7 @@
 
 	<varlistentry>
 	  <term><literal>-t FILE</literal> or
-	  <literal>&ndash;&ndash;template=FILE</literal></term>
+	  <literal>--template=FILE</literal></term>
 	  <listitem>
 	    <para>The template file (see below).</para>
 	  </listitem>
@@ -203,7 +203,7 @@
 
 	<varlistentry>
 	  <term><literal>-c PROG</literal> or
-	  <literal>&ndash;&ndash;cc=PROG</literal></term>
+	  <literal>--cc=PROG</literal></term>
 	  <listitem>
 	    <para>The C compiler to use (default:
 	    <command>gcc</command>)</para>
@@ -212,7 +212,7 @@
 
 	<varlistentry>
 	  <term><literal>-l PROG</literal> or
-	  <literal>&ndash;&ndash;ld=PROG</literal></term>
+	  <literal>--ld=PROG</literal></term>
 	  <listitem>
 	    <para>The linker to use (default:
 	    <command>gcc</command>).</para>
@@ -221,7 +221,7 @@
 
 	<varlistentry>
 	  <term><literal>-C FLAG</literal> or
-	  <literal>&ndash;&ndash;cflag=FLAG</literal></term>
+	  <literal>--cflag=FLAG</literal></term>
 	  <listitem>
 	    <para>An extra flag to pass to the C compiler.</para>
 	  </listitem>
@@ -236,7 +236,7 @@
 
 	<varlistentry>
 	  <term><literal>-L FLAG</literal> or
-	  <literal>&ndash;&ndash;lflag=FLAG</literal></term>
+	  <literal>--lflag=FLAG</literal></term>
 	  <listitem>
 	    <para>An extra flag to pass to the linker.</para>
 	  </listitem>
@@ -244,7 +244,7 @@
 
 	<varlistentry>
 	  <term><literal>-i FILE</literal> or
-	  <literal>&ndash;&ndash;include=FILE</literal></term>
+	  <literal>--include=FILE</literal></term>
 	  <listitem>
 	    <para>As if the appropriate <literal>#include</literal>
             directive was placed in the source.</para>
@@ -253,7 +253,7 @@
 
 	<varlistentry>
 	  <term><literal>-D NAME[=VALUE]</literal> or
-	  <literal>&ndash;&ndash;define=NAME[=VALUE]</literal></term>
+	  <literal>--define=NAME[=VALUE]</literal></term>
 	  <listitem>
 	    <para>As if the appropriate <literal>#define</literal>
             directive was placed in the source.</para>
@@ -261,7 +261,7 @@
 	</varlistentry>
 
 	<varlistentry>
-	  <term><literal>&ndash;&ndash;no-compile</literal></term>
+	  <term><literal>--no-compile</literal></term>
 	  <listitem>
 	    <para>Stop after writing out the intermediate C program to disk.
 	    The file name for the intermediate C program is the input file name
@@ -271,7 +271,7 @@
 
 	<varlistentry>
 	  <term><literal>-k</literal> or
-	  <literal>&ndash;&ndash;keep-files</literal></term>
+	  <literal>--keep-files</literal></term>
 	  <listitem>
 	    <para>Proceed as normal, but do not delete any intermediate files.</para>
 	  </listitem>
@@ -279,14 +279,14 @@
 
 	<varlistentry>
 	  <term><literal>-x</literal> or
-	  <literal>&ndash;&ndash;cross-compile</literal></term>
+	  <literal>--cross-compile</literal></term>
 	  <listitem>
 	    <para>Activate cross-compilation mode (see <xref linkend="hsc2hs_cross"/>).</para>
 	  </listitem>
 	</varlistentry>
 
 	<varlistentry>
-	  <term><literal>&ndash;&ndash;cross-safe</literal></term>
+	  <term><literal>--cross-safe</literal></term>
 	  <listitem>
 	    <para>Restrict the .hsc directives to those supported by the
             <literal>--cross-compile</literal> mode (see <xref linkend="hsc2hs_cross"/>).
@@ -298,14 +298,14 @@
 
 
 	<varlistentry>
-	  <term><literal>-?</literal> or <literal>&ndash;&ndash;help</literal></term>
+	  <term><literal>-?</literal> or <literal>--help</literal></term>
 	  <listitem>
 	    <para>Display a summary of the available flags and exit successfully.</para>
 	  </listitem>
 	</varlistentry>
 
 	<varlistentry>
-	  <term><literal>-V</literal> or <literal>&ndash;&ndash;version</literal></term>
+	  <term><literal>-V</literal> or <literal>--version</literal></term>
 	  <listitem>
 	    <para>Output version information and exit successfully.</para>
 	  </listitem>
diff -urd 7.6.3-original/what_glasgow_exts_does.gen.xml original/what_glasgow_exts_does.gen.xml
--- 7.6.3-original/what_glasgow_exts_does.gen.xml	2014-06-27 09:19:05.984243713 +0900
+++ original/what_glasgow_exts_does.gen.xml	2014-06-27 09:59:33.682802308 +0900
@@ -16,7 +16,6 @@
 <option>-XMultiParamTypeClasses</option>,
 <option>-XFunctionalDependencies</option>,
 <option>-XMagicHash</option>,
-<option>-XPolymorphicComponents</option>,
 <option>-XExistentialQuantification</option>,
 <option>-XUnicodeSyntax</option>,
 <option>-XPostfixOperators</option>,
diff -urd 7.6.3-original/win32-dlls.xml original/win32-dlls.xml
--- 7.6.3-original/win32-dlls.xml	2014-06-27 09:19:05.962244296 +0900
+++ original/win32-dlls.xml	2014-04-08 03:26:08.000000000 +0900
@@ -313,7 +313,7 @@
 
 <para>
 <indexterm><primary>Creating a Win32 DLL</primary></indexterm>
-<indexterm><primary>&ndash;shared</primary></indexterm>
+<indexterm><primary>-shared</primary></indexterm>
 Sealing up your Haskell library inside a DLL is straightforward;
 compile up the object files that make up the library, and then build
 the DLL by issuing a command of the form:
@@ -321,12 +321,12 @@
 
 <para>
 <screen>
-ghc &ndash;shared -o foo.dll bar.o baz.o wibble.a -lfooble
+ghc -shared -o foo.dll bar.o baz.o wibble.a -lfooble
 </screen>
 </para>
 
 <para>
-By feeding the ghc compiler driver the option <option>&ndash;shared</option>, it
+By feeding the ghc compiler driver the option <option>-shared</option>, it
 will build a DLL rather than produce an executable. The DLL will
 consist of all the object files and archives given on the command
 line.
@@ -366,12 +366,12 @@
 <listitem>
 <para>
 By default, the entry points of all the object files will be exported from
-the DLL when using <option>&ndash;shared</option>. Should you want to constrain
+the DLL when using <option>-shared</option>. Should you want to constrain
 this, you can specify the <emphasis>module definition file</emphasis> to use
 on the command line as follows:
 
 <screen>
-ghc &ndash;shared -o .... MyDef.def
+ghc -shared -o .... MyDef.def
 </screen>
 
 See Microsoft documentation for details, but a module definition file
@@ -390,7 +390,7 @@
 
 <listitem>
 <para>
-In addition to creating a DLL, the <option>&ndash;shared</option> option also
+In addition to creating a DLL, the <option>-shared</option> option also
 creates an import library. The import library name is derived from the
 name of the DLL, as follows:
 
@@ -486,7 +486,7 @@
   severe restrictions on which actions can be performed during
   <literal>DllMain</literal>, and <literal>hs_init</literal> violates these
   restrictions, which can lead to your dll freezing during startup (see
-  <ulink url="http://hackage.haskell.org/trac/ghc/ticket/3605">bug
+  <ulink url="http://ghc.haskell.org/trac/ghc/ticket/3605">bug
   #3605</ulink>).
 </para>
 
