7.4.2-originalだけに発見: 7.2.1-notes.xml
7.4.2-originalだけに発見: 7.2.2-notes.xml
7.4.2-originalだけに発見: 7.4.1-notes.xml
7.4.2-originalだけに発見: 7.4.2-notes.xml
originalだけに発見: 7.6.1-notes.xml
diff -urd 7.4.2-original/bugs.xml original/bugs.xml
--- 7.4.2-original/bugs.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/bugs.xml	2012-09-05 02:10:15.000000000 +0900
@@ -107,17 +107,31 @@
   <sect3 id="infelicities-exprs-pats">
       <title>Expressions and patterns</title>
 
-	<para>None known.</para>
+    <para>In its default mode, GHC makes some programs sligtly more defined 
+    than they should be. For example, consider
+    <programlisting>
+f :: [a] -> b -> b
+f [] = error "urk"
+f (x:xs) = \v -> v
+
+main = print (f [] `seq` True)
+    </programlisting>
+This should call <literal>error</literal> but actually prints <literal>True</literal>.
+Reason: GHC eta-expands <literal>f</literal> to
+    <programlisting>
+f :: [a] -> b -> b
+f []     v = error "urk"
+f (x:xs) v = v
+    </programlisting>
+This improves efficiency slightly but significantly for most programs, and
+is bad for only a few.  To suppress this bogus "optimisation" use <option>-fpedantic-bottoms</option>.
+</para>
+
     </sect3>
 
     <sect3 id="infelicities-decls">
       <title>Declarations and bindings</title>
 
-      <para>GHC's typechecker makes all pattern bindings monomorphic
-      by default; this behaviour can be disabled with
-      <option>-XNoMonoPatBinds</option>.  See <xref
-      linkend="options-language" />.</para>
-
       <para>In its default mode, GHC does not accept datatype contexts,
       as it has been decided to remove them from the next version of the
       language standard. This behaviour can be controlled with the
@@ -183,6 +197,65 @@
 	  </varlistentry>
 
 	<varlistentry>
+	  <term>Bits superclasses</term>
+	  <listitem>
+	    <para>
+              The <literal>Bits</literal> class does not have
+              a <literal>Num</literal> superclasses. It therefore
+              does not have default methods for the
+              <literal>bit</literal>,
+              <literal>testBit</literal> and
+              <literal>popCount</literal> methods.
+            </para>
+
+	    <para>
+              You can make code that works with both
+              Haskell2010 and GHC by:
+              <itemizedlist>
+                <listitem>
+                  <para>
+                    Whenever you make a <literal>Bits</literal> instance
+                    of a type, also make a <literal>Num</literal>
+                    instance, and
+                  </para>
+                </listitem>
+                <listitem>
+                  <para>
+                    Whenever you give a function, instance or class a
+                    <literal>Bits t</literal> constraint, also give it
+                    a <literal>Num t</literal> constraint, and
+                  </para>
+                </listitem>
+                <listitem>
+                  <para>
+                    Always define the <literal>bit</literal>,
+                    <literal>testBit</literal> and
+                    <literal>popCount</literal> methods in
+                    <literal>Bits</literal> instances.
+                  </para>
+                </listitem>
+              </itemizedlist>
+            </para>
+	    </listitem>
+	  </varlistentry>
+
+	<varlistentry>
+	  <term>Extra instances</term>
+	  <listitem>
+	    <para>
+              The following extra instances are defined:
+            </para>
+<programlisting>
+instance Functor ((->) r)
+instance Monad ((->) r)
+instance Functor ((,) a)
+instance Functor (Either a)
+instance Monad (Either e)
+</programlisting>
+	    </listitem>
+	  </varlistentry>
+
+	<varlistentry>
 	  <term>Multiply-defined array elements&mdash;not checked:</term>
 	  <listitem>
 	    <para>This code fragment should
@@ -450,6 +523,36 @@
 	  GHCi.</para>
       </listitem>
 
+
+      <listitem>
+        <para>On 32-bit x86 platforms when using the native code
+        generator, the
+        <option>-fexcess-precision</option><indexterm><primary><option>-fexcess-precision</option></primary></indexterm> option
+        is always on.  This means that floating-point calculations are
+        non-deterministic, because depending on how the program is
+        compiled (optimisation settings, for example), certain
+        calculations might be done at 80-bit precision instead of the
+        intended 32-bit or 64-bit precision.  Floating-point results
+        may differ when optimisation is turned on.  In the worst case,
+        referential transparency is violated, because for example
+        <literal>let x = E1 in E2</literal> can evaluate to a
+        different value than <literal>E2[E1/x]</literal>.</para>
+
+        <para>
+          One workaround is to use the
+          <option>-msse2</option><indexterm><primary><option>-msse2</option></primary></indexterm>
+          option (see <xref linkend="options-platform" />, which
+          generates code to use the SSE2 instruction set instead of
+          the x87 instruction set.  SSE2 code uses the correct
+          precision for all floating-point operations, and so gives
+          deterministic results.  However, note that this only works
+          with processors that support SSE2 (Intel Pentium 4 or AMD
+          Athlon 64 and later), which is why the option is not enabled
+          by default.  The libraries that come with GHC are probably
+          built without this option, unless you built GHC yourself.
+        </para>
+      </listitem>
+
     </itemizedlist>
   </sect2>
 
originalだけに発見: external_core.xml
diff -urd 7.4.2-original/ffi-chap.xml original/ffi-chap.xml
--- 7.4.2-original/ffi-chap.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/ffi-chap.xml	2012-09-05 02:10:15.000000000 +0900
@@ -160,6 +160,58 @@
           handle <literal>ERROR_OPERATION_ABORTED</literal>.
         </para>
       </sect2>
+
+      <sect2 id="ffi-capi">
+        <title>The CAPI calling convention</title>
+        <para>
+          The <literal>CAPI</literal> extension allows a calling
+          convention of <literal>capi</literal> to be used in foreign
+          declarations, e.g.
+
+<programlisting>
+foreign import capi "header.h f" f :: CInt -> IO CInt
+</programlisting>
+
+          Rather than generating code to call <literal>f</literal>
+          according to the platform's ABI, we instead call
+          <literal>f</literal> using the C API defined in the header
+          <literal>header.h</literal>. Thus <literal>f</literal> can be
+          called even if it may be defined as a CPP
+          <literal>#define</literal> rather than a proper function.
+        </para>
+
+        <para>
+          When using <literal>capi</literal>, it is also possible to
+          import values, rather than functions. For example,
+
+<programlisting>
+foreign import capi "pi.h value pi" c_pi :: CDouble
+</programlisting>
+
+          will work regardless of whether <literal>pi</literal> is
+          defined as
+<programlisting>
+const double pi = 3.14;
+</programlisting>
+          or with
+<programlisting>
+#define pi 3.14
+</programlisting>
+        </para>
+
+        <para>
+          In order to tell GHC the C type that a Haskell type
+          corresponds to when it is used with the CAPI, a
+          <literal>CTYPE</literal> pragma can be used on the type
+          definition. The header which defines the type can optionally
+          also be specified. The syntax looks like:
+
+<programlisting>
+data    {-# CTYPE "unistd.h" "useconds_t" #-} T = ...
+newtype {-# CTYPE            "useconds_t" #-} T = ...
+</programlisting>
+        </para>
+      </sect2>
   </sect1>
 
   <sect1 id="ffi-ghc">
diff -urd 7.4.2-original/flags.xml original/flags.xml
--- 7.4.2-original/flags.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/flags.xml	2012-09-05 02:10:15.000000000 +0900
@@ -1,1216 +1,1254 @@
 <?xml version="1.0" encoding="iso-8859-1"?>
-  <sect1 id="flag-reference">
-    <title>Flag reference</title>
+<sect1 id="flag-reference">
+  <title>Flag reference</title>
 
-    <para>This section is a quick-reference for GHC's command-line
+  <para>This section is a quick-reference for GHC's command-line
     flags.  For each flag, we also list its static/dynamic status (see
     <xref linkend="static-dynamic-flags"/>), and the flag's opposite
     (if available).</para>
 
-    <sect2>
-      <title>Help and verbosity options</title>
+  <sect2>
+    <title>Help and verbosity options</title>
 
-      <para><xref linkend="options-help"/></para>
+    <para><xref linkend="options-help"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-?</option></entry>
-	      <entry>help</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-help</option></entry>
-	      <entry>help</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-            <row>
-	      <entry><option>-v</option></entry>
-	      <entry>verbose mode (equivalent to <option>-v3</option>)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-v</option><replaceable>n</replaceable></entry>
-	      <entry>set verbosity level</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-V</option></entry>
-	      <entry>display GHC version</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>&ndash;&ndash;supported-extensions</option> or <option>&ndash;&ndash;supported-languages</option></entry>
-	      <entry>display the supported languages and language extensions</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>&ndash;&ndash;info</option></entry>
-	      <entry>display information about the compiler</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>&ndash;&ndash;version</option></entry>
-	      <entry>display GHC version</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>&ndash;&ndash;numeric-version</option></entry>
-	      <entry>display GHC version (numeric only)</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>&ndash;&ndash;print-libdir</option></entry>
-	      <entry>display GHC library directory</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ferror-spans</option></entry>
-	      <entry>output full span in error messages</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-H</option><replaceable>size</replaceable></entry>
-	      <entry>Set the minimum heap size to <replaceable>size</replaceable></entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-Rghc-timing</option></entry>
-	      <entry>Summarise timing stats for GHC (same as <literal>+RTS -tstderr</literal>)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-?</option></entry>
+            <entry>help</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-help</option></entry>
+            <entry>help</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-v</option></entry>
+            <entry>verbose mode (equivalent to <option>-v3</option>)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-v</option><replaceable>n</replaceable></entry>
+            <entry>set verbosity level</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-V</option></entry>
+            <entry>display GHC version</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>&ndash;&ndash;supported-extensions</option> or <option>&ndash;&ndash;supported-languages</option></entry>
+            <entry>display the supported languages and language extensions</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>&ndash;&ndash;info</option></entry>
+            <entry>display information about the compiler</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>&ndash;&ndash;version</option></entry>
+            <entry>display GHC version</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>&ndash;&ndash;numeric-version</option></entry>
+            <entry>display GHC version (numeric only)</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>&ndash;&ndash;print-libdir</option></entry>
+            <entry>display GHC library directory</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ferror-spans</option></entry>
+            <entry>output full span in error messages</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-H</option><replaceable>size</replaceable></entry>
+            <entry>Set the minimum heap size to <replaceable>size</replaceable></entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-Rghc-timing</option></entry>
+            <entry>Summarise timing stats for GHC (same as <literal>+RTS -tstderr</literal>)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
 
-    </sect2>
-    <sect2>
-      <title>Which phases to run</title>
+  </sect2>
+  <sect2>
+    <title>Which phases to run</title>
 
-      <para><xref linkend="options-order"/></para>
+    <para><xref linkend="options-order"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-E</option></entry>
-	      <entry>Stop after preprocessing (<literal>.hspp</literal> file)</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-C</option></entry>
-	      <entry>Stop after generating C (<literal>.hc</literal> file)</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-S</option></entry>
-	      <entry>Stop after generating assembly (<literal>.s</literal> file)</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-c</option></entry>
-	      <entry>Do not link</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-x</option> <replaceable>suffix</replaceable></entry>
-	      <entry>Override default behaviour for source files</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-E</option></entry>
+            <entry>Stop after preprocessing (<literal>.hspp</literal> file)</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-C</option></entry>
+            <entry>Stop after generating C (<literal>.hc</literal> file)</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-S</option></entry>
+            <entry>Stop after generating assembly (<literal>.s</literal> file)</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-c</option></entry>
+            <entry>Do not link</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-x</option> <replaceable>suffix</replaceable></entry>
+            <entry>Override default behaviour for source files</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-     <sect2>
-      <title>Alternative modes of operation</title>
+  <sect2>
+    <title>Alternative modes of operation</title>
 
-      <para><xref linkend="modes"/></para>
+    <para><xref linkend="modes"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>--interactive</option></entry>
-	      <entry>Interactive mode - normally used by just running <command>ghci</command>;
-	      see <xref linkend="ghci"/> for details.</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>--make</option></entry>
-	      <entry>Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using <command>make</command>;
-	      see <xref linkend="make-mode"/> for details..</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-e <replaceable>expr</replaceable></option></entry>
-	      <entry>Evaluate <replaceable>expr</replaceable>;
-	      see <xref linkend="eval-mode"/> for details.</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-M</option></entry>
-	      <entry>Generate dependency information suitable for use in a <filename>Makefile</filename>;
-	      see <xref linkend="makefile-dependencies"/> for details.</entry>
-	      <entry>mode</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>--interactive</option></entry>
+            <entry>Interactive mode - normally used by just running <command>ghci</command>;
+              see <xref linkend="ghci"/> for details.</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--make</option></entry>
+            <entry>Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using <command>make</command>;
+              see <xref linkend="make-mode"/> for details..</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-e <replaceable>expr</replaceable></option></entry>
+            <entry>Evaluate <replaceable>expr</replaceable>;
+              see <xref linkend="eval-mode"/> for details.</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-M</option></entry>
+            <entry>Generate dependency information suitable for use in a <filename>Makefile</filename>;
+              see <xref linkend="makefile-dependencies"/> for details.</entry>
+            <entry>mode</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Redirecting output</title>
+  <sect2>
+    <title>Redirecting output</title>
 
-      <para><xref linkend="options-output"/></para>
+    <para><xref linkend="options-output"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-hcsuf</option> <replaceable>suffix</replaceable></entry>
-	      <entry>set the suffix to use for intermediate C files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-hidir</option> <replaceable>dir</replaceable></entry>
-	      <entry>set directory for interface files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-hisuf</option> <replaceable>suffix</replaceable></entry>
-	      <entry>set the suffix to use for interface files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-o</option> <replaceable>filename</replaceable></entry>
-	      <entry>set output filename</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-odir</option> <replaceable>dir</replaceable></entry>
-	      <entry>set directory for object files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ohi</option> <replaceable>filename</replaceable></entry>
-	      <entry>set the filename in which to put the interface</entry>
-	      <entry>dynamic</entry>
-	      <entry></entry>
-	    </row>
-	    <row>
-	      <entry><option>-osuf</option> <replaceable>suffix</replaceable></entry>
-	      <entry>set the output file suffix</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-stubdir</option> <replaceable>dir</replaceable></entry>
-	      <entry>redirect FFI stub files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dumpdir</option> <replaceable>dir</replaceable></entry>
-	      <entry>redirect dump files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-outputdir</option> <replaceable>dir</replaceable></entry>
-	      <entry>set output directory</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-hcsuf</option> <replaceable>suffix</replaceable></entry>
+            <entry>set the suffix to use for intermediate C files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-hidir</option> <replaceable>dir</replaceable></entry>
+            <entry>set directory for interface files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-hisuf</option> <replaceable>suffix</replaceable></entry>
+            <entry>set the suffix to use for interface files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-o</option> <replaceable>filename</replaceable></entry>
+            <entry>set output filename</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-odir</option> <replaceable>dir</replaceable></entry>
+            <entry>set directory for object files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ohi</option> <replaceable>filename</replaceable></entry>
+            <entry>set the filename in which to put the interface</entry>
+            <entry>dynamic</entry>
+            <entry></entry>
+          </row>
+          <row>
+            <entry><option>-osuf</option> <replaceable>suffix</replaceable></entry>
+            <entry>set the output file suffix</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-stubdir</option> <replaceable>dir</replaceable></entry>
+            <entry>redirect FFI stub files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dumpdir</option> <replaceable>dir</replaceable></entry>
+            <entry>redirect dump files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-outputdir</option> <replaceable>dir</replaceable></entry>
+            <entry>set output directory</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Keeping intermediate files</title>
+  <sect2>
+    <title>Keeping intermediate files</title>
 
-      <para><xref linkend="keeping-intermediates"/></para>
+    <para><xref linkend="keeping-intermediates"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-keep-hc-file</option> or
-                 <option>-keep-hc-files</option></entry>
-	      <entry>retain intermediate <literal>.hc</literal> files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-keep-llvm-file</option> or
-                 <option>-keep-llvm-files</option></entry>
-	      <entry>retain intermediate LLVM <literal>.ll</literal> files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-keep-s-file</option> or
-                 <option>-keep-s-files</option></entry>
-	      <entry>retain intermediate <literal>.s</literal> files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-keep-tmp-files</option></entry>
-	      <entry>retain all intermediate temporary files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-keep-hc-file</option> or
+              <option>-keep-hc-files</option></entry>
+            <entry>retain intermediate <literal>.hc</literal> files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-keep-llvm-file</option> or
+              <option>-keep-llvm-files</option></entry>
+            <entry>retain intermediate LLVM <literal>.ll</literal> files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-keep-s-file</option> or
+              <option>-keep-s-files</option></entry>
+            <entry>retain intermediate <literal>.s</literal> files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-keep-tmp-files</option></entry>
+            <entry>retain all intermediate temporary files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Temporary files</title>
+  <sect2>
+    <title>Temporary files</title>
 
-      <para><xref linkend="temp-files"/></para>
+    <para><xref linkend="temp-files"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-tmpdir</option></entry>
-	      <entry>set the directory for temporary files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-tmpdir</option></entry>
+            <entry>set the directory for temporary files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Finding imports</title>
+  <sect2>
+    <title>Finding imports</title>
 
-      <para><xref linkend="search-path"/></para>
+    <para><xref linkend="search-path"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
 
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-i</option><replaceable>dir1</replaceable>:<replaceable>dir2</replaceable>:...</entry>
-	      <entry>add <replaceable>dir</replaceable>,
-	          <replaceable>dir2</replaceable>, etc. to import path</entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-i</option></entry>
-	      <entry>Empty the import directory list</entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-i</option><replaceable>dir1</replaceable>:<replaceable>dir2</replaceable>:...</entry>
+            <entry>add <replaceable>dir</replaceable>,
+              <replaceable>dir2</replaceable>, etc. to import path</entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-i</option></entry>
+            <entry>Empty the import directory list</entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Interface file options</title>
+  <sect2>
+    <title>Interface file options</title>
 
-      <para><xref linkend="hi-options"/></para>
+    <para><xref linkend="hi-options"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
 
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-ddump-hi</option></entry>
-	      <entry>Dump the new interface to stdout</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-hi-diffs</option></entry>
-	      <entry>Show the differences vs. the old interface</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-minimal-imports</option></entry>
-	      <entry>Dump a minimal set of imports</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>--show-iface</option> <replaceable>file</replaceable></entry>
-	      <entry>See <xref linkend="modes"/>.</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-ddump-hi</option></entry>
+            <entry>Dump the new interface to stdout</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-hi-diffs</option></entry>
+            <entry>Show the differences vs. the old interface</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-minimal-imports</option></entry>
+            <entry>Dump a minimal set of imports</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--show-iface</option> <replaceable>file</replaceable></entry>
+            <entry>See <xref linkend="modes"/>.</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Recompilation checking</title>
+  <sect2>
+    <title>Recompilation checking</title>
 
-      <para><xref linkend="recomp"/></para>
+    <para><xref linkend="recomp"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
 
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fforce-recomp</option></entry>
-	      <entry>Turn off recompilation checking; implied by any
-	      <option>-ddump-X</option> option</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-force-recomp</option></entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fforce-recomp</option></entry>
+            <entry>Turn off recompilation checking; implied by any
+              <option>-ddump-X</option> option</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-force-recomp</option></entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2 id="interactive-mode-options">
-      <title>Interactive-mode options</title>
+  <sect2 id="interactive-mode-options">
+    <title>Interactive-mode options</title>
 
-      <para><xref linkend="ghci-dot-files"/></para>
+    <para><xref linkend="ghci-dot-files"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-ignore-dot-ghci</option></entry>
-	      <entry>Disable reading of <filename>.ghci</filename> files</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ghci-script</option></entry>
-	      <entry>Load the given additional <filename>.ghci</filename> file</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-read-dot-ghci</option></entry>
-	      <entry>Enable reading of <filename>.ghci</filename> files</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fbreak-on-exception</option></entry>
-	      <entry><link linkend="ghci-debugger-exceptions">Break on any exception thrown</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-break-on-exception</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-fbreak-on-error</option></entry>
-	      <entry><link linkend="ghci-debugger-exceptions">Break on uncaught exceptions and errors</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-break-on-error</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-fprint-evld-with-show</option></entry>
-	      <entry><link linkend="breakpoints">Enable usage of Show instances in <literal>:print</literal></link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-print-evld-with-show</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-fprint-bind-result</option></entry>
-	      <entry><link linkend="ghci-stmts">Turn on printing of binding results in GHCi</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-print-bind-result</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-print-bind-contents</option></entry>
-	      <entry><link linkend="breakpoints">Turn off printing of binding contents in GHCi</link></entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-implicit-import-qualified</option></entry>
-	      <entry><link linkend="ghci-import-qualified">Turn off
-	      implicit qualified import of everything in GHCi</link></entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-ignore-dot-ghci</option></entry>
+            <entry>Disable reading of <filename>.ghci</filename> files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ghci-script</option></entry>
+            <entry>Read additional <filename>.ghci</filename> files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fbreak-on-exception</option></entry>
+            <entry><link linkend="ghci-debugger-exceptions">Break on any exception thrown</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-break-on-exception</option></entry>
+          </row>
+          <row>
+            <entry><option>-fbreak-on-error</option></entry>
+            <entry><link linkend="ghci-debugger-exceptions">Break on uncaught exceptions and errors</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-break-on-error</option></entry>
+          </row>
+          <row>
+            <entry><option>-fprint-evld-with-show</option></entry>
+            <entry><link linkend="breakpoints">Enable usage of Show instances in <literal>:print</literal></link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-print-evld-with-show</option></entry>
+          </row>
+          <row>
+            <entry><option>-fprint-bind-result</option></entry>
+            <entry><link linkend="ghci-stmts">Turn on printing of binding results in GHCi</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-print-bind-result</option></entry>
+          </row>
+          <row>
+            <entry><option>-fno-print-bind-contents</option></entry>
+            <entry><link linkend="breakpoints">Turn off printing of binding contents in GHCi</link></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fno-implicit-import-qualified</option></entry>
+            <entry><link linkend="ghci-import-qualified">Turn off
+                implicit qualified import of everything in GHCi</link></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-interactive-print</option></entry>
+            <entry><link linkend="ghci-interactive-print">Select the function
+                    to use for printing evaluated expressions in GHCi</link></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
 
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Packages</title>
+  <sect2>
+    <title>Packages</title>
 
-      <para><xref linkend="packages"/></para>
+    <para><xref linkend="packages"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-    	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-package-name</option> <replaceable>P</replaceable></entry>
-	      <entry>Compile to be part of package <replaceable>P</replaceable></entry>
-              <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-package</option> <replaceable>P</replaceable></entry>
-	      <entry>Expose package <replaceable>P</replaceable></entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-hide-all-packages</option></entry>
-	      <entry>Hide all packages by default</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-hide-package</option> <replaceable>name</replaceable></entry>
-	      <entry>Hide package <replaceable>P</replaceable></entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ignore-package</option> <replaceable>name</replaceable></entry>
-	      <entry>Ignore package <replaceable>P</replaceable></entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-package-conf</option> <replaceable>file</replaceable></entry>
-	      <entry>Load more packages from <replaceable>file</replaceable></entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-no-user-package-conf</option></entry>
-	      <entry>Don't load the user's package config file.</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-no-auto-link-packages</option></entry>
-	      <entry>Don't automatically link in the haskell98 package.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-trust</option> <replaceable>P</replaceable></entry>
-        <entry>Expose package <replaceable>P</replaceable> and set it to be
-          trusted</entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-distrust</option> <replaceable>P</replaceable></entry>
-        <entry>Expose package <replaceable>P</replaceable> and set it to be
-          distrusted</entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-distrust-all</option> </entry>
-        <entry>Distrust all packages by default</entry>
-	      <entry>static/<literal>:set</literal></entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-package-name</option> <replaceable>P</replaceable></entry>
+            <entry>Compile to be part of package <replaceable>P</replaceable></entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-package</option> <replaceable>P</replaceable></entry>
+            <entry>Expose package <replaceable>P</replaceable></entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-hide-all-packages</option></entry>
+            <entry>Hide all packages by default</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-hide-package</option> <replaceable>name</replaceable></entry>
+            <entry>Hide package <replaceable>P</replaceable></entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ignore-package</option> <replaceable>name</replaceable></entry>
+            <entry>Ignore package <replaceable>P</replaceable></entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-package-db</option> <replaceable>file</replaceable></entry>
+            <entry>Add <replaceable>file</replaceable> to the package db stack.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-clear-package-db</option></entry>
+            <entry>Clear the package db stack.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-no-global-package-db</option></entry>
+            <entry>Remove the global package db from the stack.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-global-package-db</option></entry>
+            <entry>Add the global package db to the stack.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-no-user-package-db</option></entry>
+            <entry>Remove the user's package db from the stack.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-user-package-db</option></entry>
+            <entry>Add the user's package db to the stack.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-no-auto-link-packages</option></entry>
+            <entry>Don't automatically link in the haskell98 package.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-trust</option> <replaceable>P</replaceable></entry>
+            <entry>Expose package <replaceable>P</replaceable> and set it to be
+              trusted</entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-distrust</option> <replaceable>P</replaceable></entry>
+            <entry>Expose package <replaceable>P</replaceable> and set it to be
+              distrusted</entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-distrust-all</option> </entry>
+            <entry>Distrust all packages by default</entry>
+            <entry>static/<literal>:set</literal></entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Language options</title>
+  <sect2>
+    <title>Language options</title>
 
-      <para>Language options can be enabled either by a command-line option
+    <para>Language options can be enabled either by a command-line option
       <option>-Xblah</option>, or by a <literal>{-# LANGUAGE blah #-}</literal>
       pragma in the file itself.  See <xref linkend="options-language"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-    	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fglasgow-exts</option></entry>
-	      <entry>Enable most language extensions; see <xref linkend="options-language"/> for exactly which ones.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-glasgow-exts</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XOverlappingInstances</option></entry>
-	      <entry>Enable <link linkend="instance-overlap">overlapping instances</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoOverlappingInstances</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XIncoherentInstances</option></entry>
-	      <entry>Enable <link linkend="instance-overlap">incoherent instances</link>.
-	      Implies <option>-XOverlappingInstances</option> </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoIncoherentInstances</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XUndecidableInstances</option></entry>
-	      <entry>Enable <link linkend="undecidable-instances">undecidable instances</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoUndecidableInstances</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-fcontext-stack=N</option><replaceable>n</replaceable></entry>
-	      <entry>set the <link linkend="undecidable-instances">limit for context reduction</link>. Default is 20.</entry>
-	      <entry>dynamic</entry>
-	      <entry></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XArrows</option></entry>
-	      <entry>Enable <link linkend="arrow-notation">arrow
-	      notation</link> extension</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoArrows</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XDisambiguateRecordFields</option></entry>
-	      <entry>Enable <link linkend="disambiguate-fields">record
-	      field disambiguation</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoDisambiguateRecordFields</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XForeignFunctionInterface</option></entry>
-	      <entry>Enable <link linkend="ffi">foreign function interface</link> (implied by
-	      <option>-fglasgow-exts</option>)</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoForeignFunctionInterface</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XGenerics</option></entry>
-	      <entry>Deprecated, does nothing. No longer enables <link linkend="generic-classes">generic classes</link>.
-               See also GHC's support for
-               <link linkend="generic-programming">generic programming</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoGenerics</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XImplicitParams</option></entry>
-	      <entry>Enable <link linkend="implicit-parameters">Implicit Parameters</link>.
-	      Implied by <option>-fglasgow-exts</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoImplicitParams</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-firrefutable-tuples</option></entry>
-	      <entry>Make tuple pattern matching irrefutable</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-irrefutable-tuples</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XNoImplicitPrelude</option></entry>
-	      <entry>Don't implicitly <literal>import Prelude</literal></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XImplicitPrelude</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XRebindableSyntax</option></entry>
-	      <entry>Employ <link linkend="rebindable-syntax">rebindable syntax</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoRebindableSyntax</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XNoMonomorphismRestriction</option></entry>
-	      <entry>Disable the <link linkend="monomorphism">monomorphism restriction</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XMonomorphismRrestriction</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XNoNPlusKPatterns</option></entry>
-	      <entry>Disable support for <literal>n+k</literal> patterns</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNPlusKPatterns</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XNoTraditionalRecordSyntax</option></entry>
-	      <entry>Disable support for traditional record syntax (as supported by Haskell 98) <literal>C {f = x}</literal></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XTraditionalRecordSyntax</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XNoMonoPatBinds</option></entry>
-	      <entry>Make <link linkend="monomorphism">pattern bindings polymorphic</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XMonoPatBinds</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XRelaxedPolyRec</option></entry>
-	      <entry>Relaxed checking for <link linkend="typing-binds">mutually-recursive polymorphic functions</link></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoRelaxedPolyRec</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XExtendedDefaultRules</option></entry>
-	      <entry>Use GHCi's <link linkend="extended-default-rules">extended default rules</link> in a normal module</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoExtendedDefaultRules</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XOverloadedStrings</option></entry>
-	      <entry>Enable <link linkend="overloaded-strings">overloaded string literals</link>.
-	      </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoOverloadedStrings</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XGADTs</option></entry>
-	      <entry>Enable <link linkend="gadt">generalised algebraic data types</link>.
-	      </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoGADTs</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XGADTSyntax</option></entry>
-	      <entry>Enable <link linkend="gadt-style">generalised algebraic data type syntax</link>.
-	      </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoGADTSyntax</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XTypeFamilies</option></entry>
-	      <entry>Enable <link linkend="type-families">type families</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoTypeFamilies</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XConstraintKinds</option></entry>
-	      <entry>Enable a <link linkend="constraint-kind">kind of constraints</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoConstraintKinds</option></entry>
-	    </row>
-        <row>
-          <entry><option>-XDataKinds</option></entry>
-          <entry>Enable <link linkend="kind-polymorphism-and-promotion">datatype promotion</link>.</entry>
-          <entry>dynamic</entry>
-          <entry><option>-XNoDataKinds</option></entry>
-        </row>
-	    <row>
-	      <entry><option>-XPolyKinds</option></entry>
-	      <entry>Enable <link linkend="kind-polymorphism-and-promotion">kind polymorphism</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoPolyKinds</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XScopedTypeVariables</option></entry>
-	      <entry>Enable <link linkend="scoped-type-variables">lexically-scoped type variables</link>.
-	      Implied by <option>-fglasgow-exts</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoScopedTypeVariables</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XMonoLocalBinds</option></entry>
-	      <entry>Enable <link linkend="mono-local-binds">do not generalise local bindings</link>.
-	      </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoMonoLocalBinds</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XTemplateHaskell</option></entry>
-	      <entry>Enable <link linkend="template-haskell">Template Haskell</link>.
-		No longer implied by <option>-fglasgow-exts</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoTemplateHaskell</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XQuasiQuotes</option></entry>
-	      <entry>Enable <link linkend="th-quasiquotation">quasiquotation</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoQuasiQuotes</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XBangPatterns</option></entry>
-	      <entry>Enable <link linkend="bang-patterns">bang patterns</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoBangPatterns</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XCPP</option></entry>
-	      <entry>Enable the <link linkend="c-pre-processor">C preprocessor</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoCPP</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XPatternGuards</option></entry>
-	      <entry>Enable <link linkend="pattern-guards">pattern guards</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoPatternGuards</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XViewPatterns</option></entry>
-	      <entry>Enable <link linkend="view-patterns">view patterns</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoViewPatterns</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XUnicodeSyntax</option></entry>
-	      <entry>Enable <link linkend="unicode-syntax">unicode syntax</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoUnicodeSyntax</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XMagicHash</option></entry>
-	      <entry>Allow "#" as a <link linkend="magic-hash">postfix modifier on identifiers</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoMagicHash</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XExplicitForAll</option></entry>
-	      <entry>Enable <link linkend="explicit-foralls">explicit universal quantification</link>.
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fglasgow-exts</option></entry>
+            <entry>Enable most language extensions; see <xref linkend="options-language"/> for exactly which ones.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-glasgow-exts</option></entry>
+          </row>
+          <row>
+            <entry><option>-XOverlappingInstances</option></entry>
+            <entry>Enable <link linkend="instance-overlap">overlapping instances</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoOverlappingInstances</option></entry>
+          </row>
+          <row>
+            <entry><option>-XIncoherentInstances</option></entry>
+            <entry>Enable <link linkend="instance-overlap">incoherent instances</link>.
+              Implies <option>-XOverlappingInstances</option> </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoIncoherentInstances</option></entry>
+          </row>
+          <row>
+            <entry><option>-XUndecidableInstances</option></entry>
+            <entry>Enable <link linkend="undecidable-instances">undecidable instances</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoUndecidableInstances</option></entry>
+          </row>
+          <row>
+            <entry><option>-fcontext-stack=N</option><replaceable>n</replaceable></entry>
+            <entry>set the <link linkend="undecidable-instances">limit for context reduction</link>. Default is 20.</entry>
+            <entry>dynamic</entry>
+            <entry></entry>
+          </row>
+          <row>
+            <entry><option>-XArrows</option></entry>
+            <entry>Enable <link linkend="arrow-notation">arrow
+                notation</link> extension</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoArrows</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDisambiguateRecordFields</option></entry>
+            <entry>Enable <link linkend="disambiguate-fields">record
+                field disambiguation</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDisambiguateRecordFields</option></entry>
+          </row>
+          <row>
+            <entry><option>-XForeignFunctionInterface</option></entry>
+            <entry>Enable <link linkend="ffi">foreign function interface</link> (implied by
+              <option>-fglasgow-exts</option>)</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoForeignFunctionInterface</option></entry>
+          </row>
+          <row>
+            <entry><option>-XGenerics</option></entry>
+            <entry>Deprecated, does nothing. No longer enables <link linkend="generic-classes">generic classes</link>.
+              See also GHC's support for
+              <link linkend="generic-programming">generic programming</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGenerics</option></entry>
+          </row>
+          <row>
+            <entry><option>-XImplicitParams</option></entry>
+            <entry>Enable <link linkend="implicit-parameters">Implicit Parameters</link>.
+              Implied by <option>-fglasgow-exts</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoImplicitParams</option></entry>
+          </row>
+          <row>
+            <entry><option>-firrefutable-tuples</option></entry>
+            <entry>Make tuple pattern matching irrefutable</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-irrefutable-tuples</option></entry>
+          </row>
+          <row>
+            <entry><option>-XNoImplicitPrelude</option></entry>
+            <entry>Don't implicitly <literal>import Prelude</literal></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XImplicitPrelude</option></entry>
+          </row>
+          <row>
+            <entry><option>-XRebindableSyntax</option></entry>
+            <entry>Employ <link linkend="rebindable-syntax">rebindable syntax</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoRebindableSyntax</option></entry>
+          </row>
+          <row>
+            <entry><option>-XNoMonomorphismRestriction</option></entry>
+            <entry>Disable the <link linkend="monomorphism">monomorphism restriction</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XMonomorphismRrestriction</option></entry>
+          </row>
+          <row>
+            <entry><option>-XNoNPlusKPatterns</option></entry>
+            <entry>Disable support for <literal>n+k</literal> patterns</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNPlusKPatterns</option></entry>
+          </row>
+          <row>
+            <entry><option>-XNoTraditionalRecordSyntax</option></entry>
+            <entry>Disable support for traditional record syntax (as supported by Haskell 98) <literal>C {f = x}</literal></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XTraditionalRecordSyntax</option></entry>
+          </row>
+          <row>
+            <entry><option>-XNoMonoPatBinds</option></entry>
+            <entry>Make <link linkend="monomorphism">pattern bindings polymorphic</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XMonoPatBinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XRelaxedPolyRec</option></entry>
+            <entry>Relaxed checking for <link linkend="typing-binds">mutually-recursive polymorphic functions</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoRelaxedPolyRec</option></entry>
+          </row>
+          <row>
+            <entry><option>-XExtendedDefaultRules</option></entry>
+            <entry>Use GHCi's <link linkend="extended-default-rules">extended default rules</link> in a normal module</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoExtendedDefaultRules</option></entry>
+          </row>
+          <row>
+            <entry><option>-XOverloadedStrings</option></entry>
+            <entry>Enable <link linkend="overloaded-strings">overloaded string literals</link>.
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoOverloadedStrings</option></entry>
+          </row>
+          <row>
+            <entry><option>-XGADTs</option></entry>
+            <entry>Enable <link linkend="gadt">generalised algebraic data types</link>.
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGADTs</option></entry>
+          </row>
+          <row>
+            <entry><option>-XGADTSyntax</option></entry>
+            <entry>Enable <link linkend="gadt-style">generalised algebraic data type syntax</link>.
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGADTSyntax</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTypeFamilies</option></entry>
+            <entry>Enable <link linkend="type-families">type families</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoTypeFamilies</option></entry>
+          </row>
+          <row>
+            <entry><option>-XConstraintKinds</option></entry>
+            <entry>Enable a <link linkend="constraint-kind">kind of constraints</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoConstraintKinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDataKinds</option></entry>
+            <entry>Enable <link linkend="promotion">datatype promotion</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDataKinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XPolyKinds</option></entry>
+            <entry>Enable <link linkend="kind-polymorphism">kind polymorphism</link>.
+                   Implies <option>-XKindSignatures</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoPolyKinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XScopedTypeVariables</option></entry>
+            <entry>Enable <link linkend="scoped-type-variables">lexically-scoped type variables</link>.
+              Implied by <option>-fglasgow-exts</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoScopedTypeVariables</option></entry>
+          </row>
+          <row>
+            <entry><option>-XMonoLocalBinds</option></entry>
+            <entry>Enable <link linkend="mono-local-binds">do not generalise local bindings</link>.
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoMonoLocalBinds</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTemplateHaskell</option></entry>
+            <entry>Enable <link linkend="template-haskell">Template Haskell</link>.
+              No longer implied by <option>-fglasgow-exts</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoTemplateHaskell</option></entry>
+          </row>
+          <row>
+            <entry><option>-XQuasiQuotes</option></entry>
+            <entry>Enable <link linkend="th-quasiquotation">quasiquotation</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoQuasiQuotes</option></entry>
+          </row>
+          <row>
+            <entry><option>-XBangPatterns</option></entry>
+            <entry>Enable <link linkend="bang-patterns">bang patterns</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoBangPatterns</option></entry>
+          </row>
+          <row>
+            <entry><option>-XCPP</option></entry>
+            <entry>Enable the <link linkend="c-pre-processor">C preprocessor</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoCPP</option></entry>
+          </row>
+          <row>
+            <entry><option>-XPatternGuards</option></entry>
+            <entry>Enable <link linkend="pattern-guards">pattern guards</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoPatternGuards</option></entry>
+          </row>
+          <row>
+            <entry><option>-XViewPatterns</option></entry>
+            <entry>Enable <link linkend="view-patterns">view patterns</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoViewPatterns</option></entry>
+          </row>
+          <row>
+            <entry><option>-XUnicodeSyntax</option></entry>
+            <entry>Enable <link linkend="unicode-syntax">unicode syntax</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoUnicodeSyntax</option></entry>
+          </row>
+          <row>
+            <entry><option>-XMagicHash</option></entry>
+            <entry>Allow "#" as a <link linkend="magic-hash">postfix modifier on identifiers</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoMagicHash</option></entry>
+          </row>
+          <row>
+            <entry><option>-XExplicitForAll</option></entry>
+            <entry>Enable <link linkend="explicit-foralls">explicit universal quantification</link>.
               Implied by <option>-XScopedTypeVariables</option>,
-	    <option>-XLiberalTypeSynonyms</option>,
-	    <option>-XRank2Types</option>,
-	    <option>-XRankNTypes</option>,
-	    <option>-XPolymorphicComponents</option>,
-	    <option>-XExistentialQuantification</option>
-              </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoExplicitForAll</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XPolymorphicComponents</option></entry>
-	      <entry>Enable <link linkend="universal-quantification">polymorphic components for data constructors</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoPolymorphicComponents</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XRank2Types</option></entry>
-	      <entry>Enable <link linkend="universal-quantification">rank-2 types</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoRank2Types</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XRankNTypes</option></entry>
-	      <entry>Enable <link linkend="universal-quantification">rank-N types</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoRankNTypes</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XImpredicativeTypes</option></entry>
-	      <entry>Enable <link linkend="impredicative-polymorphism">impredicative types</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoImpredicativeTypes</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XExistentialQuantification</option></entry>
-	      <entry>Enable <link linkend="existential-quantification">existential quantification</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoExistentialQuantification</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XKindSignatures</option></entry>
-	      <entry>Enable <link linkend="kinding">kind signatures</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoKindSignatures</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XEmptyDataDecls</option></entry>
-	      <entry>Enable empty data declarations.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoEmptyDataDecls</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XParallelListComp</option></entry>
-	      <entry>Enable <link linkend="parallel-list-comprehensions">parallel list comprehensions</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoParallelListComp</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XTransformListComp</option></entry>
-	      <entry>Enable <link linkend="generalised-list-comprehensions">generalised list comprehensions</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoTransformListComp</option></entry>
-	    </row>
-        <row>
-	      <entry><option>-XMonadComprehensions</option></entry>
-	      <entry>Enable <link linkend="monad-comprehensions">monad comprehensions</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoMonadComprehensions</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XUnliftedFFITypes</option></entry>
-	      <entry>Enable unlifted FFI types.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoUnliftedFFITypes</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XInterruptibleFFI</option></entry>
-	      <entry>Enable interruptible FFI.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoInterruptibleFFI</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XLiberalTypeSynonyms</option></entry>
-	      <entry>Enable <link linkend="type-synonyms">liberalised type synonyms</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoLiberalTypeSynonyms</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XTypeOperators</option></entry>
-	      <entry>Enable type operators.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoTypeOperators</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XDoRec</option></entry>
-	      <entry>Enable <link linkend="recursive-do-notation">recursive do notation</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoDoRec</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XRecursiveDo</option></entry>
-	      <entry>Enable <link linkend="mdo-notation">recursive do (mdo) notation</link>. This is deprecated; please use <link linkend="recursive-do-notation">recursive do notation</link> instead.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoRecursiveDo</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XParallelArrays</option></entry>
-	      <entry>Enable parallel arrays.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoParallelArrays</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XRecordWildCards</option></entry>
-	      <entry>Enable <link linkend="record-wildcards">record wildcards</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoRecordWildCards</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XNamedFieldPuns</option></entry>
-	      <entry>Enable <link linkend="record-puns">record puns</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoNamedFieldPuns</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XDisambiguateRecordFields</option></entry>
-	      <entry>Enable  <link linkend="disambiguate-fields">record field disambiguation</link>. </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoDisambiguateRecordFields</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XUnboxedTuples</option></entry>
-	      <entry>Enable <link linkend="unboxed-tuples">unboxed tuples</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoUnboxedTuples</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XStandaloneDeriving</option></entry>
-	      <entry>Enable <link linkend="stand-alone-deriving">standalone deriving</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoStandaloneDeriving</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XDeriveDataTypeable</option></entry>
-	      <entry>Enable <link linkend="deriving-typeable">deriving for the Data and Typeable classes</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoDeriveDataTypeable</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XDeriveGeneric</option></entry>
-	      <entry>Enable <link linkend="deriving-typeable">deriving for the Generic class</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoDeriveGeneric</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XGeneralizedNewtypeDeriving</option></entry>
-	      <entry>Enable <link linkend="newtype-deriving">newtype deriving</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoGeneralizedNewtypeDeriving</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XTypeSynonymInstances</option></entry>
-	      <entry>Enable <link linkend="flexible-instance-head">type synonyms in instance heads</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoTypeSynonymInstances</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XFlexibleContexts</option></entry>
-	      <entry>Enable <link linkend="flexible-contexts">flexible contexts</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoFlexibleContexts</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XFlexibleInstances</option></entry>
-              <entry>Enable <link linkend="instance-rules">flexible instances</link>.
+              <option>-XLiberalTypeSynonyms</option>,
+              <option>-XRank2Types</option>,
+              <option>-XRankNTypes</option>,
+              <option>-XPolymorphicComponents</option>,
+              <option>-XExistentialQuantification</option>
+            </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoExplicitForAll</option></entry>
+          </row>
+          <row>
+            <entry><option>-XPolymorphicComponents</option></entry>
+            <entry>Enable <link linkend="universal-quantification">polymorphic components for data constructors</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoPolymorphicComponents</option></entry>
+          </row>
+          <row>
+            <entry><option>-XRank2Types</option></entry>
+            <entry>Enable <link linkend="universal-quantification">rank-2 types</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoRank2Types</option></entry>
+          </row>
+          <row>
+            <entry><option>-XRankNTypes</option></entry>
+            <entry>Enable <link linkend="universal-quantification">rank-N types</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoRankNTypes</option></entry>
+          </row>
+          <row>
+            <entry><option>-XImpredicativeTypes</option></entry>
+            <entry>Enable <link linkend="impredicative-polymorphism">impredicative types</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoImpredicativeTypes</option></entry>
+          </row>
+          <row>
+            <entry><option>-XExistentialQuantification</option></entry>
+            <entry>Enable <link linkend="existential-quantification">existential quantification</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoExistentialQuantification</option></entry>
+          </row>
+          <row>
+            <entry><option>-XKindSignatures</option></entry>
+            <entry>Enable <link linkend="kinding">kind signatures</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoKindSignatures</option></entry>
+          </row>
+          <row>
+            <entry><option>-XEmptyDataDecls</option></entry>
+            <entry>Enable empty data declarations.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoEmptyDataDecls</option></entry>
+          </row>
+          <row>
+            <entry><option>-XParallelListComp</option></entry>
+            <entry>Enable <link linkend="parallel-list-comprehensions">parallel list comprehensions</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoParallelListComp</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTransformListComp</option></entry>
+            <entry>Enable <link linkend="generalised-list-comprehensions">generalised list comprehensions</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoTransformListComp</option></entry>
+          </row>
+          <row>
+            <entry><option>-XMonadComprehensions</option></entry>
+            <entry>Enable <link linkend="monad-comprehensions">monad comprehensions</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoMonadComprehensions</option></entry>
+          </row>
+          <row>
+            <entry><option>-XUnliftedFFITypes</option></entry>
+            <entry>Enable unlifted FFI types.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoUnliftedFFITypes</option></entry>
+          </row>
+          <row>
+            <entry><option>-XInterruptibleFFI</option></entry>
+            <entry>Enable interruptible FFI.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoInterruptibleFFI</option></entry>
+          </row>
+          <row>
+            <entry><option>-XLiberalTypeSynonyms</option></entry>
+            <entry>Enable <link linkend="type-synonyms">liberalised type synonyms</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoLiberalTypeSynonyms</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTypeOperators</option></entry>
+            <entry>Enable type operators.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoTypeOperators</option></entry>
+          </row>
+          <row>
+            <entry><option>-XExplicitNamespaces</option></entry>
+            <entry>Enable using the keyword <literal>type</literal> to specify the namespace of entries in imports and exports.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoExplicitNamespaces</option></entry>
+          </row>
+          <row>
+            <entry><option>-XRecursiveDo</option></entry>
+            <entry>Enable <link linkend="recursive-do-notation">recursive do (mdo) notation</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoRecursiveDo</option></entry>
+          </row>
+          <row>
+            <entry><option>-XParallelArrays</option></entry>
+            <entry>Enable parallel arrays.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoParallelArrays</option></entry>
+          </row>
+          <row>
+            <entry><option>-XRecordWildCards</option></entry>
+            <entry>Enable <link linkend="record-wildcards">record wildcards</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoRecordWildCards</option></entry>
+          </row>
+          <row>
+            <entry><option>-XNamedFieldPuns</option></entry>
+            <entry>Enable <link linkend="record-puns">record puns</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoNamedFieldPuns</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDisambiguateRecordFields</option></entry>
+            <entry>Enable  <link linkend="disambiguate-fields">record field disambiguation</link>. </entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDisambiguateRecordFields</option></entry>
+          </row>
+          <row>
+            <entry><option>-XUnboxedTuples</option></entry>
+            <entry>Enable <link linkend="unboxed-tuples">unboxed tuples</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoUnboxedTuples</option></entry>
+          </row>
+          <row>
+            <entry><option>-XStandaloneDeriving</option></entry>
+            <entry>Enable <link linkend="stand-alone-deriving">standalone deriving</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoStandaloneDeriving</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDeriveDataTypeable</option></entry>
+            <entry>Enable <link linkend="deriving-typeable">deriving for the Data and Typeable classes</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDeriveDataTypeable</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDeriveGeneric</option></entry>
+            <entry>Enable <link linkend="deriving-typeable">deriving for the Generic class</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDeriveGeneric</option></entry>
+          </row>
+          <row>
+            <entry><option>-XGeneralizedNewtypeDeriving</option></entry>
+            <entry>Enable <link linkend="newtype-deriving">newtype deriving</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoGeneralizedNewtypeDeriving</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTypeSynonymInstances</option></entry>
+            <entry>Enable <link linkend="flexible-instance-head">type synonyms in instance heads</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoTypeSynonymInstances</option></entry>
+          </row>
+          <row>
+            <entry><option>-XFlexibleContexts</option></entry>
+            <entry>Enable <link linkend="flexible-contexts">flexible contexts</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoFlexibleContexts</option></entry>
+          </row>
+          <row>
+            <entry><option>-XFlexibleInstances</option></entry>
+            <entry>Enable <link linkend="instance-rules">flexible instances</link>.
               Implies <option>-XTypeSynonymInstances</option> </entry>
-              <entry>dynamic</entry>
-	      <entry><option>-XNoFlexibleInstances</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XConstrainedClassMethods</option></entry>
-	      <entry>Enable <link linkend="class-method-types">constrained class methods</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoConstrainedClassMethods</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XDefaultSignatures</option></entry>
-	      <entry>Enable <link linkend="class-default-signatures">default signatures</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoDefaultSignatures</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XMultiParamTypeClasses</option></entry>
-	      <entry>Enable <link linkend="multi-param-type-classes">multi parameter type classes</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoMultiParamTypeClasses</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XFunctionalDependencies</option></entry>
-	      <entry>Enable <link linkend="functional-dependencies">functional dependencies</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoFunctionalDependencies</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XPackageImports</option></entry>
-	      <entry>Enable <link linkend="package-imports">package-qualified imports</link>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-XNoPackageImports</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XSafe</option></entry>
-        <entry>Enable the <link linkend="safe-haskell">Safe Haskell</link> Safe mode.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XTrustworthy</option></entry>
-        <entry>Enable the <link linkend="safe-haskell">Safe Haskell</link> Trustworthy mode.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-XUnsafe</option></entry>
-         <entry>Enable <link linkend="safe-haskell">Safe Haskell</link> Unsafe mode.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-fpackage-trust</option></entry>
-         <entry>Enable <link linkend="safe-haskell">Safe Haskell</link> trusted package requirement for trustworty modules.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-</option></entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+            <entry>dynamic</entry>
+            <entry><option>-XNoFlexibleInstances</option></entry>
+          </row>
+          <row>
+            <entry><option>-XConstrainedClassMethods</option></entry>
+            <entry>Enable <link linkend="class-method-types">constrained class methods</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoConstrainedClassMethods</option></entry>
+          </row>
+          <row>
+            <entry><option>-XDefaultSignatures</option></entry>
+            <entry>Enable <link linkend="class-default-signatures">default signatures</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoDefaultSignatures</option></entry>
+          </row>
+          <row>
+            <entry><option>-XMultiParamTypeClasses</option></entry>
+            <entry>Enable <link linkend="multi-param-type-classes">multi parameter type classes</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoMultiParamTypeClasses</option></entry>
+          </row>
+          <row>
+            <entry><option>-XFunctionalDependencies</option></entry>
+            <entry>Enable <link linkend="functional-dependencies">functional dependencies</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoFunctionalDependencies</option></entry>
+          </row>
+          <row>
+            <entry><option>-XPackageImports</option></entry>
+            <entry>Enable <link linkend="package-imports">package-qualified imports</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoPackageImports</option></entry>
+          </row>
+          <row>
+            <entry><option>-XLambdaCase</option></entry>
+            <entry>Enable <link linkend="lambda-case">lambda-case expressions</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoLambdaCase</option></entry>
+          </row>
+          <row>
+            <entry><option>-XMultiWayIf</option></entry>
+            <entry>Enable <link linkend="multi-way-if">multi-way if-expressions</link>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-XNoMultiWayIf</option></entry>
+          </row>
+          <row>
+            <entry><option>-XSafe</option></entry>
+            <entry>Enable the <link linkend="safe-haskell">Safe Haskell</link> Safe mode.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-</option></entry>
+          </row>
+          <row>
+            <entry><option>-XTrustworthy</option></entry>
+            <entry>Enable the <link linkend="safe-haskell">Safe Haskell</link> Trustworthy mode.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-</option></entry>
+          </row>
+          <row>
+            <entry><option>-XUnsafe</option></entry>
+            <entry>Enable <link linkend="safe-haskell">Safe Haskell</link> Unsafe mode.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-</option></entry>
+          </row>
+          <row>
+            <entry><option>-fpackage-trust</option></entry>
+            <entry>Enable <link linkend="safe-haskell">Safe Haskell</link> trusted package requirement for trustworty modules.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-</option></entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Warnings</title>
+  <sect2>
+    <title>Warnings</title>
 
-      <para><xref linkend="options-sanity"/></para>
+    <para><xref linkend="options-sanity"/></para>
 
     <informaltable>
       <tgroup cols="4" align="left" colsep="1" rowsep="1">
-	<thead>
-	  <row>
-	    <entry>Flag</entry>
-	    <entry>Description</entry>
-	    <entry>Static/Dynamic</entry>
-	    <entry>Reverse</entry>
-	  </row>
-	</thead>
-	<tbody>
-	  <row>
-	    <entry><option>-W</option></entry>
-	    <entry>enable normal warnings</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-w</option></entry>
-	  </row>
-	  <row>
-	    <entry><option>-w</option></entry>
-	    <entry>disable all warnings</entry>
-	    <entry>dynamic</entry>
-	    <entry>-</entry>
-	  </row>
-	  <row>
-	    <entry><option>-Wall</option></entry>
-	    <entry>enable almost all warnings (details in <xref linkend="options-sanity"/>)</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-w</option></entry>
-	  </row>
-	  <row>
-	    <entry><option>-Werror</option></entry>
-	    <entry>make warnings fatal</entry>
-	    <entry>dynamic</entry>
-	    <entry>-Wwarn</entry>
-	  </row>
-	  <row>
-	    <entry><option>-Wwarn</option></entry>
-	    <entry>make warnings non-fatal</entry>
-	    <entry>dynamic</entry>
-	    <entry>-Werror</entry>
-	  </row>
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-W</option></entry>
+            <entry>enable normal warnings</entry>
+            <entry>dynamic</entry>
+            <entry><option>-w</option></entry>
+          </row>
+          <row>
+            <entry><option>-w</option></entry>
+            <entry>disable all warnings</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-Wall</option></entry>
+            <entry>enable almost all warnings (details in <xref linkend="options-sanity"/>)</entry>
+            <entry>dynamic</entry>
+            <entry><option>-w</option></entry>
+          </row>
+          <row>
+            <entry><option>-Werror</option></entry>
+            <entry>make warnings fatal</entry>
+            <entry>dynamic</entry>
+            <entry>-Wwarn</entry>
+          </row>
+          <row>
+            <entry><option>-Wwarn</option></entry>
+            <entry>make warnings non-fatal</entry>
+            <entry>dynamic</entry>
+            <entry>-Werror</entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-unrecognised-pragmas</option></entry>
-	    <entry>warn about uses of pragmas that GHC doesn't recognise</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-unrecognised-pragmas</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fdefer-type-errors</option></entry>
+            <entry>Defer as many type errors as possible until runtime.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-defer-type-errors</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-warnings-deprecations</option></entry>
-	    <entry>warn about uses of functions &amp; types that have warnings or deprecated pragmas</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-warnings-deprecations</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fhelpful-errors</option></entry>
+            <entry>Make suggestions for mis-spelled names.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-helpful-errors</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-deprecated-flags</option></entry>
-	    <entry>warn about uses of commandline flags that are deprecated</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-deprecated-flags</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-deprecated-flags</option></entry>
+            <entry>warn about uses of commandline flags that are deprecated</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-deprecated-flags</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-duplicate-exports</option></entry>
-	    <entry>warn when an entity is exported multiple times</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-duplicate-exports</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-duplicate-exports</option></entry>
+            <entry>warn when an entity is exported multiple times</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-duplicate-exports</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-hi-shadowing</option></entry>
-	    <entry>warn when a <literal>.hi</literal> file in the
-	    current directory shadows a library</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-hi-shadowing</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-hi-shadowing</option></entry>
+            <entry>warn when a <literal>.hi</literal> file in the
+              current directory shadows a library</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-hi-shadowing</option></entry>
+          </row>
 
           <row>
             <entry><option>-fwarn-identities</option></entry>
             <entry>warn about uses of Prelude numeric conversions that are probably
-                   the identity (and hence could be omitted)</entry>
+              the identity (and hence could be omitted)</entry>
             <entry>dynamic</entry>
             <entry><option>-fno-warn-identities</option></entry>
           </row>
@@ -1222,1608 +1260,1636 @@
             <entry><option>-fno-warn-implicit-prelude</option></entry>
           </row>
 
-	  <row>
-	    <entry><option>-fwarn-incomplete-patterns</option></entry>
-	    <entry>warn when a pattern match could fail</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-incomplete-patterns</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-incomplete-patterns</option></entry>
+            <entry>warn when a pattern match could fail</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-incomplete-patterns</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-incomplete-uni-patterns</option></entry>
-	    <entry>warn when a pattern match in a lambda expression or pattern binding could fail</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-incomplete-uni-patterns</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-incomplete-uni-patterns</option></entry>
+            <entry>warn when a pattern match in a lambda expression or pattern binding could fail</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-incomplete-uni-patterns</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-incomplete-record-updates</option></entry>
-	    <entry>warn when a record update could fail</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-incomplete-record-updates</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-incomplete-record-updates</option></entry>
+            <entry>warn when a record update could fail</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-incomplete-record-updates</option></entry>
+          </row>
 
-	  <row>
+          <row>
             <entry><option>-fwarn-lazy-unlifted-bindings</option></entry>
             <entry>warn when a pattern binding looks lazy but must be strict</entry>
-	    <entry>dynamic</entry>
+            <entry>dynamic</entry>
             <entry><option>-fno-warn-lazy-unlifted-bindings</option></entry>
-	  </row>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-missing-fields</option></entry>
-	    <entry>warn when fields of a record are uninitialised</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-missing-fields</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-missing-fields</option></entry>
+            <entry>warn when fields of a record are uninitialised</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-missing-fields</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-missing-import-lists</option></entry>
-	    <entry>warn when an import declaration does not explicitly
-                   list all the names brought into scope</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fnowarn-missing-import-lists</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-missing-import-lists</option></entry>
+            <entry>warn when an import declaration does not explicitly
+              list all the names brought into scope</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fnowarn-missing-import-lists</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-missing-methods</option></entry>
-	    <entry>warn when class methods are undefined</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-missing-methods</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-missing-methods</option></entry>
+            <entry>warn when class methods are undefined</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-missing-methods</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-missing-signatures</option></entry>
-	    <entry>warn about top-level functions without signatures</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-missing-signatures</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-missing-signatures</option></entry>
+            <entry>warn about top-level functions without signatures</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-missing-signatures</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-missing-local-sigs</option></entry>
-	    <entry>warn about polymorphic local bindings without signatures</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-missing-local-sigs</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-missing-local-sigs</option></entry>
+            <entry>warn about polymorphic local bindings without signatures</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-missing-local-sigs</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-name-shadowing</option></entry>
-	    <entry>warn when names are shadowed</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-name-shadowing</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-monomorphism-restriction</option></entry>
+            <entry>warn when the Monomorphism Restriction is applied</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-monomorphism-restriction</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-orphans</option></entry>
-	    <entry>warn when the module contains <link linkend="orphan-modules">orphan instance declarations
-	    or rewrite rules</link></entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-orphans</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-name-shadowing</option></entry>
+            <entry>warn when names are shadowed</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-name-shadowing</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-overlapping-patterns</option></entry>
-	    <entry>warn about overlapping patterns</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-overlapping-patterns</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-orphans, -fwarn-auto-orphans</option></entry>
+            <entry>warn when the module contains <link linkend="orphan-modules">orphan instance declarations
+                or rewrite rules</link></entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-orphans, -fno-warn-auto-orphans</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-tabs</option></entry>
-	    <entry>warn if there are tabs in the source file</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-tabs</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-overlapping-patterns</option></entry>
+            <entry>warn about overlapping patterns</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-overlapping-patterns</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-type-defaults</option></entry>
-	    <entry>warn when defaulting happens</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-type-defaults</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-tabs</option></entry>
+            <entry>warn if there are tabs in the source file</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-tabs</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-monomorphism-restriction</option></entry>
-	    <entry>warn when the Monomorphism Restriction is applied</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-monomorphism-restriction</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-type-defaults</option></entry>
+            <entry>warn when defaulting happens</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-type-defaults</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-unused-binds</option></entry>
-	    <entry>warn about bindings that are unused</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-unused-binds</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-unrecognised-pragmas</option></entry>
+            <entry>warn about uses of pragmas that GHC doesn't recognise</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-unrecognised-pragmas</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-unused-imports</option></entry>
-	    <entry>warn about unnecessary imports</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-unused-imports</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-unused-binds</option></entry>
+            <entry>warn about bindings that are unused</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-unused-binds</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-unused-matches</option></entry>
-	    <entry>warn about variables in patterns that aren't used</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-unused-matches</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-unused-imports</option></entry>
+            <entry>warn about unnecessary imports</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-unused-imports</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-unused-do-bind</option></entry>
-	    <entry>warn about do bindings that appear to throw away values of types other than <literal>()</literal></entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-unused-do-bind</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-unused-matches</option></entry>
+            <entry>warn about variables in patterns that aren't used</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-unused-matches</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-wrong-do-bind</option></entry>
-	    <entry>warn about do bindings that appear to throw away monadic values that you should have bound instead</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-wrong-do-bind</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-unused-do-bind</option></entry>
+            <entry>warn about do bindings that appear to throw away values of types other than <literal>()</literal></entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-unused-do-bind</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-unsafe</option></entry>
-       <entry>warn if the module being compiled is regarded to be unsafe.
-         Should be used to check the safety status of modules when using safe
-         inference.</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-unsafe</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-wrong-do-bind</option></entry>
+            <entry>warn about do bindings that appear to throw away monadic values that you should have bound instead</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-wrong-do-bind</option></entry>
+          </row>
 
-	  <row>
-	    <entry><option>-fwarn-safe</option></entry>
-       <entry>warn if the module being compiled is regarded to be safe.
-         Should be used to check the safety status of modules when using safe
-         inference.</entry>
-	    <entry>dynamic</entry>
-	    <entry><option>-fno-warn-safe</option></entry>
-	  </row>
+          <row>
+            <entry><option>-fwarn-unsafe</option></entry>
+            <entry>warn if the module being compiled is regarded to be unsafe.
+              Should be used to check the safety status of modules when using safe
+              inference.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-unsafe</option></entry>
+          </row>
 
-	  </tbody>
-	</tgroup>
-      </informaltable>
+          <row>
+            <entry><option>-fwarn-safe</option></entry>
+            <entry>warn if the module being compiled is regarded to be safe.
+              Should be used to check the safety status of modules when using safe
+              inference.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-safe</option></entry>
+          </row>
 
-    </sect2>
-    <sect2>
-      <title>Optimisation levels</title>
+          <row>
+            <entry><option>-fwarn-warnings-deprecations</option></entry>
+            <entry>warn about uses of functions &amp; types that have warnings or deprecated pragmas</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-warn-warnings-deprecations</option></entry>
+          </row>
 
-      <para><xref linkend="options-optimise"/></para>
+        </tbody>
+      </tgroup>
+    </informaltable>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-O</option></entry>
-	      <entry>Enable default optimisation (level 1)</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-O0</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-O</option><replaceable>n</replaceable></entry>
-	      <entry>Set optimisation level <replaceable>n</replaceable></entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-O0</option></entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
+  </sect2>
+  <sect2>
+    <title>Optimisation levels</title>
 
-    </sect2>
-    <sect2>
-      <title>Individual optimisations</title>
+    <para><xref linkend="options-optimise"/></para>
 
-      <para><xref linkend="options-f"/></para>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-O</option></entry>
+            <entry>Enable default optimisation (level 1)</entry>
+            <entry>dynamic</entry>
+            <entry><option>-O0</option></entry>
+          </row>
+          <row>
+            <entry><option>-O</option><replaceable>n</replaceable></entry>
+            <entry>Set optimisation level <replaceable>n</replaceable></entry>
+            <entry>dynamic</entry>
+            <entry><option>-O0</option></entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fcase-merge</option></entry>
-	      <entry>Enable case-merging. Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-case-merge</option></entry>
-	    </row>
+  </sect2>
+  <sect2>
+    <title>Individual optimisations</title>
 
-	    <row>
-	      <entry><option>-fcse</option></entry>
-	      <entry>Turn on common sub-expression elimination. Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-cse</entry>
-	    </row>
+    <para><xref linkend="options-f"/></para>
 
-	    <row>
-	      <entry><option>-fdicts-strict</option></entry>
-	      <entry>Make dictionaries strict</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-dicts-strict</option></entry>
-	    </row>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fcase-merge</option></entry>
+            <entry>Enable case-merging. Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-case-merge</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fdo-eta-reduction</option></entry>
-	      <entry>Enable eta-reduction. Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-do-eta-reduction</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fcse</option></entry>
+            <entry>Turn on common sub-expression elimination. Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-cse</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fdo-lambda-eta-expansion</option></entry>
-	      <entry>Enable lambda eta-reduction</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-do-lambda-eta-expansion</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fdicts-strict</option></entry>
+            <entry>Make dictionaries strict</entry>
+            <entry>static</entry>
+            <entry><option>-fno-dicts-strict</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-feager-blackholing</option></entry>
-	      <entry>Turn on <link linkend="parallel-compile-options">eager blackholing</link></entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fdo-eta-reduction</option></entry>
+            <entry>Enable eta-reduction. Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-do-eta-reduction</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fenable-rewrite-rules</option></entry>
-	      <entry>Switch on all rewrite rules (including rules
-	      generated by automatic specialisation of overloaded functions).
-	      Implied by <option>-O</option>. </entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-enable-rewrite-rules</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fdo-lambda-eta-expansion</option></entry>
+            <entry>Enable lambda eta-reduction</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-do-lambda-eta-expansion</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fexcess-precision</option></entry>
-	      <entry>Enable excess intermediate precision</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-excess-precision</option></entry>
-	    </row>
+          <row>
+            <entry><option>-feager-blackholing</option></entry>
+            <entry>Turn on <link linkend="parallel-compile-options">eager blackholing</link></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-ffloat-in</option></entry>
-	      <entry>Turn on the float-in transformation. Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-float-in</entry>
-	    </row>
+          <row>
+            <entry><option>-fenable-rewrite-rules</option></entry>
+            <entry>Switch on all rewrite rules (including rules
+              generated by automatic specialisation of overloaded functions).
+              Implied by <option>-O</option>. </entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-enable-rewrite-rules</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-ffull-laziness</option></entry>
-	      <entry>Turn on full laziness (floating bindings outwards). Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-full-laziness</entry>
-	    </row>
+          <row>
+            <entry><option>-fvectorise</option></entry>
+            <entry>Enable vectorisation of nested data parallelism</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-vectorise</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fignore-asserts</option></entry>
-	      <entry>Ignore assertions in the source</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-ignore-asserts</option></entry>
-	    </row>
+          <row>
+            <entry><option>-favoid-vect</option></entry>
+            <entry>Enable vectorisation avoidance (EXPERIMENTAL)</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-avoid-vect</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fignore-interface-pragmas</option></entry>
-	      <entry>Ignore pragmas in interface files</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-ignore-interface-pragmas</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fexcess-precision</option></entry>
+            <entry>Enable excess intermediate precision</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-excess-precision</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fliberate-case</option></entry>
-	      <entry>Turn on the liberate-case transformation. Implied by <option>-O2</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-liberate-case</entry>
-	    </row>
+          <row>
+            <entry><option>-ffloat-in</option></entry>
+            <entry>Turn on the float-in transformation. Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-float-in</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fliberate-case-threshold</option>=<replaceable>n</replaceable></entry>
-	      <entry>Set the size threshold for the liberate-case transformation to <replaceable>n</replaceable> (default: 200)</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-liberate-case-threshold</option></entry>
-	    </row>
+          <row>
+            <entry><option>-ffull-laziness</option></entry>
+            <entry>Turn on full laziness (floating bindings outwards). Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-full-laziness</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fmax-simplifier-iterations</option></entry>
-	      <entry>Set the max iterations for the simplifier</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fignore-asserts</option></entry>
+            <entry>Ignore assertions in the source</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-ignore-asserts</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fmax-worker-args</option></entry>
-	      <entry>If a worker has that many arguments, none will be
-	        unpacked anymore (default: 10)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fignore-interface-pragmas</option></entry>
+            <entry>Ignore pragmas in interface files</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-ignore-interface-pragmas</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fno-opt-coercion</option></entry>
-	      <entry>Turn off the coercion optimiser</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fliberate-case</option></entry>
+            <entry>Turn on the liberate-case transformation. Implied by <option>-O2</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-liberate-case</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fno-pre-inlining</option></entry>
-	      <entry>Turn off pre-inlining</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fliberate-case-threshold</option>=<replaceable>n</replaceable></entry>
+            <entry>Set the size threshold for the liberate-case transformation to <replaceable>n</replaceable> (default: 200)</entry>
+            <entry>static</entry>
+            <entry><option>-fno-liberate-case-threshold</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fno-state-hack</option></entry>
-	      <entry>Turn off the "state hack" whereby any lambda with a real-world state token
-	      as argument is considered to be single-entry.  Hence OK to inline things inside it.</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fmax-simplifier-iterations</option></entry>
+            <entry>Set the max iterations for the simplifier</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fpedantic-bottoms</option></entry>
-	      <entry>Make GHC be more precise about its treatment of bottom (but see also
-                     <option>-fno-state-hack</option>). In particular, GHC will not
-                     eta-expand through a case expression.</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-pedantic-bottoms</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fmax-worker-args</option></entry>
+            <entry>If a worker has that many arguments, none will be
+              unpacked anymore (default: 10)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fomit-interface-pragmas</option></entry>
-	      <entry>Don't generate interface pragmas</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-omit-interface-pragmas</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fno-opt-coercion</option></entry>
+            <entry>Turn off the coercion optimiser</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fsimplifier-phases</option></entry>
-	      <entry>Set the number of phases for the simplifier (default 2).
+          <row>
+            <entry><option>-fno-pre-inlining</option></entry>
+            <entry>Turn off pre-inlining</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+
+          <row>
+            <entry><option>-fno-state-hack</option></entry>
+            <entry>Turn off the "state hack" whereby any lambda with a real-world state token
+              as argument is considered to be single-entry.  Hence OK to inline things inside it.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+
+          <row>
+            <entry><option>-fpedantic-bottoms</option></entry>
+            <entry>Make GHC be more precise about its treatment of bottom (but see also
+              <option>-fno-state-hack</option>). In particular, GHC will not
+              eta-expand through a case expression.</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-pedantic-bottoms</option></entry>
+          </row>
+
+          <row>
+            <entry><option>-fomit-interface-pragmas</option></entry>
+            <entry>Don't generate interface pragmas</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-omit-interface-pragmas</option></entry>
+          </row>
+
+          <row>
+            <entry><option>-fsimplifier-phases</option></entry>
+            <entry>Set the number of phases for the simplifier (default 2).
               Ignored with <option>-O0</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-               <entry><option>-fsimpl-tick-factor=<replaceable>n</replaceable></option></entry>
-               <entry>Set the percentage factor for simplifier ticks (default 100)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
+          <row>
+            <entry><option>-fsimpl-tick-factor=<replaceable>n</replaceable></option></entry>
+            <entry>Set the percentage factor for simplifier ticks (default 100)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fspec-constr</option></entry>
-	      <entry>Turn on the SpecConstr transformation. Implied by <option>-O2</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-spec-constr</entry>
-	    </row>
+          <row>
+            <entry><option>-fspec-constr</option></entry>
+            <entry>Turn on the SpecConstr transformation. Implied by <option>-O2</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-spec-constr</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fspec-constr-threshold</option>=<replaceable>n</replaceable></entry>
-	      <entry>Set the size threshold for the SpecConstr transformation to <replaceable>n</replaceable> (default: 200)</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-spec-constr-threshold</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fspec-constr-threshold</option>=<replaceable>n</replaceable></entry>
+            <entry>Set the size threshold for the SpecConstr transformation to <replaceable>n</replaceable> (default: 200)</entry>
+            <entry>static</entry>
+            <entry><option>-fno-spec-constr-threshold</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fspec-constr-count</option>=<replaceable>n</replaceable></entry>
-	      <entry>Set to <replaceable>n</replaceable> (default: 3) the maximum number of
-		specialisations that will be created for any one function
-		by the SpecConstr transformation</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-spec-constr-count</option></entry>
-	    </row>
+          <row>
+            <entry><option>-fspec-constr-count</option>=<replaceable>n</replaceable></entry>
+            <entry>Set to <replaceable>n</replaceable> (default: 3) the maximum number of
+              specialisations that will be created for any one function
+              by the SpecConstr transformation</entry>
+            <entry>static</entry>
+            <entry><option>-fno-spec-constr-count</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fspecialise</option></entry>
-	      <entry>Turn on specialisation of overloaded functions. Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-specialise</entry>
-	    </row>
+          <row>
+            <entry><option>-fspecialise</option></entry>
+            <entry>Turn on specialisation of overloaded functions. Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-specialise</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fstrictness</option></entry>
-	      <entry>Turn on strictness analysis. Implied by <option>-O</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-strictness</entry>
-	    </row>
+          <row>
+            <entry><option>-fstrictness</option></entry>
+            <entry>Turn on strictness analysis. Implied by <option>-O</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-strictness</entry>
+          </row>
 
-            <row>
-              <entry><option>-fstrictness=before</option>=<replaceable>n</replaceable></entry>
-              <entry>Run an additional strictness analysis before simplifier
-phase <replaceable>n</replaceable></entry>
-              <entry>dynamic</entry>
-              <entry>-</entry>
-            </row>
+          <row>
+            <entry><option>-fstrictness=before</option>=<replaceable>n</replaceable></entry>
+            <entry>Run an additional strictness analysis before simplifier
+              phase <replaceable>n</replaceable></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-fstatic-argument-transformation</option></entry>
-	      <entry>Turn on the static argument transformation. Implied by <option>-O2</option>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-fno-static-argument-transformation</entry>
-	    </row>
+          <row>
+            <entry><option>-fstatic-argument-transformation</option></entry>
+            <entry>Turn on the static argument transformation. Implied by <option>-O2</option>.</entry>
+            <entry>dynamic</entry>
+            <entry>-fno-static-argument-transformation</entry>
+          </row>
 
-	    <row>
-	      <entry><option>-funbox-strict-fields</option></entry>
-	      <entry>Flatten strict constructor fields</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-fno-unbox-strict-fields</option></entry>
-	    </row>
+          <row>
+            <entry><option>-funbox-strict-fields</option></entry>
+            <entry>Flatten strict constructor fields</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-unbox-strict-fields</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-funfolding-creation-threshold</option></entry>
-	      <entry>Tweak unfolding settings</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-unfolding-creation-threshold</option></entry>
-	    </row>
+          <row>
+            <entry><option>-funfolding-creation-threshold</option></entry>
+            <entry>Tweak unfolding settings</entry>
+            <entry>static</entry>
+            <entry><option>-fno-unfolding-creation-threshold</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-funfolding-fun-discount</option></entry>
-	      <entry>Tweak unfolding settings</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-unfolding-fun-discount</option></entry>
-	    </row>
+          <row>
+            <entry><option>-funfolding-fun-discount</option></entry>
+            <entry>Tweak unfolding settings</entry>
+            <entry>static</entry>
+            <entry><option>-fno-unfolding-fun-discount</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-funfolding-keeness-factor</option></entry>
-	      <entry>Tweak unfolding settings</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-unfolding-keeness-factor</option></entry>
-	    </row>
+          <row>
+            <entry><option>-funfolding-keeness-factor</option></entry>
+            <entry>Tweak unfolding settings</entry>
+            <entry>static</entry>
+            <entry><option>-fno-unfolding-keeness-factor</option></entry>
+          </row>
 
-	    <row>
-	      <entry><option>-funfolding-use-threshold</option></entry>
-	      <entry>Tweak unfolding settings</entry>
-	      <entry>static</entry>
-	      <entry><option>-fno-unfolding-use-threshold</option></entry>
-	    </row>
+          <row>
+            <entry><option>-funfolding-use-threshold</option></entry>
+            <entry>Tweak unfolding settings</entry>
+            <entry>static</entry>
+            <entry><option>-fno-unfolding-use-threshold</option></entry>
+          </row>
 
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Profiling options</title>
+  <sect2>
+    <title>Profiling options</title>
 
-      <para><xref linkend="profiling"/></para>
+    <para><xref linkend="profiling"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-prof</option></entry>
-	      <entry>Turn on profiling</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-              <entry><option>-fprof-auto</option></entry>
-              <entry>Auto-add <literal>SCC</literal>s to all bindings
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-prof</option></entry>
+            <entry>Turn on profiling</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fprof-auto</option></entry>
+            <entry>Auto-add <literal>SCC</literal>s to all bindings
               not marked INLINE</entry>
-	      <entry>dynamic</entry>
-              <entry><option>-fno-prof-auto</option></entry>
-	    </row>
-	    <row>
-              <entry><option>-fprof-auto-top</option></entry>
-              <entry>Auto-add <literal>SCC</literal>s to all top-level
+            <entry>dynamic</entry>
+            <entry><option>-fno-prof-auto</option></entry>
+          </row>
+          <row>
+            <entry><option>-fprof-auto-top</option></entry>
+            <entry>Auto-add <literal>SCC</literal>s to all top-level
               bindings not marked INLINE</entry>
-              <entry>dynamic</entry>
-              <entry><option>-fno-prof-auto</option></entry>
-	    </row>
-	    <row>
-              <entry><option>-fprof-auto-exported</option></entry>
-              <entry>Auto-add <literal>SCC</literal>s to all exported
+            <entry>dynamic</entry>
+            <entry><option>-fno-prof-auto</option></entry>
+          </row>
+          <row>
+            <entry><option>-fprof-auto-exported</option></entry>
+            <entry>Auto-add <literal>SCC</literal>s to all exported
               bindings not marked INLINE</entry>
-              <entry>dynamic</entry>
-              <entry><option>-fno-prof-auto</option></entry>
-	    </row>
-	    <row>
-              <entry><option>-fprof-cafs</option></entry>
-              <entry>Auto-add <literal>SCC</literal>s to all CAFs</entry>
-	      <entry>dynamic</entry>
-              <entry><option>-fno-prof-cafs</option></entry>
-	    </row>
-	    <row>
-              <entry><option>-fno-prof-count-entries</option></entry>
-              <entry>Do not collect entry counts</entry>
-	      <entry>dynamic</entry>
-              <entry><option>-fprof-count-entries</option></entry>
-	    </row>
-            <row>
-	      <entry><option>-ticky</option></entry>
-	      <entry><link linkend="ticky-ticky">Turn on ticky-ticky profiling</link></entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+            <entry>dynamic</entry>
+            <entry><option>-fno-prof-auto</option></entry>
+          </row>
+          <row>
+            <entry><option>-fprof-cafs</option></entry>
+            <entry>Auto-add <literal>SCC</literal>s to all CAFs</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fno-prof-cafs</option></entry>
+          </row>
+          <row>
+            <entry><option>-fno-prof-count-entries</option></entry>
+            <entry>Do not collect entry counts</entry>
+            <entry>dynamic</entry>
+            <entry><option>-fprof-count-entries</option></entry>
+          </row>
+          <row>
+            <entry><option>-ticky</option></entry>
+            <entry><link linkend="ticky-ticky">Turn on ticky-ticky profiling</link></entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Program coverage options</title>
+  <sect2>
+    <title>Program coverage options</title>
 
-      <para><xref linkend="hpc"/></para>
+    <para><xref linkend="hpc"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fhpc</option></entry>
-	      <entry>Turn on Haskell program coverage instrumentation</entry>
-	      <entry>static</entry>
-	      <entry><option>-</option></entry>
-	    </row>
-	    <row>
-	      <entry><option>-hpcdir dir</option></entry>
-	      <entry>Directory to deposit .mix files during compilation (default is .hpc)</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-</option></entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fhpc</option></entry>
+            <entry>Turn on Haskell program coverage instrumentation</entry>
+            <entry>static</entry>
+            <entry><option>-</option></entry>
+          </row>
+          <row>
+            <entry><option>-hpcdir dir</option></entry>
+            <entry>Directory to deposit .mix files during compilation (default is .hpc)</entry>
+            <entry>dynamic</entry>
+            <entry><option>-</option></entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Haskell pre-processor options</title>
+  <sect2>
+    <title>Haskell pre-processor options</title>
 
-      <para><xref linkend="pre-processor"/></para>
+    <para><xref linkend="pre-processor"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-F</option></entry>
-	      <entry>
-                  Enable the use of a pre-processor
-                  (set with <option>-pgmF</option>)
-              </entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-F</option></entry>
+            <entry>
+              Enable the use of a pre-processor
+              (set with <option>-pgmF</option>)
+            </entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>C pre-processor options</title>
+  <sect2>
+    <title>C pre-processor options</title>
 
-      <para><xref linkend="c-pre-processor"/></para>
+    <para><xref linkend="c-pre-processor"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-cpp</option></entry>
-	      <entry>Run the C pre-processor on Haskell source files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-D</option><replaceable>symbol</replaceable><optional>=<replaceable>value</replaceable></optional></entry>
-	      <entry>Define a symbol in the C pre-processor</entry>
-	      <entry>dynamic</entry>
-	      <entry><option>-U</option><replaceable>symbol</replaceable></entry>
-	    </row>
-	    <row>
-	      <entry><option>-U</option><replaceable>symbol</replaceable></entry>
-	      <entry>Undefine a symbol in the C pre-processor</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-I</option><replaceable>dir</replaceable></entry>
-	      <entry>Add <replaceable>dir</replaceable> to the
-	      directory search list for <literal>#include</literal> files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-cpp</option></entry>
+            <entry>Run the C pre-processor on Haskell source files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-D</option><replaceable>symbol</replaceable><optional>=<replaceable>value</replaceable></optional></entry>
+            <entry>Define a symbol in the C pre-processor</entry>
+            <entry>dynamic</entry>
+            <entry><option>-U</option><replaceable>symbol</replaceable></entry>
+          </row>
+          <row>
+            <entry><option>-U</option><replaceable>symbol</replaceable></entry>
+            <entry>Undefine a symbol in the C pre-processor</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-I</option><replaceable>dir</replaceable></entry>
+            <entry>Add <replaceable>dir</replaceable> to the
+              directory search list for <literal>#include</literal> files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Code generation options</title>
+  <sect2>
+    <title>Code generation options</title>
 
-      <para><xref linkend="options-codegen"/></para>
+    <para><xref linkend="options-codegen"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fasm</option></entry>
-        <entry>Use the <link linkend="native-code-gen">native code
-            generator</link></entry>
-	      <entry>dynamic</entry>
-	      <entry>-fllvm</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fllvm</option></entry>
-        <entry>Compile using the <link linkend="llvm-code-gen">LLVM code
-            generator</link></entry>
-	      <entry>dynamic</entry>
-	      <entry>-fasm</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-code</option></entry>
-	      <entry>Omit code generation</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fbyte-code</option></entry>
-	      <entry>Generate byte-code</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fobject-code</option></entry>
-	      <entry>Generate object code</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fasm</option></entry>
+            <entry>Use the <link linkend="native-code-gen">native code
+                generator</link></entry>
+            <entry>dynamic</entry>
+            <entry>-fllvm</entry>
+          </row>
+          <row>
+            <entry><option>-fllvm</option></entry>
+            <entry>Compile using the <link linkend="llvm-code-gen">LLVM code
+                generator</link></entry>
+            <entry>dynamic</entry>
+            <entry>-fasm</entry>
+          </row>
+          <row>
+            <entry><option>-fno-code</option></entry>
+            <entry>Omit code generation</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fbyte-code</option></entry>
+            <entry>Generate byte-code</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fobject-code</option></entry>
+            <entry>Generate object code</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Linking options</title>
+  <sect2>
+    <title>Linking options</title>
 
-      <para><xref linkend="options-linker"/></para>
+    <para><xref linkend="options-linker"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-  	      <entry><option>-shared</option></entry>
-	      <entry>Generate a shared library (as opposed to an executable)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fPIC</option></entry>
-	      <entry>Generate position-independent code (where available)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dynamic</option></entry>
-	      <entry>Use dynamic Haskell libraries (if available)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dynload</option></entry>
-	      <entry>Selects one of a number of modes for finding shared
-	        libraries at runtime.</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-framework</option> <replaceable>name</replaceable></entry>
-	      <entry>On Darwin/MacOS X only, link in the framework <replaceable>name</replaceable>.
-		This option corresponds to the <option>-framework</option> option for Apple's Linker.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-framework-path</option> <replaceable>name</replaceable></entry>
-	      <entry>On Darwin/MacOS X only, add <replaceable>dir</replaceable> to the list of
-	        directories searched for frameworks.
-		This option corresponds to the <option>-F</option> option for Apple's Linker.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-l</option><replaceable>lib</replaceable></entry>
-	      <entry>Link in library <replaceable>lib</replaceable></entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-L</option><replaceable>dir</replaceable></entry>
-	      <entry>Add <replaceable>dir</replaceable> to the list of
-	      directories searched for libraries</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-main-is</option></entry>
-	      <entry>Set main module and function</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>--mk-dll</option></entry>
-	      <entry>DLL-creation mode (Windows only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-no-hs-main</option></entry>
-	      <entry>Don't assume this program contains <literal>main</literal></entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-rtsopts</option>, <option>-rtsopts={none,some,all}</option></entry>
-	      <entry>Control whether the RTS behaviour can be tweaked via command-line
-          flags and the <literal>GHCRTS</literal> environment
-          variable. Using <literal>none</literal> means no RTS flags can be given; <literal>some</literal> means only a minimum of safe options can be given (the default), and <literal>all</literal> (or no argument at all) means that all RTS flags are permitted.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-with-rtsopts=<replaceable>opts</replaceable></option></entry>
-	      <entry>Set the default RTS options to
-          <replaceable>opts</replaceable>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-no-link</option></entry>
-	      <entry>Omit linking</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-split-objs</option></entry>
-	      <entry>Split objects (for libraries)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-static</option></entry>
-	      <entry>Use static Haskell libraries</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-threaded</option></entry>
-	      <entry>Use the threaded runtime</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-debug</option></entry>
-	      <entry>Use the debugging runtime</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-eventlog</option></entry>
-	      <entry>Enable runtime event tracing</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-gen-manifest</option></entry>
-	      <entry>Do not generate a manifest file (Windows only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-embed-manifest</option></entry>
-	      <entry>Do not embed the manifest in the executable (Windows only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-shared-implib</option></entry>
-	      <entry>Don't generate an import library for a DLL (Windows only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dylib-install-name</option> <replaceable>path</replaceable></entry>
-	      <entry>Set the install name (via <literal>-install_name</literal> passed to Apple's
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-shared</option></entry>
+            <entry>Generate a shared library (as opposed to an executable)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fPIC</option></entry>
+            <entry>Generate position-independent code (where available)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dynamic</option></entry>
+            <entry>Use dynamic Haskell libraries (if available)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dynload</option></entry>
+            <entry>Selects one of a number of modes for finding shared
+              libraries at runtime.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-framework</option> <replaceable>name</replaceable></entry>
+            <entry>On Darwin/MacOS X only, link in the framework <replaceable>name</replaceable>.
+              This option corresponds to the <option>-framework</option> option for Apple's Linker.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-framework-path</option> <replaceable>name</replaceable></entry>
+            <entry>On Darwin/MacOS X only, add <replaceable>dir</replaceable> to the list of
+              directories searched for frameworks.
+              This option corresponds to the <option>-F</option> option for Apple's Linker.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-l</option><replaceable>lib</replaceable></entry>
+            <entry>Link in library <replaceable>lib</replaceable></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-L</option><replaceable>dir</replaceable></entry>
+            <entry>Add <replaceable>dir</replaceable> to the list of
+              directories searched for libraries</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-main-is</option></entry>
+            <entry>Set main module and function</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>--mk-dll</option></entry>
+            <entry>DLL-creation mode (Windows only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-no-hs-main</option></entry>
+            <entry>Don't assume this program contains <literal>main</literal></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-rtsopts</option>, <option>-rtsopts={none,some,all}</option></entry>
+            <entry>Control whether the RTS behaviour can be tweaked via command-line
+              flags and the <literal>GHCRTS</literal> environment
+              variable. Using <literal>none</literal> means no RTS flags can be given; <literal>some</literal> means only a minimum of safe options can be given (the default), and <literal>all</literal> (or no argument at all) means that all RTS flags are permitted.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-with-rtsopts=<replaceable>opts</replaceable></option></entry>
+            <entry>Set the default RTS options to
+              <replaceable>opts</replaceable>.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-no-link</option></entry>
+            <entry>Omit linking</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-split-objs</option></entry>
+            <entry>Split objects (for libraries)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-static</option></entry>
+            <entry>Use static Haskell libraries</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-threaded</option></entry>
+            <entry>Use the threaded runtime</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-debug</option></entry>
+            <entry>Use the debugging runtime</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-eventlog</option></entry>
+            <entry>Enable runtime event tracing</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fno-gen-manifest</option></entry>
+            <entry>Do not generate a manifest file (Windows only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fno-embed-manifest</option></entry>
+            <entry>Do not embed the manifest in the executable (Windows only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fno-shared-implib</option></entry>
+            <entry>Don't generate an import library for a DLL (Windows only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dylib-install-name</option> <replaceable>path</replaceable></entry>
+            <entry>Set the install name (via <literal>-install_name</literal> passed to Apple's
               linker), specifying the full install path of the library file. Any libraries
               or executables that link with it later will pick up that path as their
               runtime search location for it. (Darwin/MacOS X only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Plugin options</title>
+  <sect2>
+    <title>Plugin options</title>
 
-      <para><xref linkend="compiler-plugins"/></para>
+    <para><xref linkend="compiler-plugins"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fplugin</option>=<replaceable>module</replaceable></entry>
-	      <entry>Load a plugin exported by a given module</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fplugin-opt</option>=<replaceable>module:args</replaceable></entry>
-	      <entry>Give arguments to a plugin module; module must be specified with <option>-fplugin</option></entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fplugin</option>=<replaceable>module</replaceable></entry>
+            <entry>Load a plugin exported by a given module</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fplugin-opt</option>=<replaceable>module:args</replaceable></entry>
+            <entry>Give arguments to a plugin module; module must be specified with <option>-fplugin</option></entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
 
-    <sect2>
-      <title>Replacing phases</title>
+  <sect2>
+    <title>Replacing phases</title>
 
-      <para><xref linkend="replacing-phases"/></para>
+    <para><xref linkend="replacing-phases"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-pgmL</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the literate pre-processor</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgmP</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the C
-	      pre-processor (with <option>-cpp</option> only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgmc</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the C compiler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    <row>
-	      <entry><option>-pgmlo</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the LLVM optimiser</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgmlc</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the LLVM compiler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    </row>
-	    <row>
-	      <entry><option>-pgms</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the splitter</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgma</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the assembler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgml</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the linker</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgmdll</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the DLL generator</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgmF</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the pre-processor
-	      (with <option>-F</option> only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-pgmwindres</option> <replaceable>cmd</replaceable></entry>
-	      <entry>Use <replaceable>cmd</replaceable> as the program for
-                embedding manifests on Windows.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-      <indexterm><primary><option>-pgmL</option></primary></indexterm>
-      <indexterm><primary><option>-pgmP</option></primary></indexterm>
-      <indexterm><primary><option>-pgmc</option></primary></indexterm>
-      <indexterm><primary><option>-pgmlo</option></primary></indexterm>
-      <indexterm><primary><option>-pgmlc</option></primary></indexterm>
-      <indexterm><primary><option>-pgma</option></primary></indexterm>
-      <indexterm><primary><option>-pgml</option></primary></indexterm>
-      <indexterm><primary><option>-pgmdll</option></primary></indexterm>
-      <indexterm><primary><option>-pgmF</option></primary></indexterm>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-pgmL</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the literate pre-processor</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgmP</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the C
+              pre-processor (with <option>-cpp</option> only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgmc</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the C compiler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+            <row>
+              <entry><option>-pgmlo</option> <replaceable>cmd</replaceable></entry>
+              <entry>Use <replaceable>cmd</replaceable> as the LLVM optimiser</entry>
+              <entry>dynamic</entry>
+              <entry>-</entry>
+            </row>
+            <row>
+              <entry><option>-pgmlc</option> <replaceable>cmd</replaceable></entry>
+              <entry>Use <replaceable>cmd</replaceable> as the LLVM compiler</entry>
+              <entry>dynamic</entry>
+              <entry>-</entry>
+            </row>
+          </row>
+          <row>
+            <entry><option>-pgms</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the splitter</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgma</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the assembler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgml</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the linker</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgmdll</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the DLL generator</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgmF</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the pre-processor
+              (with <option>-F</option> only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-pgmwindres</option> <replaceable>cmd</replaceable></entry>
+            <entry>Use <replaceable>cmd</replaceable> as the program for
+              embedding manifests on Windows.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+    <indexterm><primary><option>-pgmL</option></primary></indexterm>
+    <indexterm><primary><option>-pgmP</option></primary></indexterm>
+    <indexterm><primary><option>-pgmc</option></primary></indexterm>
+    <indexterm><primary><option>-pgmlo</option></primary></indexterm>
+    <indexterm><primary><option>-pgmlc</option></primary></indexterm>
+    <indexterm><primary><option>-pgma</option></primary></indexterm>
+    <indexterm><primary><option>-pgml</option></primary></indexterm>
+    <indexterm><primary><option>-pgmdll</option></primary></indexterm>
+    <indexterm><primary><option>-pgmF</option></primary></indexterm>
 
-    </sect2>
+  </sect2>
 
-    <sect2>
-      <title>Forcing options to particular phases</title>
+  <sect2>
+    <title>Forcing options to particular phases</title>
 
-      <para><xref linkend="forcing-options-through"/></para>
+    <para><xref linkend="forcing-options-through"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-optL</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the literate pre-processor</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optP</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to cpp (with
-	      <option>-cpp</option> only)</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optF</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the
-	      custom pre-processor</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optc</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the C compiler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optlo</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the LLVM optimiser</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optlc</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the LLVM compiler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optm</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the mangler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-opta</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the assembler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optl</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the linker</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optdll</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to the DLL generator</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-optwindres</option> <replaceable>option</replaceable></entry>
-	      <entry>pass <replaceable>option</replaceable> to <literal>windres</literal>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-optL</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the literate pre-processor</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optP</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to cpp (with
+              <option>-cpp</option> only)</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optF</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the
+              custom pre-processor</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optc</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the C compiler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optlo</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the LLVM optimiser</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optlc</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the LLVM compiler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optm</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the mangler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-opta</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the assembler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optl</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the linker</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optdll</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to the DLL generator</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-optwindres</option> <replaceable>option</replaceable></entry>
+            <entry>pass <replaceable>option</replaceable> to <literal>windres</literal>.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Platform-specific options</title>
+  <sect2>
+    <title>Platform-specific options</title>
 
-      <para><xref linkend="options-platform"/></para>
+    <para><xref linkend="options-platform"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-          <tbody>
-            <row>
-	      <entry><option>-msse2</option></entry>
-	      <entry>(x86 only) Use SSE2 for floating point</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-            </row>
-          </tbody>
-	  <tbody>
-	    <row>
-	      <entry><option>-monly-[432]-regs</option></entry>
-	      <entry>(x86 only) give some registers back to the C compiler</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-msse2</option></entry>
+            <entry>(x86 only) Use SSE2 for floating point</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+        <tbody>
+          <row>
+            <entry><option>-monly-[432]-regs</option></entry>
+            <entry>(x86 only) give some registers back to the C compiler</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
 
-    <sect2>
-      <title>External core file options</title>
+  <sect2>
+    <title>External core file options</title>
 
-      <para><xref linkend="ext-core"/></para>
+    <para><xref linkend="ext-core"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fext-core</option></entry>
-	      <entry>Generate <filename>.hcr</filename> external Core files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fext-core</option></entry>
+            <entry>Generate <filename>.hcr</filename> external Core files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
 
-    <sect2>
-      <title>Compiler debugging options</title>
+  <sect2>
+    <title>Compiler debugging options</title>
 
-      <para><xref linkend="options-debugging"/></para>
+    <para><xref linkend="options-debugging"/></para>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-dcore-lint</option></entry>
-	      <entry>Turn on internal sanity checking</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-to-file</option></entry>
-	      <entry>Dump to files instead of stdout</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-asm</option></entry>
-	      <entry>Dump assembly</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-bcos</option></entry>
-	      <entry>Dump interpreter byte code</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-cmm</option></entry>
-	      <entry>Dump C-- output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-core-stats</option></entry>
-	      <entry>Print a one-line summary of the size of the Core program
-                     at the end of the optimisation pipeline </entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-cpranal</option></entry>
-	      <entry>Dump output from CPR analysis</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-cse</option></entry>
-	      <entry>Dump CSE output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-deriv</option></entry>
-	      <entry>Dump deriving output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-ds</option></entry>
-	      <entry>Dump desugarer output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-flatC</option></entry>
-	      <entry>Dump &ldquo;flat&rdquo; C</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-foreign</option></entry>
-	      <entry>Dump <literal>foreign export</literal> stubs</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-hpc</option></entry>
-	      <entry>Dump after instrumentation for program coverage</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-inlinings</option></entry>
-	      <entry>Dump inlining info</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-llvm</option></entry>
-	      <entry>Dump LLVM intermediate code</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-occur-anal</option></entry>
-	      <entry>Dump occurrence analysis output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-opt-cmm</option></entry>
-	      <entry>Dump the results of C-- to C-- optimising passes</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-parsed</option></entry>
-	      <entry>Dump parse tree</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-prep</option></entry>
-	      <entry>Dump prepared core</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-rn</option></entry>
-	      <entry>Dump renamer output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-rule-firings</option></entry>
-	      <entry>Dump rule firing info</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-rule-rewrites</option></entry>
-	      <entry>Dump detailed rule firing info</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-      <row>
-        <entry><option>-ddump-rules</option></entry>
-        <entry>Dump rules</entry>
-        <entry>dynamic</entry>
-        <entry>-</entry>
-      </row>
-      <row>
-        <entry><option>-ddump-vect</option></entry>
-        <entry>Dump vectoriser input and output</entry>
-        <entry>dynamic</entry>
-        <entry>-</entry>
-      </row>
-	    <row>
-	      <entry><option>-ddump-simpl</option></entry>
-	      <entry>Dump final simplifier output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-simpl-phases</option></entry>
-	      <entry>Dump output from each simplifier phase</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-simpl-iterations</option></entry>
-	      <entry>Dump output from each simplifier iteration</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-spec</option></entry>
-	      <entry>Dump specialiser output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-splices</option></entry>
-	      <entry>Dump TH spliced expressions, and what they evaluate to</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-stg</option></entry>
-	      <entry>Dump final STG</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-stranal</option></entry>
-	      <entry>Dump strictness analyser output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-tc</option></entry>
-	      <entry>Dump typechecker output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-types</option></entry>
-	      <entry>Dump type signatures</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-worker-wrapper</option></entry>
-	      <entry>Dump worker-wrapper output</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-if-trace</option></entry>
-	      <entry>Trace interface files</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-      <row>
-        <entry><option>-ddump-tc-trace</option></entry>
-        <entry>Trace typechecker</entry>
-        <entry>dynamic</entry>
-        <entry>-</entry>
-      </row>
-      <row>
-        <entry><option>-ddump-vt-trace</option></entry>
-        <entry>Trace vectoriser</entry>
-        <entry>dynamic</entry>
-        <entry>-</entry>
-      </row>
-	    <row>
-	      <entry><option>-ddump-rn-trace</option></entry>
-	      <entry>Trace renamer</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-rn-stats</option></entry>
-	      <entry>Renamer stats</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-ddump-simpl-stats</option></entry>
-	      <entry>Dump simplifier stats</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dno-debug-output</option></entry>
-	      <entry>Suppress unsolicited debugging output</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dppr-debug</option></entry>
-	      <entry>Turn on debug printing (more verbose)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dppr-noprags</option></entry>
-	      <entry>Don't output pragma info in dumps</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dppr-user-length</option></entry>
-	      <entry>Set the depth for printing expressions in error msgs</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dppr-colsNNN</option></entry>
-	      <entry>Set the width of debugging output. For example <option>-dppr-cols200</option></entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dppr-case-as-let</option></entry>
-	      <entry>Print single alternative case expressions as strict lets.</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-all</option></entry>
-	      <entry>In core dumps, suppress everything that is suppressable.</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-uniques</option></entry>
-	      <entry>Suppress the printing of uniques in debug output (easier to use <command>diff</command>)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-idinfo</option></entry>
-	      <entry>Suppress extended information about identifiers where they are bound</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-module-prefixes</option></entry>
-	      <entry>Suppress the printing of module qualification prefixes</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-type-signatures</option></entry>
-	      <entry>Suppress type signatures</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-type-applications</option></entry>
-	      <entry>Suppress type applications</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsuppress-coercions</option></entry>
-	      <entry>Suppress the printing of coercions in Core dumps to make them shorter</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dsource-stats</option></entry>
-	      <entry>Dump haskell source stats</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dcmm-lint</option></entry>
-	      <entry>C-- pass sanity checking</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dstg-lint</option></entry>
-	      <entry>STG pass sanity checking</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dstg-stats</option></entry>
-	      <entry>Dump STG stats</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dverbose-core2core</option></entry>
-	      <entry>Show output from each core-to-core pass</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dverbose-stg2stg</option></entry>
-	      <entry>Show output from each STG-to-STG pass</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dshow-passes</option></entry>
-	      <entry>Print out each pass name as it happens</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dfaststring-stats</option></entry>
-	      <entry>Show statistics for fast string usage when finished</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-dcore-lint</option></entry>
+            <entry>Turn on internal sanity checking</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-to-file</option></entry>
+            <entry>Dump to files instead of stdout</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-asm</option></entry>
+            <entry>Dump assembly</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-bcos</option></entry>
+            <entry>Dump interpreter byte code</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-cmm</option></entry>
+            <entry>Dump C-- output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-core-stats</option></entry>
+            <entry>Print a one-line summary of the size of the Core program
+              at the end of the optimisation pipeline </entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-cpranal</option></entry>
+            <entry>Dump output from CPR analysis</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-cse</option></entry>
+            <entry>Dump CSE output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-deriv</option></entry>
+            <entry>Dump deriving output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-ds</option></entry>
+            <entry>Dump desugarer output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-flatC</option></entry>
+            <entry>Dump &ldquo;flat&rdquo; C</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-foreign</option></entry>
+            <entry>Dump <literal>foreign export</literal> stubs</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-hpc</option></entry>
+            <entry>Dump after instrumentation for program coverage</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-inlinings</option></entry>
+            <entry>Dump inlining info</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-llvm</option></entry>
+            <entry>Dump LLVM intermediate code</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-occur-anal</option></entry>
+            <entry>Dump occurrence analysis output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-opt-cmm</option></entry>
+            <entry>Dump the results of C-- to C-- optimising passes</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-parsed</option></entry>
+            <entry>Dump parse tree</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-prep</option></entry>
+            <entry>Dump prepared core</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-rn</option></entry>
+            <entry>Dump renamer output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-rule-firings</option></entry>
+            <entry>Dump rule firing info</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-rule-rewrites</option></entry>
+            <entry>Dump detailed rule firing info</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-rules</option></entry>
+            <entry>Dump rules</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-vect</option></entry>
+            <entry>Dump vectoriser input and output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-simpl</option></entry>
+            <entry>Dump final simplifier output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-simpl-phases</option></entry>
+            <entry>Dump output from each simplifier phase</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-simpl-iterations</option></entry>
+            <entry>Dump output from each simplifier iteration</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-spec</option></entry>
+            <entry>Dump specialiser output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-splices</option></entry>
+            <entry>Dump TH spliced expressions, and what they evaluate to</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-stg</option></entry>
+            <entry>Dump final STG</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-stranal</option></entry>
+            <entry>Dump strictness analyser output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-tc</option></entry>
+            <entry>Dump typechecker output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-types</option></entry>
+            <entry>Dump type signatures</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-worker-wrapper</option></entry>
+            <entry>Dump worker-wrapper output</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-if-trace</option></entry>
+            <entry>Trace interface files</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-tc-trace</option></entry>
+            <entry>Trace typechecker</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-vt-trace</option></entry>
+            <entry>Trace vectoriser</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-rn-trace</option></entry>
+            <entry>Trace renamer</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-rn-stats</option></entry>
+            <entry>Renamer stats</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-ddump-simpl-stats</option></entry>
+            <entry>Dump simplifier stats</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dno-debug-output</option></entry>
+            <entry>Suppress unsolicited debugging output</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dppr-debug</option></entry>
+            <entry>Turn on debug printing (more verbose)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dppr-noprags</option></entry>
+            <entry>Don't output pragma info in dumps</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dppr-user-length</option></entry>
+            <entry>Set the depth for printing expressions in error msgs</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dppr-colsNNN</option></entry>
+            <entry>Set the width of debugging output. For example <option>-dppr-cols200</option></entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dppr-case-as-let</option></entry>
+            <entry>Print single alternative case expressions as strict lets.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-all</option></entry>
+            <entry>In core dumps, suppress everything that is suppressable.</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-uniques</option></entry>
+            <entry>Suppress the printing of uniques in debug output (easier to use <command>diff</command>)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-idinfo</option></entry>
+            <entry>Suppress extended information about identifiers where they are bound</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-module-prefixes</option></entry>
+            <entry>Suppress the printing of module qualification prefixes</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-type-signatures</option></entry>
+            <entry>Suppress type signatures</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-type-applications</option></entry>
+            <entry>Suppress type applications</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsuppress-coercions</option></entry>
+            <entry>Suppress the printing of coercions in Core dumps to make them shorter</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dsource-stats</option></entry>
+            <entry>Dump haskell source stats</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dcmm-lint</option></entry>
+            <entry>C-- pass sanity checking</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dstg-lint</option></entry>
+            <entry>STG pass sanity checking</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dstg-stats</option></entry>
+            <entry>Dump STG stats</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dverbose-core2core</option></entry>
+            <entry>Show output from each core-to-core pass</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dverbose-stg2stg</option></entry>
+            <entry>Show output from each STG-to-STG pass</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dshow-passes</option></entry>
+            <entry>Print out each pass name as it happens</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dfaststring-stats</option></entry>
+            <entry>Show statistics for fast string usage when finished</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
 
-    <sect2>
-      <title>Misc compiler options</title>
+  <sect2>
+    <title>Misc compiler options</title>
 
-      <informaltable>
-	<tgroup cols="4" align="left" colsep="1" rowsep="1">
-	  <thead>
-	    <row>
-	      <entry>Flag</entry>
-	      <entry>Description</entry>
-	      <entry>Static/Dynamic</entry>
-	      <entry>Reverse</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry><option>-fno-hi-version-check</option></entry>
-	      <entry>Don't complain about <literal>.hi</literal> file mismatches</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-dno-black-holing</option></entry>
-	      <entry>Turn off black holing (probably doesn't work)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fhistory-size</option></entry>
-	      <entry>Set simplification history size</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-funregisterised</option></entry>
-        <entry><link linkend="unreg">Unregisterised</link> compilation (use <option>-unreg</option> instead)</entry>
-	      <entry>static</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-ghci-history</option></entry>
-	      <entry>Do not use the load/store the GHCi command history from/to <literal>ghci_history</literal>.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	    <row>
-	      <entry><option>-fno-ghci-sandbox</option></entry>
-	      <entry>Turn off the GHCi sandbox. Means computations are run in the main thread, rather than a forked thread.</entry>
-	      <entry>dynamic</entry>
-	      <entry>-</entry>
-	    </row>
-	  </tbody>
-	</tgroup>
-      </informaltable>
-    </sect2>
-  </sect1>
+    <informaltable>
+      <tgroup cols="4" align="left" colsep="1" rowsep="1">
+        <thead>
+          <row>
+            <entry>Flag</entry>
+            <entry>Description</entry>
+            <entry>Static/Dynamic</entry>
+            <entry>Reverse</entry>
+          </row>
+        </thead>
+        <tbody>
+          <row>
+            <entry><option>-fno-hi-version-check</option></entry>
+            <entry>Don't complain about <literal>.hi</literal> file mismatches</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-dno-black-holing</option></entry>
+            <entry>Turn off black holing (probably doesn't work)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fhistory-size</option></entry>
+            <entry>Set simplification history size</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-funregisterised</option></entry>
+            <entry><link linkend="unreg">Unregisterised</link> compilation (use <option>-unreg</option> instead)</entry>
+            <entry>static</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fno-ghci-history</option></entry>
+            <entry>Do not use the load/store the GHCi command history from/to <literal>ghci_history</literal>.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+          <row>
+            <entry><option>-fno-ghci-sandbox</option></entry>
+            <entry>Turn off the GHCi sandbox. Means computations are run in the main thread, rather than a forked thread.</entry>
+            <entry>dynamic</entry>
+            <entry>-</entry>
+          </row>
+        </tbody>
+      </tgroup>
+    </informaltable>
+  </sect2>
+</sect1>
 
 
 <!--
diff -urd 7.4.2-original/ghci.xml original/ghci.xml
--- 7.4.2-original/ghci.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/ghci.xml	2012-09-05 02:10:15.000000000 +0900
@@ -1090,6 +1090,61 @@
     printf.
    </para>
     </sect2>
+   <sect2 id="ghci-interactive-print">
+     <title>Using a custom interactive printing function</title>
+     <para>[<emphasis role="bold">New in version 7.6.1</emphasis>]
+        By default, GHCi prints the result of expressions typed at the prompt
+        using the function <literal>System.IO.print</literal>. Its type
+        signature is <literal>Show a => a -> IO ()</literal>, and it works by
+        converting the value to <literal>String</literal> using
+        <literal>show</literal>.
+     </para>
+     <para>
+        This is not ideal in certain cases, like when the output is long, or
+        contains strings with non-ascii characters.
+     </para>
+     <para>
+       The <literal>-interactive-print</literal> flag allows to specify any
+       function of type <literal>C a => a -> IO ()</literal>, for some
+       constraint <literal>C</literal>, as the function for printing evaluated
+       expressions. The function can reside in any loaded module or any
+       registered package.
+     </para>
+     <para>
+       As an example, suppose we have following special printing module:
+       <programlisting>
+	 module SpecPrinter where
+	 import System.IO
+
+	 sprint a = putStrLn $ show a ++ "!"
+       </programlisting>
+       The <literal>sprint</literal> function adds an exclamation mark at the
+       end of any printed value. Running GHCi with the command:
+       <programlisting>
+	 ghci -interactive-print=SpecPrinter.sprinter SpecPrinter
+       </programlisting>
+       will start an interactive session where values with be printed using
+       <literal>sprint</literal>:
+       <programlisting>
+	 *SpecPrinter> [1,2,3]
+	 [1,2,3]!
+	 *SpecPrinter> 42
+	 42!
+       </programlisting>
+     </para>
+     <para>
+       A custom pretty printing function can be used, for example, to format
+       tree-like and nested structures in a more readable way.
+     </para>
+     <para>
+       The <literal>-interactive-print</literal> flag can also be used when
+       running GHC in <literal>-e mode</literal>:
+       <programlisting>
+	 % ghc -e "[1,2,3]" -interactive-print=SpecPrinter.sprint SpecPrinter
+	 [1,2,3]!
+       </programlisting>
+     </para>
+   </sect2>
   </sect1>
 
   <sect1 id="ghci-debugger">
@@ -2649,6 +2704,28 @@
 
       <varlistentry>
 	<term>
+          <literal>:seti</literal> <optional><replaceable>option</replaceable>...</optional>
+          <indexterm><primary><literal>:seti</literal></primary></indexterm>
+        </term>
+	<listitem>
+          <para>
+            Like <literal>:set</literal>, but options set with
+            <literal>:seti</literal> affect only expressions and
+            commands typed at the prompt, and not modules loaded with
+            <literal>:load</literal> (in contrast, options set with
+            <literal>:set</literal> apply everywhere).  See <xref
+            linkend="ghci-interactive-options" />.
+          </para>
+          <para>
+            Without any arguments, displays the current set of options
+            that are applied to expressions and commands typed at the
+            prompt.
+          </para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+	<term>
           <literal>:show bindings</literal>
           <indexterm><primary><literal>:show bindings</literal></primary></indexterm>
         </term>
@@ -2824,8 +2901,9 @@
   </sect1>
 
   <sect1 id="ghci-set">
-    <title>The <literal>:set</literal> command</title>
+    <title>The <literal>:set</literal> and <literal>:seti</literal> commands</title>
     <indexterm><primary><literal>:set</literal></primary></indexterm>
+    <indexterm><primary><literal>:seti</literal></primary></indexterm>
 
     <para>The <literal>:set</literal> command sets two types of
     options: GHCi options, which begin with
@@ -2945,7 +3023,71 @@
       not take effect until the next reload.</para>
       <indexterm><primary>static</primary><secondary>options</secondary></indexterm>
     </sect2>
+
+    <sect2 id="ghci-interactive-options">
+      <title>Setting options for interactive evaluation only</title>
+
+      <para>
+        GHCi actually maintains two sets of options: one set that
+        applies when loading modules, and another set that applies for
+        expressions and commands typed at the prompt.  The
+        <literal>:set</literal> command modifies both, but there is
+        also a <literal>:seti</literal> command (for "set
+        interactive") that affects only the second set.
+      </para>
+
+      <para>
+        The two sets of options can be inspected using the
+        <literal>:set</literal> and <literal>:seti</literal> commands
+        respectively, with no arguments.  For example, in a clean GHCi
+        session we might see something like this:
+      </para>
+
+<screen>
+Prelude> :seti
+base language is: Haskell2010
+with the following modifiers:
+  -XNoDatatypeContexts
+  -XNondecreasingIndentation
+  -XExtendedDefaultRules
+GHCi-specific dynamic flag settings:
+other dynamic, non-language, flag settings:
+  -fimplicit-import-qualified
+warning settings:
+</screen>
+
+      <para>
+        Note that the option <option>-XExtendedDefaultRules</option>
+        is on, because we apply special defaulting rules to
+        expressions typed at the prompt (see <xref
+        linkend="extended-default-rules" />).
+      </para>
+
+      <para>
+        It is often useful to change the language options for
+        expressions typed at the prompt only, without having that
+        option apply to loaded modules too.  A good example is
+<screen>
+:seti -XNoMonomorphismRestriction
+</screen>
+        It would be undesirable if
+        <option>-XNoMonomorphismRestriction</option> were to apply to
+        loaded modules too: that might cause a compilation error, but
+        more commonly it will cause extra recompilation, because GHC
+        will think that it needs to recompile the module because the
+        flags have changed.
+      </para>
+
+      <para>
+        It is therefore good practice if you are setting language
+        options in your <literal>.ghci</literal> file, to use
+        <literal>:seti</literal> rather than <literal>:set</literal>
+        unless you really do want them to apply to all modules you
+        load in GHCi.
+      </para>
+    </sect2>
   </sect1>
+
   <sect1 id="ghci-dot-files">
     <title>The <filename>.ghci</filename> file</title>
     <indexterm><primary><filename>.ghci</filename></primary><secondary>file</secondary>
@@ -2976,7 +3118,14 @@
 
     <para>The <filename>ghci.conf</filename> file is most useful for
     turning on favourite options (eg. <literal>:set +s</literal>), and
-    defining useful macros.  Placing a <filename>.ghci</filename> file
+    defining useful macros.  Note: when setting language options in
+    this file it is usually desirable to use <literal>:seti</literal>
+    rather than <literal>:set</literal> (see <xref
+    linkend="ghci-interactive-options" />).
+    </para>
+
+    <para>
+    Placing a <filename>.ghci</filename> file
     in a directory with a Haskell project is a useful way to set
     certain project-wide options so you don't have to type them
     every time you start GHCi: eg. if your project uses multi-parameter 
@@ -3011,6 +3160,10 @@
     wiki page: <ulink
       url="http://haskell.org/haskellwiki/GHC/GHCi">GHC/GHCi</ulink></para>
 
+	<para>Additionally, any files specified with
+    <literal>-ghci-script</literal> flags will be read after the
+    standard files, allowing the use of custom .ghci files.</para>
+
     <para>Two command-line options control whether the
     startup files files are read:</para>
 
@@ -3027,23 +3180,16 @@
       </varlistentry>
       <varlistentry>
 	<term>
-          <option>-read-dot-ghci</option>
-          <indexterm><primary><option>-read-dot-ghci</option></primary></indexterm>
-        </term>
+         <option>-ghci-script</option>
+         <indexterm><primary><option>-ghci-script</option></primary></indexterm>
+    </term>
 	<listitem>
-	  <para>Read <filename>./.ghci</filename> and the other
-          startup files (see above).  This is normally the
-	  default, but the <option>-read-dot-ghci</option> option may
-	  be used to override a previous
-	  <option>-ignore-dot-ghci</option> option.</para>
+	  <para>Read a specific file after the usual startup files.
+	  Maybe be specified repeatedly for multiple inputs.</para>
 	</listitem>
       </varlistentry>
     </variablelist>
 
-    <para>Additional <filename>.ghci</filename> files can be added
-    through the <option>-ghci-script</option> option. These are
-    loaded after the normal <filename>.ghci</filename> files.</para>
-
   </sect1>
 
   <sect1 id="ghci-obj">
diff -urd 7.4.2-original/glasgow_exts.xml original/glasgow_exts.xml
--- 7.4.2-original/glasgow_exts.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/glasgow_exts.xml	2012-09-05 02:10:15.000000000 +0900
@@ -71,17 +71,18 @@
 <para>GHC is built on a raft of primitive data types and operations;
 "primitive" in the sense that they cannot be defined in Haskell itself.
 While you really can use this stuff to write fast code,
-  we generally find it a lot less painful, and more satisfying in the
-  long run, to use higher-level language features and libraries.  With
-  any luck, the code you write will be optimised to the efficient
-  unboxed version in any case.  And if it isn't, we'd like to know
-  about it.</para>
+we generally find it a lot less painful, and more satisfying in the
+long run, to use higher-level language features and libraries.  With
+any luck, the code you write will be optimised to the efficient
+unboxed version in any case.  And if it isn't, we'd like to know
+about it.</para>
 
 <para>All these primitive data types and operations are exported by the
 library <literal>GHC.Prim</literal>, for which there is
 <ulink url="&libraryGhcPrimLocation;/GHC-Prim.html">detailed online documentation</ulink>.
 (This documentation is generated from the file <filename>compiler/prelude/primops.txt.pp</filename>.)
 </para>
+
 <para>
 If you want to mention any of the primitive data types or operations in your
 program, you must first import <literal>GHC.Prim</literal> to bring them
@@ -94,8 +95,7 @@
 we briefly summarise here. </para>
 
 <sect2 id="glasgow-unboxed">
-<title>Unboxed types
-</title>
+<title>Unboxed types</title>
 
 <para>
 <indexterm><primary>Unboxed types (Glasgow extension)</primary></indexterm>
@@ -202,8 +202,7 @@
 </sect2>
 
 <sect2 id="unboxed-tuples">
-<title>Unboxed Tuples
-</title>
+<title>Unboxed tuples</title>
 
 <para>
 Unboxed tuples aren't really exported by <literal>GHC.Exts</literal>;
@@ -238,46 +237,19 @@
 </para>
 
 <para>
-There are some pretty stringent restrictions on the use of unboxed tuples:
+There are some restrictions on the use of unboxed tuples:
 <itemizedlist>
-<listitem>
 
+<listitem>
 <para>
 Values of unboxed tuple types are subject to the same restrictions as
 other unboxed types; i.e. they may not be stored in polymorphic data
 structures or passed to polymorphic functions.
-
 </para>
 </listitem>
-<listitem>
-
-<para>
-No variable can have an unboxed tuple type, nor may a constructor or function
-argument have an unboxed tuple type.  The following are all illegal:
-<programlisting>
-  data Foo = Foo (# Int, Int #)
 
-  f :: (# Int, Int #) -&#62; (# Int, Int #)
-  f x = x
-
-  g :: (# Int, Int #) -&#62; Int
-  g (# a,b #) = a
-
-  h x = let y = (# x,x #) in ...
-</programlisting>
-</para>
-</listitem>
 <listitem>
 <para>
-Unboxed tuples may not be nested. So this is illegal:
-<programlisting>
-f :: (# Int, (# Int, Int #), Bool #)
-</programlisting>
-</para>
-</listitem>
-</itemizedlist>
-</para>
-<para>
 The typical use of unboxed tuples is simply to return multiple values,
 binding those multiple results with a <literal>case</literal> expression, thus:
 <programlisting>
@@ -299,6 +271,10 @@
 </programlisting>
 Indeed, the bindings can even be recursive.
 </para>
+</listitem>
+</itemizedlist>
+
+</para>
 
 </sect2>
 </sect1>
@@ -857,152 +833,248 @@
 </title>
 
 <para>
-The do-notation of Haskell 98 does not allow <emphasis>recursive bindings</emphasis>,
-that is, the variables bound in a do-expression are visible only in the textually following
-code block. Compare this to a let-expression, where bound variables are visible in the entire binding
-group. It turns out that several applications can benefit from recursive bindings in
-the do-notation.  The <option>-XDoRec</option> flag provides the necessary syntactic support.
+    The do-notation of Haskell 98 does not allow <emphasis>recursive bindings</emphasis>,
+    that is, the variables bound in a do-expression are visible only in the textually following
+    code block. Compare this to a let-expression, where bound variables are visible in the entire binding
+    group. 
+</para> 
+
+<para> 
+    It turns out that such recursive bindings do indeed make sense for a variety of monads, but
+    not all. In particular, recursion in this sense requires a fixed-point operator for the underlying
+    monad, captured by the <literal>mfix</literal> method of the <literal>MonadFix</literal> class, defined in <literal>Control.Monad.Fix</literal> as follows:
+<programlisting>
+class Monad m => MonadFix m where
+   mfix :: (a -> m a) -> m a
+</programlisting>
+    Haskell's
+    <literal>Maybe</literal>, <literal>[]</literal> (list), <literal>ST</literal> (both strict and lazy versions),
+    <literal>IO</literal>, and many other monads have <literal>MonadFix</literal> instances. On the negative
+    side, the continuation monad, with the signature <literal>(a -> r) -> r</literal>, does not.
 </para>
+
 <para>
-Here is a simple (albeit contrived) example:
+    For monads that do belong to the <literal>MonadFix</literal> class, GHC provides
+    an extended version of the do-notation that allows recursive bindings.
+    The <option>-XRecursiveDo</option> (language pragma: <literal>RecursiveDo</literal>)
+    provides the necessary syntactic support, introducing the keywords <literal>mdo</literal> and
+    <literal>rec</literal> for higher and lower levels of the notation respectively. Unlike
+    bindings in a <literal>do</literal> expression, those introduced by <literal>mdo</literal> and <literal>rec</literal>
+    are recursively defined, much like in an ordinary let-expression. Due to the new
+    keyword <literal>mdo</literal>, we also call this notation the <emphasis>mdo-notation</emphasis>.
+</para>
+
+<para>
+    Here is a simple (albeit contrived) example:
 <programlisting>
-{-# LANGUAGE DoRec #-}
+{-# LANGUAGE RecursiveDo #-}
+justOnes = mdo { xs &lt;- Just (1:xs)
+               ; return (map negate xs) }
+</programlisting>
+or equivalently
+<programlisting>
+{-# LANGUAGE RecursiveDo #-}
 justOnes = do { rec { xs &lt;- Just (1:xs) }
               ; return (map negate xs) }
 </programlisting>
 As you can guess <literal>justOnes</literal> will evaluate to <literal>Just [-1,-1,-1,...</literal>.
 </para>
-<para>
-The background and motivation for recursive do-notation is described in
-<ulink url="http://sites.google.com/site/leventerkok/">A recursive do for Haskell</ulink>,
-by Levent Erkok, John Launchbury,
-Haskell Workshop 2002, pages: 29-37. Pittsburgh, Pennsylvania.
-The theory behind monadic value recursion is explained further in Erkok's thesis
-<ulink url="http://sites.google.com/site/leventerkok/erkok-thesis.pdf">Value Recursion in Monadic Computations</ulink>.
-However, note that GHC uses a different syntax than the one described in these documents.
+
+<para> 
+   GHC's implementation the mdo-notation closely follows the original translation as described in the paper
+   <ulink url="https://sites.google.com/site/leventerkok/recdo.pdf">A recursive do for Haskell</ulink>, which
+   in turn is based on the work <ulink url="http://sites.google.com/site/leventerkok/erkok-thesis.pdf">Value Recursion
+   in Monadic Computations</ulink>. Furthermore, GHC extends the syntax described in the former paper
+   with a lower level syntax flagged by the <literal>rec</literal> keyword, as we describe next.
 </para>
 
 <sect3>
-<title>Details of recursive do-notation</title>
+<title>Recursive binding groups</title>
+
 <para>
-The recursive do-notation is enabled with the flag <option>-XDoRec</option> or, equivalently,
-the LANGUAGE pragma <option>DoRec</option>.  It introduces the single new keyword "<literal>rec</literal>",
-which wraps a mutually-recursive group of monadic statements,
-producing a single statement.
-</para>
-<para>Similar to a <literal>let</literal>
-statement, the variables bound in the <literal>rec</literal> are
-visible throughout the <literal>rec</literal> group, and below it.
-For example, compare
+    The flag <option>-XRecursiveDo</option> also introduces a new keyword <literal>rec</literal>, which wraps a
+    mutually-recursive group of monadic statements inside a <literal>do</literal> expression, producing a single statement.
+    Similar to a <literal>let</literal> statement inside a <literal>do</literal>, variables bound in
+    the <literal>rec</literal> are visible throughout the <literal>rec</literal> group, and below it.  For example, compare
 <programlisting>
-do { a &lt;- getChar              do { a &lt;- getChar
-   ; let { r1 = f a r2	           ; rec { r1 &lt;- f a r2
-         ; r2 = g r1 }	                 ; r2 &lt;- g r1 }
-   ; return (r1 ++ r2) }          ; return (r1 ++ r2) }
+    do { a &lt;- getChar            do { a &lt;- getChar
+       ; let { r1 = f a r2          ; rec { r1 &lt;- f a r2
+       ;     ; r2 = g r1 }          ;     ; r2 &lt;- g r1 }
+       ; return (r1 ++ r2) }        ; return (r1 ++ r2) }
 </programlisting>
-In both cases, <literal>r1</literal> and <literal>r2</literal> are
-available both throughout the <literal>let</literal> or <literal>rec</literal> block, and
-in the statements that follow it.  The difference is that <literal>let</literal> is non-monadic,
-while <literal>rec</literal> is monadic.  (In Haskell <literal>let</literal> is
-really <literal>letrec</literal>, of course.)
+    In both cases, <literal>r1</literal> and <literal>r2</literal> are available both throughout
+    the <literal>let</literal> or <literal>rec</literal> block, and in the statements that follow it.
+    The difference is that <literal>let</literal> is non-monadic, while <literal>rec</literal> is monadic.
+    (In Haskell <literal>let</literal> is really <literal>letrec</literal>, of course.)
 </para>
+
 <para>
-The static and dynamic semantics of <literal>rec</literal> can be described as follows:
-<itemizedlist>
-<listitem><para>
-First,
-similar to let-bindings, the <literal>rec</literal> is broken into
-minimal recursive groups, a process known as <emphasis>segmentation</emphasis>.
-For example:
-<programlisting>
-rec { a &lt;- getChar      ===>     a &lt;- getChar
-    ; b &lt;- f a c                 rec { b &lt;- f a c
-    ; c &lt;- f b a                     ; c &lt;- f b a }
-    ; putChar c }                putChar c
-</programlisting>
-The details of segmentation are described in Section 3.2 of
-<ulink url="http://sites.google.com/site/leventerkok/">A recursive do for Haskell</ulink>.
-Segmentation improves polymorphism, reduces the size of the recursive "knot", and, as the paper
-describes, also has a semantic effect (unless the monad satisfies the right-shrinking law).
-</para></listitem>
-<listitem><para>
-Then each resulting <literal>rec</literal> is desugared, using a call to <literal>Control.Monad.Fix.mfix</literal>.
-For example, the <literal>rec</literal> group in the preceding example is desugared like this:
+    The semantics of <literal>rec</literal> is fairly straightforward. Whenever GHC finds a <literal>rec</literal>
+    group, it will compute its set of bound variables, and will introduce an appropriate call
+    to the underlying monadic value-recursion operator <literal>mfix</literal>, belonging to the
+    <literal>MonadFix</literal> class. Here is an example:
 <programlisting>
 rec { b &lt;- f a c     ===>    (b,c) &lt;- mfix (\~(b,c) -> do { b &lt;- f a c
     ; c &lt;- f b a }                                        ; c &lt;- f b a
                                                           ; return (b,c) })
 </programlisting>
-In general, the statement <literal>rec <replaceable>ss</replaceable></literal>
-is desugared to the statement
+   As usual, the meta-variables <literal>b</literal>, <literal>c</literal> etc., can be arbitrary patterns.
+   In general, the statement <literal>rec <replaceable>ss</replaceable></literal> is desugared to the statement
 <programlisting>
 <replaceable>vs</replaceable> &lt;- mfix (\~<replaceable>vs</replaceable> -&gt; do { <replaceable>ss</replaceable>; return <replaceable>vs</replaceable> })
 </programlisting>
-where <replaceable>vs</replaceable> is a tuple of the variables bound by <replaceable>ss</replaceable>.
-</para><para>
-The original <literal>rec</literal> typechecks exactly
-when the above desugared version would do so.  For example, this means that
-the variables <replaceable>vs</replaceable> are all monomorphic in the statements
-following the <literal>rec</literal>, because they are bound by a lambda.
+  where <replaceable>vs</replaceable> is a tuple of the variables bound by <replaceable>ss</replaceable>.
 </para>
+
 <para>
-The <literal>mfix</literal> function is defined in the <literal>MonadFix</literal>
-class, in <literal>Control.Monad.Fix</literal>, thus:
-<programlisting>
-class Monad m => MonadFix m where
-   mfix :: (a -> m a) -> m a
-</programlisting>
-</para>
-</listitem>
-</itemizedlist>
+    Note in particular that the translation for a <literal>rec</literal> block only involves wrapping a call
+    to <literal>mfix</literal>: it performs no other analysis on the bindings. The latter is the task
+    for the <literal>mdo</literal> notation, which is described next.
 </para>
-<para>
-Here are some other important points in using the recursive-do notation:
-<itemizedlist>
-<listitem><para>
-It is enabled with the flag <literal>-XDoRec</literal>.
-</para></listitem>
+</sect3>
 
-<listitem><para>
-If recursive bindings are required for a monad,
-then that monad must be declared an instance of the <literal>MonadFix</literal> class.
-</para></listitem>
+<sect3>
+<title>The <literal>mdo</literal> notation</title>
 
-<listitem><para>
-The following instances of <literal>MonadFix</literal> are automatically provided: List, Maybe, IO.
-Furthermore, the Control.Monad.ST and Control.Monad.ST.Lazy modules provide the instances of the MonadFix class
-for Haskell's internal state monad (strict and lazy, respectively).
-</para></listitem>
+<para>
+    A <literal>rec</literal>-block tells the compiler where precisely the recursive knot should be tied. It turns out that
+    the placement of the recursive knots can be rather delicate: in particular, we would like the knots to be wrapped
+    around as minimal groups as possible. This process is known as <emphasis>segmentation</emphasis>, and is described
+    in detail in Secton 3.2 of <ulink url="https://sites.google.com/site/leventerkok/recdo.pdf">A recursive do for
+    Haskell</ulink>. Segmentation improves polymorphism and reduces the size of the recursive knot. Most importantly, it avoids
+    unnecessary interference caused by a fundamental issue with the so-called <emphasis>right-shrinking</emphasis>
+    axiom for monadic recursion. In brief, most monads of interest (IO, strict state, etc.) do <emphasis>not</emphasis>
+    have recursion operators that satisfy this axiom, and thus not performing segmentation can cause unnecessary
+    interference, changing the termination behavior of the resulting translation.
+    (Details can be found in Sections 3.1 and 7.2.2 of
+    <ulink url="http://sites.google.com/site/leventerkok/erkok-thesis.pdf">Value Recursion in Monadic Computations</ulink>.)
+</para>
 
-<listitem><para>
-Like <literal>let</literal> and <literal>where</literal> bindings,
-name shadowing is not allowed within a <literal>rec</literal>;
-that is, all the names bound in a single <literal>rec</literal> must
-be distinct (Section 3.3 of the paper).
-</para></listitem>
-<listitem><para>
-It supports rebindable syntax (see <xref linkend="rebindable-syntax"/>).
-</para></listitem>
+<para>
+    The <literal>mdo</literal> notation removes the burden of placing
+    explicit <literal>rec</literal> blocks in the code.  Unlike an
+    ordinary <literal>do</literal> expression, in which variables bound by
+    statements are only in scope for later statements, variables bound in
+    an <literal>mdo</literal> expression are in scope for all statements
+    of the expression.  The compiler then automatically identifies minimal
+    mutually recursively dependent segments of statements, treating them as
+    if the user had wrapped a <literal>rec</literal> qualifier around them.
+</para>
+
+<para>
+   The definition is syntactic:
+</para>
+<itemizedlist>
+   <listitem>
+       <para>
+         A generator <replaceable>g</replaceable>
+         <emphasis>depends</emphasis> on a textually following generator
+         <replaceable>g'</replaceable>, if
+       </para>
+       <itemizedlist>
+         <listitem>
+           <para>
+             <replaceable>g'</replaceable> defines a variable that
+             is used by <replaceable>g</replaceable>, or
+           </para>
+         </listitem>
+         <listitem>
+           <para>
+           <replaceable>g'</replaceable> textually appears between
+           <replaceable>g</replaceable> and
+           <replaceable>g''</replaceable>, where <replaceable>g</replaceable>
+           depends on <replaceable>g''</replaceable>.
+           </para>
+         </listitem>
+       </itemizedlist>
+   </listitem>
+   <listitem>
+       <para>
+         A <emphasis>segment</emphasis> of a given
+         <literal>mdo</literal>-expression is a minimal sequence of generators
+         such that no generator of the sequence depends on an outside
+         generator. As a special case, although it is not a generator,
+         the final expression in an <literal>mdo</literal>-expression is
+         considered to form a segment by itself.
+       </para>
+   </listitem>
 </itemizedlist>
+<para>
+   Segments in this sense are
+   related to <emphasis>strongly-connected components</emphasis> analysis,
+   with the exception that bindings in a segment cannot be reordered and
+   must be contiguous.
 </para>
-</sect3>
 
-<sect3 id="mdo-notation"> <title> Mdo-notation (deprecated) </title>
+<para>
+    Here is an example <literal>mdo</literal>-expression, and its translation to <literal>rec</literal> blocks:
+<programlisting>
+mdo { a &lt;- getChar      ===> do { a &lt;- getChar
+    ; b &lt;- f a c                ; rec { b &lt;- f a c
+    ; c &lt;- f b a                ;     ; c &lt;- f b a }
+    ; z &lt;- h a b                ; z &lt;- h a b
+    ; d &lt;- g d e                ; rec { d &lt;- g d e
+    ; e &lt;- g a z                ;     ; e &lt;- g a z }
+    ; putChar c }               ; putChar c }
+</programlisting>
+Note that a given <literal>mdo</literal> expression can cause the creation of multiple <literal>rec</literal> blocks.
+If there are no recursive dependencies, <literal>mdo</literal> will introduce no <literal>rec</literal> blocks. In this
+latter case an <literal>mdo</literal> expression is precisely the same as a <literal>do</literal> expression, as one
+would expect.
+</para>
 
-<para> GHC used to support the flag <option>-XRecursiveDo</option>,
-which enabled the keyword <literal>mdo</literal>, precisely as described in
-<ulink url="http://sites.google.com/site/leventerkok/">A recursive do for Haskell</ulink>,
-but this is now deprecated.  Instead of <literal>mdo { Q; e }</literal>, write
-<literal>do { rec Q; e }</literal>.
+<para>
+    In summary, given an <literal>mdo</literal> expression, GHC first performs segmentation, introducing
+    <literal>rec</literal> blocks to wrap over minimal recursive groups. Then, each resulting
+    <literal>rec</literal> is desugared, using a call to <literal>Control.Monad.Fix.mfix</literal> as described
+    in the previous section. The original <literal>mdo</literal>-expression typechecks exactly when the desugared
+    version would do so.
 </para>
+
 <para>
-Historical note: The old implementation of the mdo-notation (and most
-of the existing documents) used the name
-<literal>MonadRec</literal> for the class and the corresponding library.
-This name is not supported by GHC.
+Here are some other important points in using the recursive-do notation:
+
+<itemizedlist>
+    <listitem>
+        <para>
+            It is enabled with the flag <literal>-XRecursiveDo</literal>, or the <literal>LANGUAGE RecursiveDo</literal>
+            pragma. (The same flag enables both <literal>mdo</literal>-notation, and the use of <literal>rec</literal>
+            blocks inside <literal>do</literal> expressions.)
+        </para>
+    </listitem>
+    <listitem>
+        <para>
+            <literal>rec</literal> blocks can also be used inside <literal>mdo</literal>-expressions, which will be
+            treated as a single statement. However, it is good style to either use <literal>mdo</literal> or
+            <literal>rec</literal> blocks in a single expression.
+        </para>
+    </listitem>
+    <listitem>
+        <para>
+            If recursive bindings are required for a monad, then that monad must be declared an instance of
+            the <literal>MonadFix</literal> class.
+        </para>
+    </listitem>
+    <listitem>
+        <para>
+            The following instances of <literal>MonadFix</literal> are automatically provided: List, Maybe, IO.
+            Furthermore, the <literal>Control.Monad.ST</literal> and <literal>Control.Monad.ST.Lazy</literal>
+            modules provide the instances of the <literal>MonadFix</literal> class for Haskell's internal
+            state monad (strict and lazy, respectively).
+        </para>
+    </listitem>
+    <listitem>
+        <para>
+            Like <literal>let</literal> and <literal>where</literal> bindings, name shadowing is not allowed within
+            an <literal>mdo</literal>-expression or a <literal>rec</literal>-block; that is, all the names bound in
+            a single <literal>rec</literal> must be distinct. (GHC will complain if this is not the case.)
+        </para>
+    </listitem>
+</itemizedlist>
 </para>
 </sect3>
 
+
 </sect2>
 
 
@@ -1469,7 +1541,7 @@
 	      functions <literal>(>>=)</literal>,
 	      <literal>(>>)</literal>, and <literal>fail</literal>,
 	      are in scope (not the Prelude
-	      versions).  List comprehensions, mdo (<xref linkend="mdo-notation"/>), and parallel array
+	      versions).  List comprehensions, mdo (<xref linkend="recursive-do-notation"/>), and parallel array
 	      comprehensions, are unaffected.  </para></listitem>
 
 	      <listitem>
@@ -1573,6 +1645,48 @@
 
 </sect2>
 
+<sect2 id="lambda-case">
+<title>Lambda-case</title>
+<para>
+The <option>-XLambdaCase</option> flag enables expressions of the form
+<programlisting>
+  \case { p1 -> e1; ...; pN -> eN }
+</programlisting>
+which is equivalent to
+<programlisting>
+  \freshName -> case freshName of { p1 -> e1; ...; pN -> eN }
+</programlisting>
+Note that <literal>\case</literal> starts a layout, so you can write
+<programlisting>
+  \case
+    p1 -> e1
+    ...
+    pN -> eN
+</programlisting>
+</para>
+</sect2>
+
+<sect2 id="multi-way-if">
+<title>Multi-way if-expressions</title>
+<para>
+With <option>-XMultiWayIf</option> flag GHC accepts conditional expressions
+with multiple branches:
+<programlisting>
+  if | guard1 -> expr1
+     | ...
+     | guardN -> exprN
+</programlisting>
+which is roughly equivalent to
+<programlisting>
+  case () of
+    _ | guard1 -> expr1
+    ...
+    _ | guardN -> exprN
+</programlisting>
+except that multi-way if-expressions do not alter the layout.
+</para>
+</sect2>
+
 <sect2 id="disambiguate-fields">
 <title>Record field disambiguation</title>
 <para>
@@ -2025,16 +2139,6 @@
 
       <varlistentry>
 	<term>
-	  <literal>'<replaceable>varid</replaceable></literal>
-	</term>
-	<listitem><para>
-	Stolen by: <option>-XTemplateHaskell</option>and 
-                   <option>-XPolyKinds</option>
-	  </para></listitem>
-      </varlistentry>
-
-      <varlistentry>
-	<term>
 	  <literal>[:<replaceable>varid</replaceable>|</literal>
           <indexterm><primary>quasi-quotation</primary></indexterm>
 	</term>
@@ -2945,6 +3049,20 @@
 As before, only one selector function is generated here, that for <literal>tag</literal>.
 Nevertheless, you can still use all the field names in pattern matching and record construction.
 </para></listitem>
+
+<listitem><para>
+In a GADT-style data type declaration there is no obvious way to specify that a data constructor
+should be infix, which makes a difference if you derive <literal>Show</literal> for the type.
+(Data constructors declared infix are displayed infix by the derived <literal>show</literal>.)
+So GHC implements the following design: a data constructor declared in a GADT-style data type
+declaration is displayed infix by <literal>Show</literal> iff (a) it is an operator symbol,
+(b) it has two arguments, (c) it has a programmer-supplied fixity declaration.  For example
+<programlisting>
+   infix 6 (:--:) 
+   data T a where
+     (:--:) :: Int -> Bool -> T Int
+</programlisting>
+</para></listitem>
 </itemizedlist></para>
 </sect2>
 
@@ -3239,8 +3357,9 @@
 </listitem>
 
 <listitem><para> With <option>-XDeriveGeneric</option>, you can derive
-instances of  the class <literal>Generic</literal>, defined in
-<literal>GHC.Generics</literal>. You can use these to define generic functions,
+instances of the classes <literal>Generic</literal> and
+<literal>Generic1</literal>, defined in <literal>GHC.Generics</literal>.
+You can use these to define generic functions,
 as described in <xref linkend="generic-programming"/>.
 </para></listitem>
 
@@ -3958,46 +4077,37 @@
 and the <literal>a1 ... an</literal> are distinct type variables.
 GHC relaxes these rules in two ways.
 <itemizedlist>
-<listitem>
-<para>
-The <option>-XFlexibleInstances</option> flag allows the head of the instance
-declaration to mention arbitrary nested types.
-For example, this becomes a legal instance declaration
-<programlisting>
-  instance C (Maybe Int) where ...
-</programlisting>
-See also the <link linkend="instance-overlap">rules on overlap</link>.
-</para></listitem>
 <listitem><para>
 With the <option>-XTypeSynonymInstances</option> flag, instance heads may use type
 synonyms. As always, using a type synonym is just shorthand for
 writing the RHS of the type synonym definition.  For example:
-
-
 <programlisting>
-  type Point = (Int,Int)
-  instance C Point   where ...
-  instance C [Point] where ...
+  type Point a = (a,a)
+  instance C (Point a)   where ...
 </programlisting>
-
-
-is legal.  However, if you added
-
-
+is legal.  The instance declaration is equivalent to
 <programlisting>
-  instance C (Int,Int) where ...
+  instance C (a,a) where ...
 </programlisting>
-
-
-as well, then the compiler will complain about the overlapping
-(actually, identical) instance declarations.  As always, type synonyms
+As always, type synonyms
 must be fully applied.  You cannot, for example, write:
-
 <programlisting>
-  type P a = [[a]]
-  instance Monad P where ...
+  instance Monad Point where ...
 </programlisting>
+</para></listitem>
 
+<listitem>
+<para>
+The <option>-XFlexibleInstances</option> flag allows the head of the instance
+declaration to mention arbitrary nested types.
+For example, this becomes a legal instance declaration
+<programlisting>
+  instance C (Maybe Int) where ...
+</programlisting>
+See also the <link linkend="instance-overlap">rules on overlap</link>.
+</para>
+<para>
+The <option>-XFlexibleInstances</option> flag implies <option>-XTypeSynonymInstances</option>.
 </para></listitem>
 </itemizedlist>
 </para>
@@ -4348,7 +4458,40 @@
 </para>
 </sect3>
 
+<sect3 id="instance-sigs">
+<title>Type signatures in instance declarations</title>
+<para>In Haskell, you can't write a type signature in an instance declaration, but it
+is sometimes convenient to do so, and the language extension <option>-XInstanceSigs</option>
+allows you to do so.  For example:
+<programlisting>
+  data T a = MkT a a
+  instance Eq a => Eq (T a) where
+    (==) :: T a -> T a -> Bool   -- The signature
+    (==) (MkT x1 x2) (MkTy y1 y2) = x1==y1 &amp;&amp; x2==y2
+</programlisting>
+The type signature in the instance declaration must be precisely the same as
+the one in the class declaration, instantiated with the instance type.
+</para>
+<para>
+One stylistic reason for wanting to write a type signature is simple documentation.  Another
+is that you may want to bring scoped type variables into scope.  For example:
+<programlisting>
+class C a where
+  foo :: b -> a -> (a, [b])
 
+instance C a => C (T a) where
+  foo :: forall b. b -> T a -> (T a, [b])
+  foo x (T y) = (T y, xs)
+     where
+       xs :: [b]
+       xs = [x,x,x]
+</programlisting>
+Provided that you also specify <option>-XScopedTypeVariables</option> 
+(<xref linkend="scoped-type-variables"/>),
+the <literal>forall b</literal> scopes over the definition of <literal>foo</literal>,
+and in particular over the type signature for <literal>xs</literal>.
+</para>
+</sect3>
 
 </sect2>
 
@@ -5126,60 +5269,19 @@
 
 </sect1>
 
-<sect1 id="kind-polymorphism-and-promotion">
-<title>Kind polymorphism and promotion</title>
-
-<para>
-Standard Haskell has a rich type language. Types classify terms and serve to
-avoid many common programming mistakes. The kind language, however, is
-relatively simple, distinguishing only lifted types (kind <literal>*</literal>),
-type constructors (eg. kind <literal>* -> * -> *</literal>), and unlifted
-types (<xref linkend="glasgow-unboxed"/>). In particular when using advanced
-type system features, such as type families (<xref linkend="type-families"/>)
-or GADTs (<xref linkend="gadt"/>), this simple kind system is insufficient,
-and fails to prevent simple errors. Consider the example of type-level natural
-numbers, and length-indexed vectors:
-<programlisting>
-data Ze
-data Su n
-
-data Vec :: * -> * -> * where
-  Nil  :: Vec a Ze
-  Cons :: a -> Vec a n -> Vec a (Su n)
-</programlisting>
-The kind of <literal>Vec</literal> is <literal>* -> * -> *</literal>. This means
-that eg. <literal>Vec Int Char</literal> is a well-kinded type, even though this
-is not what we intend when defining length-indexed vectors.
-</para>
-
-<para>
-With the flags <option>-XPolyKinds</option> and <option>-XDataKinds</option>,
-users get access to a richer kind language.
-<option>-XPolyKinds</option> enables kind polymorphism, while
-<option>-XDataKinds</option> enables user defined kinds through datatype
-promotion. With <option>-XDataKinds</option>, the example above can then be
-rewritten to:
-<programlisting>
-data Nat = Ze | Su Nat
-
-data Vec :: * -> Nat -> * where
-  Nil  :: Vec a Ze
-  Cons :: a -> Vec a n -> Vec a (Su n)
-</programlisting>
-With the improved kind of <literal>Vec</literal>, things like
-<literal>Vec Int Char</literal> are now ill-kinded, and GHC will report an
-error.
-</para>
 
+<sect1 id="kind-polymorphism">
+<title>Kind polymorphism</title>
 <para>
-In this section we show a few examples of how to make use of the new kind
-system. This extension is described in more detail in the paper
+This section describes <emphasis>kind polymorphism</emphasis>, and extension
+enabled by <option>-XPolyKinds</option>.  
+It is described in more detail in the paper
 <ulink url="http://dreixel.net/research/pdf/ghp.pdf">Giving Haskell a
 Promotion</ulink>, which appeared at TLDI 2012.
 </para>
 
-<sect2 id="kind-polymorphism">
-<title>Kind polymorphism</title>
+<sect2> <title>Overview of kind polymorphism</title>
+
 <para>
 Currently there is a lot of code duplication in the way Typeable is implemented
 (<xref linkend="deriving-typeable"/>):
@@ -5212,34 +5314,148 @@
 <literal>Typeable</literal> class has kind
 <literal>forall k. k -> Constraint</literal>.
 </para>
+</sect2>
+
+<sect2> <title>Overview</title>
 
 <para>
-There are some restrictions in the current implementation:
+Generally speaking, with <option>-XPolyKinds</option>, GHC will infer a polymorphic
+kind for un-decorated whenever possible.  For example:
+<programlisting>
+data T m a = MkT (m a)
+-- GHC infers kind   T :: forall k. (k -> *) -> k -> *
+</programlisting>
+Just as in the world of terms, you can restrict polymorphism using a signature
+(<option>-XPolyKinds</option> implies <option>-XKindSignatures</option>):
+<programlisting>
+data T m (a :: *) = MkT (m a)
+-- GHC now infers kind   T :: (* -> *) -> * -> *
+</programlisting>
+There is no "forall" for kind variables.  Instead, you can simply mention a kind
+variable in a kind signature, thus:
+<programlisting>
+data T (m :: k -> *) a = MkT (m a)
+-- GHC now infers kind   T :: forall k. (k -> *) -> k -> *
+</programlisting>
+</para>
+</sect2>
+
+<sect2> <title>Polymorphic kind recursion and complete kind signatures</title>
+
+<para>
+Just as in type inference, kind inference for recursive types can only use <emphasis>monomorphic</emphasis> recursion.
+Consider this (contrived) example:
+<programlisting>
+data T m a = MkT (m a) (T Maybe (m a))
+-- GHC infers kind  T :: (* -> *) -> * -> *
+</programlisting>
+The recursive use of <literal>T</literal> forced the second argument to have kind <literal>*</literal>.
+However, just as in type inference, you can achieve polymorphic recursion by giving a 
+<emphasis>complete kind signature</emphasis> for <literal>T</literal>. The way to give
+a complete kind signature for a data type is to use a GADT-style declaration with an
+explicit kind signature thus:
+<programlisting>
+data T :: (k -> *) -> k -> * where
+  MkT :: m a -> T Maybe (m a) -> T m a
+</programlisting>
+The complete user-supplied kind signature specifies the polymorphic kind for <literal>T</literal>,
+and this signature is used for all the calls to <literal>T</literal> including the recursive ones.
+In particular, the recursive use of <literal>T</literal> is at kind <literal>*</literal>.
+</para>
+
+<para>
+What exactly is considered to be a "complete user-supplied kind signature" for a type constructor?
+These are the forms:
 <itemizedlist>
- <listitem><para>You cannot (yet) explicitly abstract over kinds, or mention
- kind variables. So the following are all rejected:
+<listitem><para>
+A GADT-style data type declaration, with an explicit "<literal>::</literal>" in the header.
+For example:
 <programlisting>
-data D1 (t :: k)
+data T1 :: (k -> *) -> k -> *       where ...   -- Yes  T1 :: forall k. (k->*) -> k -> *
+data T2 (a :: k -> *) :: k -> *     where ...   -- Yes  T2 :: forall k. (k->*) -> k -> *
+data T3 (a :: k -> *) (b :: k) :: * where ...   -- Yes  T3 :: forall k. (k->*) -> k -> *
+data T4 a (b :: k)             :: * where ...   -- YES  T4 :: forall k. * -> k -> *
 
-data D2 :: k -> *
+data T5 a b                         where ...   -- NO  kind is inferred
+data T4 (a :: k -> *) (b :: k)      where ...   -- NO  kind is inferred
+</programlisting>
+It makes no difference where you put the "<literal>::</literal>" but it must be there.
+You cannot give a complete kind signature using a Haskell-98-style data type declaration;
+you must use GADT syntax.
+</para></listitem>
 
-data D3 (k :: BOX)
-</programlisting></para>
- </listitem>
- <listitem><para>The return kind of a type family is always defaulted to
- <literal>*</literal>. So the following is rejected:
+<listitem><para>
+A type or data family declaration <emphasis>always</emphasis> have a 
+complete user-specified kind signature; no "<literal>::</literal>" is required:
 <programlisting>
-type family F a
-type instance F Int = Maybe
-</programlisting></para>
- </listitem>
+data family D1 a           	-- D1 :: * -> *
+data family D2 (a :: k)    	-- D2 :: forall k. k -> *
+data family D3 (a :: k) :: *    -- D3 :: forall k. k -> *
+type family S1 a :: k -> *      -- S1 :: forall k. * -> k -> *
+</programlisting>
+</para></listitem>
 </itemizedlist>
+In a complete user-specified kind signature, any un-decorated type variable to the
+left of the "<literal>::</literal>" is considered to have kind "<literal>*</literal>".
+If you want kind polymorphism, specify a kind variable.
 </para>
 
 </sect2>
+</sect1>
 
-<sect2 id="promotion">
+<sect1 id="promotion">
 <title>Datatype promotion</title>
+
+<para>
+This section describes <emphasis>data type promotion</emphasis>, an extension
+to the kind system that complements kind polymorphism.  It is enabled by <option>-XDataKinds</option>,
+and described in more detail in the paper
+<ulink url="http://dreixel.net/research/pdf/ghp.pdf">Giving Haskell a
+Promotion</ulink>, which appeared at TLDI 2012.
+</para>
+
+<sect2> <title>Motivation</title>
+
+<para>
+Standard Haskell has a rich type language. Types classify terms and serve to
+avoid many common programming mistakes. The kind language, however, is
+relatively simple, distinguishing only lifted types (kind <literal>*</literal>),
+type constructors (eg. kind <literal>* -> * -> *</literal>), and unlifted
+types (<xref linkend="glasgow-unboxed"/>). In particular when using advanced
+type system features, such as type families (<xref linkend="type-families"/>)
+or GADTs (<xref linkend="gadt"/>), this simple kind system is insufficient,
+and fails to prevent simple errors. Consider the example of type-level natural
+numbers, and length-indexed vectors:
+<programlisting>
+data Ze
+data Su n
+
+data Vec :: * -> * -> * where
+  Nil  :: Vec a Ze
+  Cons :: a -> Vec a n -> Vec a (Su n)
+</programlisting>
+The kind of <literal>Vec</literal> is <literal>* -> * -> *</literal>. This means
+that eg. <literal>Vec Int Char</literal> is a well-kinded type, even though this
+is not what we intend when defining length-indexed vectors.
+</para>
+
+<para>
+With <option>-XDataKinds</option>, the example above can then be
+rewritten to:
+<programlisting>
+data Nat = Ze | Su Nat
+
+data Vec :: * -> Nat -> * where
+  Nil  :: Vec a Ze
+  Cons :: a -> Vec a n -> Vec a (Su n)
+</programlisting>
+With the improved kind of <literal>Vec</literal>, things like
+<literal>Vec Int Char</literal> are now ill-kinded, and GHC will report an
+error.
+</para>
+</sect2>
+
+<sect2><title>Overview</title>
 <para>
 With <option>-XDataKinds</option>, GHC automatically promotes every suitable
 datatype to be a kind, and its (value) constructors to be type constructors.
@@ -5270,7 +5486,8 @@
 L :: k1 -> Sum k1 k2
 R :: k2 -> Sum k1 k2
 </programlisting>
-Note that <literal>List</literal>, for instance, does not get kind
+where <literal>BOX</literal> is the (unique) sort that classifies kinds.
+Note that <literal>List</literal>, for instance, does not get sort
 <literal>BOX -> BOX</literal>, because we do not further classify kinds; all
 kinds have sort <literal>BOX</literal>.
 </para>
@@ -5286,10 +5503,13 @@
  <listitem><para>We do not promote datatypes whose constructors are kind
  polymorphic, involve constraints, or use existential quantification.
  </para></listitem>
+ <listitem><para>We do not promote data family instances (<xref linkend="data-families"/>).
+ </para></listitem>
 </itemizedlist>
 </para>
+</sect2>
 
-<sect3 id="promotion-syntax">
+<sect2 id="promotion-syntax">
 <title>Distinguishing between types and constructors</title>
 <para>
 Since constructors and types share the same namespace, with promotion you can
@@ -5309,11 +5529,14 @@
 type T2 = 'P    -- promoted 2
 </programlisting>
 Note that promoted datatypes give rise to named kinds. Since these can never be
-ambiguous, we do not allow quotes in kind names.
+ambiguous, we do not allow quotes in kind names. 
 </para>
-</sect3>
+<para>Just as in the case of Template Haskell (<xref linkend="th-syntax"/>), there is
+no way to quote a data constructor or type constructor whose second character
+is a single quote.</para>
+</sect2>
 
-<sect3 id="promoted-lists-and-tuples">
+<sect2 id="promoted-lists-and-tuples">
 <title>Promoted lists and tuples types</title>
 <para>
 Haskell's list and tuple types are natively promoted to kinds, and enjoy the
@@ -5328,23 +5551,55 @@
 </programlisting>
 Note that this requires <option>-XTypeOperators</option>.
 </para>
-</sect3>
-
 </sect2>
 
-<sect2 id="kind-polymorphism-limitations">
-<title>Shortcomings of the current implementation</title>
+<sect2 id="promoted-literals">
+<title>Promoted Literals</title>
 <para>
-For the release on GHC 7.4 we focused on getting the new kind-polymorphic core
-to work with all existing programs (which do not make use of kind polymorphism).
-Many things already work properly with <option>-XPolyKinds</option>, but we
-expect that some things will not work. If you run into trouble, please
-<link linkend="bug-reporting">report a bug</link>!
+Numeric and string literals are prmoted to the type level, giving convenient
+access to a large number of predefined type-level constants.  Numeric literals
+are of kind <literal>Nat</literal>, while string literals are of kind
+<literal>Symbol</literal>.  These kinds are defined in the module
+<literal>GHC.TypeLits</literal>.
+</para>
+
+<para>
+Here is an exampe of using type-level numeric literals to provide a safe
+interface to a low-level function:
+<programlisting>
+import GHC.TypeLits
+import Data.Word
+import Foreign
+
+newtype ArrPtr (n :: Nat) a = ArrPtr (Ptr a)
+
+clearPage :: ArrPtr 4096 Word8 -> IO ()
+clearPage (ArrPtr p) = ...
+</programlisting>
+</para>
+
+<para>
+Here is an example of using type-level string literals to simulate
+simple record operations:
+<programlisting>
+data Label (l :: Symbol) = Get
+
+class Has a l b | a l -> b where
+  from :: a -> Label l -> b
+
+data Point = Point Int Int deriving Show
+
+instance Has Point "x" Int where from (Point x _) _ = x
+instance Has Point "y" Int where from (Point _ y) _ = y
+
+example = from (Point 1 2) (Get :: Label "x")
+</programlisting>
 </para>
 </sect2>
 
 </sect1>
 
+
   <sect1 id="equality-constraints">
     <title>Equality constraints</title>
     <para>
@@ -6786,6 +7041,94 @@
 </sect1>
 <!-- ==================== End of type system extensions =================  -->
 
+<sect1 id="defer-type-errors">
+<title>Deferring type errors to runtime</title>
+  <para>
+    While developing, sometimes it is desirable to allow compilation to succeed
+    even if there are type errors in the code. Consider the following case:
+<programlisting>
+module Main where
+
+a :: Int
+a = 'a'
+
+main = print "b"
+</programlisting>
+    Even though <literal>a</literal> is ill-typed, it is not used in the end, so if
+    all that we're interested in is <literal>main</literal> it can be useful to be
+    able to ignore the problems in <literal>a</literal>.
+  </para>
+  <para>
+    For more motivation and details please refer to the <ulink
+      url="http://hackage.haskell.org/trac/ghc/wiki/DeferErrorsToRuntime">HaskellWiki</ulink>
+    page or the <ulink
+      url="http://research.microsoft.com/en-us/um/people/simonpj/papers/ext-f/">original
+      paper</ulink>.
+  </para>
+
+<sect2><title>Enabling deferring of type errors</title>
+  <para>
+    The flag <literal>-fdefer-type-errors</literal> controls whether type
+    errors are deferred to runtime. Type errors will still be emitted as
+    warnings, but will not prevent compilation.
+  </para>
+  <para>
+    At runtime, whenever a term containing a type error would need to be
+    evaluated, the error is converted into a runtime exception.
+    Note that type errors are deferred as much as possible during runtime, but
+    invalid coercions are never performed, even when they would ultimately
+    result in a value of the correct type. For example, given the following
+    code:
+<programlisting>
+x :: Int
+x = 0
+
+y :: Char
+y = x
+
+z :: Int
+z = y
+</programlisting>
+    evaluating <literal>x</literal> will result in a runtime type error.
+  </para>
+</sect2>
+<sect2><title>Deferred type errors in GHCi</title>
+  <para>
+    The flag <literal>-fdefer-type-errors</literal> works in GHCi as well, with
+    one exception: for "naked" expressions typed at the prompt, type
+    errors don't get delayed, so for example:
+<programlisting>
+Prelude> fst (True, 1 == 'a')
+
+&lt;interactive&gt;:2:12:
+    No instance for (Num Char) arising from the literal `1'
+    Possible fix: add an instance declaration for (Num Char)
+    In the first argument of `(==)', namely `1'
+    In the expression: 1 == 'a'
+    In the first argument of `fst', namely `(True, 1 == 'a')'
+</programlisting>
+Otherwise, in the common case of a simple type error such as 
+typing <literal>reverse True</literal> at the prompt, you would get a warning and then
+an immediately-following type error when the expression is evaluated.
+  </para>
+  <para>
+    This exception doesn't apply to statements, as the following example demonstrates:
+<programlisting>
+Prelude> let x = (True, 1 == 'a')
+
+&lt;interactive&gt;:3:16: Warning:
+    No instance for (Num Char) arising from the literal `1'
+    Possible fix: add an instance declaration for (Num Char)
+    In the first argument of `(==)', namely `1'
+    In the expression: 1 == 'a'
+    In the expression: (True, 1 == 'a')
+Prelude> fst x
+True
+</programlisting>
+  </para>
+</sect2>
+</sect1>
+
 <!-- ====================== TEMPLATE HASKELL =======================  -->
 
 <sect1 id="template-haskell">
@@ -6824,7 +7167,7 @@
 Wiki page</ulink>.
 </para>
 
-    <sect2>
+    <sect2 id="th-syntax">
       <title>Syntax</title>
 
       <para> Template Haskell has the following new syntactic
@@ -6884,7 +7227,19 @@
 		  <itemizedlist>
 		    <listitem><para> <literal>'f</literal> has type <literal>Name</literal>, and names the function <literal>f</literal>.
 		  Similarly <literal>'C</literal> has type <literal>Name</literal> and names the data constructor <literal>C</literal>.
-		  In general <literal>'</literal><replaceable>thing</replaceable> interprets <replaceable>thing</replaceable> in an expression context.
+		  In general <literal>'</literal><replaceable>thing</replaceable> 
+                  interprets <replaceable>thing</replaceable> in an expression context.</para>
+                    <para>A name whose second character is a single
+                    quote (sadly) cannot be quoted in this way,
+                    because it will be parsed instead as a quoted
+                    character.  For example, if the function is called
+                    <literal>f'7</literal> (which is a legal Haskell
+                    identifier), an attempt to quote it as
+                    <literal>'f'7</literal> would be parsed as the
+                    character literal <literal>'f'</literal> followed
+                    by the numeric literal <literal>7</literal>. There
+                    is no current escape mechanism in this (unusual)
+                    situation.
 		     </para></listitem>
 		    <listitem><para> <literal>''T</literal> has type <literal>Name</literal>, and names the type constructor  <literal>T</literal>.
 		  That is, <literal>''</literal><replaceable>thing</replaceable> interprets <replaceable>thing</replaceable> in a type context.
@@ -9636,8 +9991,9 @@
 </para>
 
 <para>
-The <literal>Generic</literal> class mediates between user-defined datatypes
-and their internal representation as a sum-of-products:
+The <literal>Generic</literal> and <literal>Generic1</literal> classes mediate
+between user-defined datatypes and their internal representation as a
+sum-of-products:
 
 <programlisting>
 class Generic a where
@@ -9647,9 +10003,17 @@
   from  :: a -> (Rep a) x
   -- Convert from the representation to the datatype
   to    :: (Rep a) x -> a
+
+class Generic1 f where
+  type Rep1 f :: * -> *
+
+  from1  :: f a -> Rep1 f a
+  to1    :: Rep1 f a -> f a
 </programlisting>
 
-Instances of this class can be derived by GHC with the
+<literal>Generic1</literal> is used for functions that can only be defined over
+type containers, such as <literal>map</literal>.
+Instances of these classes can be derived by GHC with the
 <option>-XDeriveGeneric</option> (<xref linkend="deriving-typeable"/>), and are
 necessary to be able to define generic instances automatically.
 </para>
@@ -9664,7 +10028,7 @@
   type Rep (UserTree a) =
     M1 D D1UserTree (
           M1 C C1_0UserTree (
-                M1 S NoSelector (K1 P a)
+                M1 S NoSelector (K1 R a)
             :*: M1 S NoSelector (K1 R (UserTree a))
             :*: M1 S NoSelector (K1 R (UserTree a)))
       :+: M1 C C1_1UserTree U1)
@@ -9759,17 +10123,20 @@
 
 The default method for <literal>put</literal> is then used, corresponding to the
 generic implementation of serialization.
+
+For more examples of generic functions please refer to the
+<ulink url="http://hackage.haskell.org/package/generic-deriving">generic-deriving</ulink>
+package on Hackage.
 </para>
 </sect2>
 
-
 <sect2>
 <title>More information</title>
 
 <para>
-For more detail please refer to the
-<ulink url="http://www.haskell.org/haskellwiki/Generics">HaskellWiki page</ulink>
-or the original paper:
+For more details please refer to the
+<ulink url="http://www.haskell.org/haskellwiki/GHC.Generics">HaskellWiki
+page</ulink> or the original paper:
 </para>
 
 <itemizedlist>
@@ -9784,12 +10151,6 @@
 </listitem>
 </itemizedlist>
 
-<emphasis>Note</emphasis>: the current support for generic programming in GHC
-is preliminary. In particular, we only allow deriving instances for the
-<literal>Generic</literal> class. Support for deriving
-<literal>Generic1</literal> (and thus enabling generic functions of kind
-<literal>* -> *</literal> such as <literal>fmap</literal>) will come at a
-later stage.
 </sect2>
 
 </sect1>
diff -urd 7.4.2-original/intro.xml original/intro.xml
--- 7.4.2-original/intro.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/intro.xml	2012-09-05 02:10:15.000000000 +0900
@@ -278,8 +278,11 @@
 	<term>Stable snapshots</term>
 	<listitem>
 	  <para>
-      We may make snapshot releases of the current
-      stable branch <ulink url="http://www.haskell.org/ghc/dist/stable/dist/">available for download</ulink>, and the latest sources are available from <ulink url="http://hackage.haskell.org/trac/ghc/wiki/DarcsRepositories">the darcs repositories</ulink>.
+            We may make snapshot releases of the current stable branch <ulink
+            url="http://www.haskell.org/ghc/dist/stable/dist/">available for
+            download</ulink>, and the latest sources are available from <ulink
+            url="http://hackage.haskell.org/trac/ghc/wiki/Repositories">the git
+            repositories</ulink>.
 	  </para>
 
 	  <para>Stable snapshot releases are named
@@ -310,8 +313,11 @@
 	<term>Unstable snapshots</term>
 	<listitem>
 	  <para>
-      We may make snapshot releases of the
-      HEAD <ulink url="http://www.haskell.org/ghc/dist/current/dist/">available for download</ulink>, and the latest sources are available from <ulink url="http://hackage.haskell.org/trac/ghc/wiki/DarcsRepositories">the darcs repositories</ulink>.
+            We may make snapshot releases of the HEAD <ulink
+            url="http://www.haskell.org/ghc/dist/current/dist/">available for
+            download</ulink>, and the latest sources are available from <ulink
+            url="http://hackage.haskell.org/trac/ghc/wiki/Repositories">the git
+            repositories</ulink>.
 	  </para>
 
 	  <para>Unstable snapshot releases are named
@@ -346,10 +352,7 @@
   </sect1>
 
 
-&oldrelnotes1;
-&oldrelnotes2;
 &relnotes1;
-&relnotes2;
 
 </chapter>
 
diff -urd 7.4.2-original/packages.xml original/packages.xml
--- 7.4.2-original/packages.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/packages.xml	2012-09-05 02:10:15.000000000 +0900
@@ -408,35 +408,89 @@
       see GHC's package table by running GHC with the <option>-v</option>
       flag.</para>
 
-    <para>Package databases may overlap: for example, packages in the
-      user database will override (<emphasis>shadow</emphasis>) those
-      of the same name and version in the global database.</para>
+    <para>Package databases may overlap, and they are arranged in a stack
+      structure. Packages closer to the top of the stack will override
+      (<emphasis>shadow</emphasis>) those below them. By default, the stack
+      contains just the global and the user's package databases, in that
+      order.</para>
 
-    <para>You can control the loading of package databases using the following
-      GHC options:</para>
+    <para>You can control GHC's package database stack using the following
+      options:</para>
 
     <variablelist>
       <varlistentry>
         <term>
-          <option>-package-conf <replaceable>file</replaceable></option>
-          <indexterm><primary><option>-package-conf</option></primary></indexterm>
+          <option>-package-db <replaceable>file</replaceable></option>
+          <indexterm><primary><option>-package-db</option></primary></indexterm>
         </term>
         <listitem>
-          <para>Read in the package configuration file
-            <replaceable>file</replaceable> in addition to the system
-            default file and the user's local file.  Packages in additional
-            files read this way will override those in the global and user
-            databases.</para>
+          <para>Add the package database <replaceable>file</replaceable> on top
+              of the current stack. Packages in additional databases read this
+              way will override those in the initial stack and those in
+              previously specified databases.</para>
         </listitem>
       </varlistentry>
 
       <varlistentry>
-        <term><option>-no-user-package-conf</option>
-          <indexterm><primary><option>-no-user-package-conf</option></primary>
+        <term><option>-no-global-package-db</option>
+          <indexterm><primary><option>-no-global-package-db</option></primary>
           </indexterm>
         </term>
         <listitem>
-          <para>Prevent loading of the user's local package database.</para>
+          <para>Remove the global package database from the package database
+              stack.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-no-user-package-db</option>
+          <indexterm><primary><option>-no-user-package-db</option></primary>
+          </indexterm>
+        </term>
+        <listitem>
+          <para>Prevent loading of the user's local package database in the
+              initial stack.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-clear-package-db</option>
+          <indexterm><primary><option>-clear-package-db</option></primary>
+          </indexterm>
+        </term>
+        <listitem>
+            <para>Reset the current package database stack. This option removes
+                every previously specified package database (including those
+                read from the <literal>GHC_PACKAGE_PATH</literal> environment
+                variable) from the package database stack.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-global-package-db</option>
+          <indexterm><primary><option>-global-package-db</option></primary>
+          </indexterm>
+        </term>
+        <listitem>
+          <para>Add the global package database on top of the current stack.
+            This option can be used after
+            <literal>-no-global-package-db</literal> to specify the position in
+            the stack where the global package database should be
+            loaded.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-user-package-db</option>
+          <indexterm><primary><option>-user-package-db</option></primary>
+          </indexterm>
+        </term>
+        <listitem>
+          <para>Add the user's package database on top of the current stack.
+            This option can be used after
+            <literal>-no-user-package-db</literal> to specify the position in
+            the stack where the user's package database should be
+            loaded.</para>
         </listitem>
       </varlistentry>
     </variablelist>
@@ -456,11 +510,13 @@
         packages.</para>
 
       <para>If <literal>GHC_PACKAGE_PATH</literal> ends in a separator, then
-        the default user and system package databases are appended, in that
-        order. e.g. to augment the usual set of packages with a database of
-        your own, you could say (on Unix):
-<screen>
-$ export GHC_PACKAGE_PATH=$HOME/.my-ghc-packages.conf:</screen>
+        the default package database stack (i.e. the user and global
+        package databases, in that order) is appended. For example, to augment
+        the usual set of packages with a database of your own, you could say
+        (on Unix):
+
+        <screen> $ export GHC_PACKAGE_PATH=$HOME/.my-ghc-packages.conf:</screen>
+
         (use <literal>;</literal> instead of <literal>:</literal> on
         Windows).</para>
 
@@ -601,12 +657,12 @@
       <literal>ghc-pkg</literal> knows about can be modified using the
       <literal>GHC_PACKAGE_PATH</literal> environment variable (see <xref
         linkend="ghc-package-path" />, and using
-        <literal>--package-conf</literal> options on the
+        <literal>--package-db</literal> options on the
         <literal>ghc-pkg</literal> command line.</para>
 
     <para>When asked to modify a database, <literal>ghc-pkg</literal> modifies
       the global database by default.  Specifying <option>--user</option>
-      causes it to act on the user database, or <option>--package-conf</option>
+      causes it to act on the user database, or <option>--package-db</option>
       can be used to act on another database entirely.  When multiple of these
       options are given, the rightmost one is used as the database to act
       upon.</para>
@@ -614,7 +670,7 @@
    <para>Commands that query the package database (list, latest,
      describe, field, dot) operate on the list of databases specified by
      the flags <option>--user</option>, <option>--global</option>, and
-     <option>--package-conf</option>.  If none of these flags are
+     <option>--package-db</option>.  If none of these flags are
      given, the default is <option>--global</option>
      <option>--user</option>.</para>
 
@@ -888,8 +944,8 @@
           </indexterm>
         </term>
         <term>
-          <option>-package-conf</option> <replaceable>file</replaceable>
-          <indexterm><primary><option>-package-conf</option></primary>
+          <option>-package-db</option> <replaceable>file</replaceable>
+          <indexterm><primary><option>-package-db</option></primary>
           </indexterm>
         </term>
         <listitem>
@@ -898,7 +954,7 @@
             also be the database modified by a <literal>register</literal>,
             <literal>unregister</literal>, <literal>expose</literal> or
             <literal>hide</literal> command, unless it is overridden by a later
-            <option>--package-conf</option>, <option>--user</option> or
+            <option>--package-db</option>, <option>--user</option> or
             <option>--global</option> option.</para>
         </listitem>
       </varlistentry>
diff -urd 7.4.2-original/runghc.xml original/runghc.xml
--- 7.4.2-original/runghc.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/runghc.xml	2012-09-05 02:10:15.000000000 +0900
@@ -32,7 +32,7 @@
     with a dash then you need to prefix it with
     <literal>--ghc-arg=</literal> or runghc will think that it is the
     program to run, e.g.
-    <literal>runghc -package-conf --ghc-arg=foo.conf Main.hs</literal>.
+    <literal>runghc -package-db --ghc-arg=foo.conf Main.hs</literal>.
     </para>
 
   </sect1>
diff -urd 7.4.2-original/safe_haskell.xml original/safe_haskell.xml
--- 7.4.2-original/safe_haskell.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/safe_haskell.xml	2012-09-05 02:10:15.000000000 +0900
@@ -156,7 +156,7 @@
         <listitem>The design also relies on the Danger module not being able
           to access the <literal>UnsafeRIO</literal> constructor.
           Unfortunately Template Haskell can be used to subvert module
-          boundaries and so could be used gain access to this constructor.
+          boundaries and so could be used to gain access to this constructor.
         </listitem>
         <listitem>There is no way to place restrictions on the modules that
           the untrusted Danger module can import. This gives the author of
diff -urd 7.4.2-original/ug-book.xml original/ug-book.xml
--- 7.4.2-original/ug-book.xml	2012-08-15 19:53:57.000000000 +0900
+++ original/ug-book.xml	2012-09-07 21:57:20.000000000 +0900
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="iso-8859-1"?>
 <bookinfo>
-<title>The Glorious Glasgow Haskell Compilation System User's Guide, Version 7.4.2</title>
+<title>The Glorious Glasgow Haskell Compilation System User's Guide, Version 7.6.1</title>
 <author><othername>The GHC Team</othername></author>
 <address>
 <email>glasgow-haskell-&lcub;bugs,users&rcub;-request@haskell.org</email>
@@ -17,6 +17,7 @@
 &lang-features;
 &ffi-chap;
 &extending-ghc;
+&external-core;
 &wrong;
 &utils;
 &win32-dll;
diff -urd 7.4.2-original/ug-book.xml.in original/ug-book.xml.in
--- 7.4.2-original/ug-book.xml.in	2012-06-07 02:10:25.000000000 +0900
+++ original/ug-book.xml.in	2012-09-05 02:10:15.000000000 +0900
@@ -17,6 +17,7 @@
 &lang-features;
 &ffi-chap;
 &extending-ghc;
+&external-core;
 &wrong;
 &utils;
 &win32-dll;
diff -urd 7.4.2-original/ug-ent.xml original/ug-ent.xml
--- 7.4.2-original/ug-ent.xml	2012-08-15 19:53:57.000000000 +0900
+++ original/ug-ent.xml	2012-09-07 21:57:20.000000000 +0900
@@ -3,10 +3,7 @@
 <!ENTITY flags          SYSTEM "flags.xml">
 <!ENTITY license        SYSTEM "license.xml">
 <!ENTITY intro          SYSTEM "intro.xml" >
-<!ENTITY oldrelnotes1   SYSTEM "7.2.1-notes.xml" >
-<!ENTITY oldrelnotes2   SYSTEM "7.2.2-notes.xml" >
-<!ENTITY relnotes1      SYSTEM "7.4.1-notes.xml" >
-<!ENTITY relnotes2      SYSTEM "7.4.2-notes.xml" >
+<!ENTITY relnotes1      SYSTEM "7.6.1-notes.xml" >
 <!ENTITY using          SYSTEM "using.xml" >
 <!ENTITY code-gens      SYSTEM "codegens.xml" >
 <!ENTITY runtime        SYSTEM "runtime_control.xml" >
@@ -15,6 +12,7 @@
 <!ENTITY sooner         SYSTEM "sooner.xml" >
 <!ENTITY lang-features  SYSTEM "lang.xml" >
 <!ENTITY glasgowexts    SYSTEM "glasgow_exts.xml" >
+<!ENTITY external-core  SYSTEM "external_core.xml" >
 <!ENTITY packages       SYSTEM "packages.xml" >
 <!ENTITY parallel       SYSTEM "parallel.xml" >
 <!ENTITY safehaskell    SYSTEM "safe_haskell.xml" >
@@ -28,6 +26,7 @@
 <!ENTITY ffi-chap       SYSTEM "ffi-chap.xml">
 <!ENTITY shared_libs    SYSTEM "shared_libs.xml">
 <!ENTITY what_glasgow_exts_does SYSTEM "what_glasgow_exts_does.gen.xml">
-<!ENTITY libraryBaseLocation    "../libraries/base-4.5.1.0">
-<!ENTITY libraryCabalLocation   "../libraries/Cabal-1.14.0">
-<!ENTITY libraryGhcPrimLocation "../libraries/ghc-prim-0.2.0.0">
+<!ENTITY libraryBaseLocation    "../libraries/base-4.6.0.0">
+<!ENTITY libraryCabalLocation   "../libraries/Cabal-1.16.0">
+<!ENTITY libraryGhcPrimLocation "../libraries/ghc-prim-0.3.0.0">
+<!ENTITY arw "-&gt;">
diff -urd 7.4.2-original/ug-ent.xml.in original/ug-ent.xml.in
--- 7.4.2-original/ug-ent.xml.in	2012-06-07 02:10:25.000000000 +0900
+++ original/ug-ent.xml.in	2012-09-05 02:10:15.000000000 +0900
@@ -3,10 +3,7 @@
 <!ENTITY flags          SYSTEM "flags.xml">
 <!ENTITY license        SYSTEM "license.xml">
 <!ENTITY intro          SYSTEM "intro.xml" >
-<!ENTITY oldrelnotes1   SYSTEM "7.2.1-notes.xml" >
-<!ENTITY oldrelnotes2   SYSTEM "7.2.2-notes.xml" >
-<!ENTITY relnotes1      SYSTEM "7.4.1-notes.xml" >
-<!ENTITY relnotes2      SYSTEM "7.4.2-notes.xml" >
+<!ENTITY relnotes1      SYSTEM "7.6.1-notes.xml" >
 <!ENTITY using          SYSTEM "using.xml" >
 <!ENTITY code-gens      SYSTEM "codegens.xml" >
 <!ENTITY runtime        SYSTEM "runtime_control.xml" >
@@ -15,6 +12,7 @@
 <!ENTITY sooner         SYSTEM "sooner.xml" >
 <!ENTITY lang-features  SYSTEM "lang.xml" >
 <!ENTITY glasgowexts    SYSTEM "glasgow_exts.xml" >
+<!ENTITY external-core  SYSTEM "external_core.xml" >
 <!ENTITY packages       SYSTEM "packages.xml" >
 <!ENTITY parallel       SYSTEM "parallel.xml" >
 <!ENTITY safehaskell    SYSTEM "safe_haskell.xml" >
@@ -31,3 +29,4 @@
 <!ENTITY libraryBaseLocation    "../libraries/base-@LIBRARY_base_VERSION@">
 <!ENTITY libraryCabalLocation   "../libraries/Cabal-@LIBRARY_Cabal_VERSION@">
 <!ENTITY libraryGhcPrimLocation "../libraries/ghc-prim-@LIBRARY_ghc_prim_VERSION@">
+<!ENTITY arw "-&gt;">
diff -urd 7.4.2-original/using.xml original/using.xml
--- 7.4.2-original/using.xml	2012-06-07 02:10:25.000000000 +0900
+++ original/using.xml	2012-09-05 02:10:15.000000000 +0900
@@ -31,7 +31,8 @@
     <para>To compile the program, use GHC like this:</para>
 
 <screen>
-$ ghc hello.hs</screen>
+$ ghc hello.hs
+</screen>
 
      <para>(where <literal>$</literal> represents the prompt: don't
        type it).  GHC will compile the source
@@ -58,7 +59,8 @@
 
 <screen>
 $ ./hello
-Hello World!</screen>
+Hello World!
+</screen>
 
     <para>
       If your program contains multiple modules, then you only need to
@@ -118,7 +120,7 @@
       <para>Sometimes it is useful to make the connection between a
       source file and the command-line options it requires quite
       tight. For instance, if a Haskell source file deliberately
-	uses name shadowing, it should be compiled with  the
+        uses name shadowing, it should be compiled with  the
       <option>-fno-warn-name-shadowing</option> option.  Rather than maintaining
       the list of per-file options in a <filename>Makefile</filename>,
       it is possible to do this directly in the source file using the
@@ -179,29 +181,29 @@
 
     <variablelist>
       <varlistentry>
-	<term>Mode flags</term>
-	<listitem>
-	  <para>For example, <option>&ndash;&ndash;make</option> or <option>-E</option>.
-	    There may only be a single mode flag on the command line.  The
-	    available modes are listed in <xref linkend="modes"/>.</para>
-	</listitem>
+        <term>Mode flags</term>
+        <listitem>
+          <para>For example, <option>&ndash;&ndash;make</option> or <option>-E</option>.
+            There may only be a single mode flag on the command line.  The
+            available modes are listed in <xref linkend="modes"/>.</para>
+        </listitem>
       </varlistentry>
       <varlistentry>
-	<term>Dynamic Flags</term>
-	<listitem>
-	  <para>Most non-mode flags fall into this category.  A dynamic flag
-	    may be used on the command line, in a
-	    <literal>OPTIONS_GHC</literal> pragma in a source file, or set
-	    using <literal>:set</literal> in GHCi.</para>
-	</listitem>
+        <term>Dynamic Flags</term>
+        <listitem>
+          <para>Most non-mode flags fall into this category.  A dynamic flag
+            may be used on the command line, in a
+            <literal>OPTIONS_GHC</literal> pragma in a source file, or set
+            using <literal>:set</literal> in GHCi.</para>
+        </listitem>
       </varlistentry>
       <varlistentry>
-	<term>Static Flags</term>
-	<listitem>
-	  <para>A few flags are "static", which means they can only be used on
-	    the command-line, and remain in force over the entire GHC/GHCi
-	    run.</para>
-	</listitem>
+        <term>Static Flags</term>
+        <listitem>
+          <para>A few flags are "static", which means they can only be used on
+            the command-line, and remain in force over the entire GHC/GHCi
+            run.</para>
+        </listitem>
       </varlistentry>
     </variablelist>
 
@@ -227,75 +229,75 @@
     <variablelist>
 
       <varlistentry>
-	<term><filename>.hs</filename></term>
-	<listitem>
-	  <para>A Haskell module.</para>
-	</listitem>
+        <term><filename>.hs</filename></term>
+        <listitem>
+          <para>A Haskell module.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <filename>.lhs</filename>
           <indexterm><primary><literal>lhs</literal> suffix</primary></indexterm>
-	</term>
-	<listitem>
-	  <para>A &ldquo;literate Haskell&rdquo; module.</para>
-	</listitem>
+        </term>
+        <listitem>
+          <para>A &ldquo;literate Haskell&rdquo; module.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.hi</filename></term>
-	<listitem>
-	  <para>A Haskell interface file, probably
-	  compiler-generated.</para>
-	</listitem>
+        <term><filename>.hi</filename></term>
+        <listitem>
+          <para>A Haskell interface file, probably
+          compiler-generated.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.hc</filename></term>
-	<listitem>
-	  <para>Intermediate C file produced by the Haskell
-	  compiler.</para>
-	</listitem>
+        <term><filename>.hc</filename></term>
+        <listitem>
+          <para>Intermediate C file produced by the Haskell
+          compiler.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.c</filename></term>
-	<listitem>
-	  <para>A C&nbsp;file not produced by the Haskell
-	  compiler.</para>
-	</listitem>
+        <term><filename>.c</filename></term>
+        <listitem>
+          <para>A C&nbsp;file not produced by the Haskell
+          compiler.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.ll</filename></term>
-	<listitem>
-	  <para>An llvm-intermediate-language source file, usually
+        <term><filename>.ll</filename></term>
+        <listitem>
+          <para>An llvm-intermediate-language source file, usually
           produced by the compiler.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.bc</filename></term>
-	<listitem>
-	  <para>An llvm-intermediate-language bitcode file, usually
+        <term><filename>.bc</filename></term>
+        <listitem>
+          <para>An llvm-intermediate-language bitcode file, usually
           produced by the compiler.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.s</filename></term>
-	<listitem>
-	  <para>An assembly-language source file, usually produced by
+        <term><filename>.s</filename></term>
+        <listitem>
+          <para>An assembly-language source file, usually produced by
           the compiler.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><filename>.o</filename></term>
-	<listitem>
-	  <para>An object file, produced by an assembler.</para>
-	</listitem>
+        <term><filename>.o</filename></term>
+        <listitem>
+          <para>An object file, produced by an assembler.</para>
+        </listitem>
       </varlistentry>
     </variablelist>
 
@@ -324,164 +326,164 @@
 
     <variablelist>
       <varlistentry>
-	<term>
-	  <cmdsynopsis><command>ghc --interactive</command>
-	  </cmdsynopsis>
+        <term>
+          <cmdsynopsis><command>ghc --interactive</command>
+          </cmdsynopsis>
           <indexterm><primary>interactive mode</primary></indexterm>
           <indexterm><primary>ghci</primary></indexterm>
-	</term>
-	<listitem>
-	  <para>Interactive mode, which is also available as
-	  <command>ghci</command>.  Interactive mode is described in
-	  more detail in <xref linkend="ghci"/>.</para>
-	</listitem>
+        </term>
+        <listitem>
+          <para>Interactive mode, which is also available as
+          <command>ghci</command>.  Interactive mode is described in
+          more detail in <xref linkend="ghci"/>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-	  <cmdsynopsis><command>ghc &ndash;&ndash;make</command>
-	  </cmdsynopsis>
+        <term>
+          <cmdsynopsis><command>ghc &ndash;&ndash;make</command>
+          </cmdsynopsis>
           <indexterm><primary>make mode</primary></indexterm>
           <indexterm><primary><option>&ndash;&ndash;make</option></primary></indexterm>
-	</term>
-	<listitem>
-	  <para>In this mode, GHC will build a multi-module Haskell
-	  program automatically, figuring out dependencies for itself.
-	  If you have a straightforward Haskell program, this is
-	  likely to be much easier, and faster, than using
-	  <command>make</command>.  Make mode is described in <xref
-	  linkend="make-mode"/>.</para>
+        </term>
+        <listitem>
+          <para>In this mode, GHC will build a multi-module Haskell
+          program automatically, figuring out dependencies for itself.
+          If you have a straightforward Haskell program, this is
+          likely to be much easier, and faster, than using
+          <command>make</command>.  Make mode is described in <xref
+          linkend="make-mode"/>.</para>
 
           <para>
             This mode is the default if there are any Haskell
             source files mentioned on the command line, and in this case
             the <option>&ndash;&ndash;make</option> option can be omitted.
           </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-	  <cmdsynopsis><command>ghc -e</command>
-	     <arg choice='plain'><replaceable>expr</replaceable></arg>
+        <term>
+          <cmdsynopsis><command>ghc -e</command>
+             <arg choice='plain'><replaceable>expr</replaceable></arg>
           </cmdsynopsis>
           <indexterm><primary>eval mode</primary></indexterm>
-	</term>
-	<listitem>
-	  <para>Expression-evaluation mode.  This is very similar to
-	  interactive mode, except that there is a single expression
-	  to evaluate (<replaceable>expr</replaceable>) which is given
-	  on the command line.  See <xref linkend="eval-mode"/> for
-	  more details.</para>
-	</listitem>
+        </term>
+        <listitem>
+          <para>Expression-evaluation mode.  This is very similar to
+          interactive mode, except that there is a single expression
+          to evaluate (<replaceable>expr</replaceable>) which is given
+          on the command line.  See <xref linkend="eval-mode"/> for
+          more details.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
-	    <command>ghc -E</command>
-	    <command>ghc -c</command>
-	    <command>ghc -S</command>
-	    <command>ghc -c</command>
-	  </cmdsynopsis>
-	  <indexterm><primary><option>-E</option></primary></indexterm>
-	  <indexterm><primary><option>-C</option></primary></indexterm>
-	  <indexterm><primary><option>-S</option></primary></indexterm>
-	  <indexterm><primary><option>-c</option></primary></indexterm>
+            <command>ghc -E</command>
+            <command>ghc -c</command>
+            <command>ghc -S</command>
+            <command>ghc -c</command>
+          </cmdsynopsis>
+          <indexterm><primary><option>-E</option></primary></indexterm>
+          <indexterm><primary><option>-C</option></primary></indexterm>
+          <indexterm><primary><option>-S</option></primary></indexterm>
+          <indexterm><primary><option>-c</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>This is the traditional batch-compiler mode, in which
-	  GHC can compile source files one at a time, or link objects
-	  together into an executable.  This mode also applies if
-	  there is no other mode flag specified on the command line,
-	  in which case it means that the specified files should be
-	  compiled and then linked to form a program. See <xref
-	  linkend="options-order"/>.</para>
-	</listitem>
+        <listitem>
+          <para>This is the traditional batch-compiler mode, in which
+          GHC can compile source files one at a time, or link objects
+          together into an executable.  This mode also applies if
+          there is no other mode flag specified on the command line,
+          in which case it means that the specified files should be
+          compiled and then linked to form a program. See <xref
+          linkend="options-order"/>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc -M</command>
           </cmdsynopsis>
           <indexterm><primary>dependency-generation mode</primary></indexterm>
         </term>
-	<listitem>
-	  <para>Dependency-generation mode.  In this mode, GHC can be
-	  used to generate dependency information suitable for use in
-	  a <literal>Makefile</literal>.  See <xref
-	  linkend="makefile-dependencies"/>.</para>
-	</listitem>
+        <listitem>
+          <para>Dependency-generation mode.  In this mode, GHC can be
+          used to generate dependency information suitable for use in
+          a <literal>Makefile</literal>.  See <xref
+          linkend="makefile-dependencies"/>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc --mk-dll</command>
           </cmdsynopsis>
-	  <indexterm><primary>DLL-creation mode</primary></indexterm>
+          <indexterm><primary>DLL-creation mode</primary></indexterm>
         </term>
-	<listitem>
-	  <para>DLL-creation mode (Windows only).  See <xref
-	  linkend="win32-dlls-create"/>.</para>
-	</listitem>
+        <listitem>
+          <para>DLL-creation mode (Windows only).  See <xref
+          linkend="win32-dlls-create"/>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-	  <cmdsynopsis>
+        <term>
+          <cmdsynopsis>
           <command>ghc --help</command> <command>ghc -?</command>
-	    </cmdsynopsis>
+            </cmdsynopsis>
           <indexterm><primary><option>&ndash;&ndash;help</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Cause GHC to spew a long usage message to standard
+        <listitem>
+          <para>Cause GHC to spew a long usage message to standard
           output and then exit.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc --show-iface <replaceable>file</replaceable></command>
           </cmdsynopsis>
           <indexterm><primary><option>&ndash;&ndash;--show-iface</option></primary></indexterm>
         </term>
-	<listitem>
-	      <para>Read the interface in
-	      <replaceable>file</replaceable> and dump it as text to
-	      <literal>stdout</literal>. For example <literal>ghc --show-iface M.hi</literal>.</para>
-	</listitem>
+        <listitem>
+              <para>Read the interface in
+              <replaceable>file</replaceable> and dump it as text to
+              <literal>stdout</literal>. For example <literal>ghc --show-iface M.hi</literal>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc --supported-extensions</command>
             <command>ghc --supported-languages</command>
           </cmdsynopsis>
           <indexterm><primary><option>&ndash;&ndash;supported-extensions</option></primary><primary><option>&ndash;&ndash;supported-languages</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Print the supported language extensions.</para>
-	</listitem>
+        <listitem>
+          <para>Print the supported language extensions.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc --info</command>
           </cmdsynopsis>
           <indexterm><primary><option>&ndash;&ndash;info</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Print information about the compiler.</para>
-	</listitem>
+        <listitem>
+          <para>Print information about the compiler.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc --version</command>
             <command>ghc -V</command>
@@ -489,40 +491,40 @@
           <indexterm><primary><option>-V</option></primary></indexterm>
           <indexterm><primary><option>&ndash;&ndash;version</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Print a one-line string including GHC's version number.</para>
-	</listitem>
+        <listitem>
+          <para>Print a one-line string including GHC's version number.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <cmdsynopsis>
             <command>ghc --numeric-version</command>
           </cmdsynopsis>
           <indexterm><primary><option>&ndash;&ndash;numeric-version</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Print GHC's numeric version number only.</para>
-	</listitem>
+        <listitem>
+          <para>Print GHC's numeric version number only.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
-	  <cmdsynopsis>
+        <term>
+          <cmdsynopsis>
             <command>ghc --print-libdir</command>
           </cmdsynopsis>
           <indexterm><primary><option>&ndash;&ndash;print-libdir</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>Print the path to GHC's library directory.  This is
-	  the top of the directory tree containing GHC's libraries,
-	  interfaces, and include files (usually something like
-	  <literal>/usr/local/lib/ghc-5.04</literal> on Unix).  This
-	  is the value of
-	  <literal>$libdir</literal><indexterm><primary><literal>libdir</literal></primary></indexterm>
+        <listitem>
+          <para>Print the path to GHC's library directory.  This is
+          the top of the directory tree containing GHC's libraries,
+          interfaces, and include files (usually something like
+          <literal>/usr/local/lib/ghc-5.04</literal> on Unix).  This
+          is the value of
+          <literal>$libdir</literal><indexterm><primary><literal>libdir</literal></primary></indexterm>
       in the package configuration file
       (see <xref linkend="packages"/>).</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
     </variablelist>
@@ -565,23 +567,23 @@
       <literal>Makefile</literal>s are:</para>
 
       <itemizedlist>
-	<listitem>
-	  <para>GHC doesn't have to be restarted for each compilation,
-	  which means it can cache information between compilations.
-	  Compiling a multi-module program with <literal>ghc
-	  &ndash;&ndash;make</literal> can be up to twice as fast as
-	  running <literal>ghc</literal> individually on each source
-	  file.</para>
-	</listitem>
-	<listitem>
-	  <para>You don't have to write a <literal>Makefile</literal>.</para>
+        <listitem>
+          <para>GHC doesn't have to be restarted for each compilation,
+          which means it can cache information between compilations.
+          Compiling a multi-module program with <literal>ghc
+          &ndash;&ndash;make</literal> can be up to twice as fast as
+          running <literal>ghc</literal> individually on each source
+          file.</para>
+        </listitem>
+        <listitem>
+          <para>You don't have to write a <literal>Makefile</literal>.</para>
           <indexterm><primary><literal>Makefile</literal>s</primary><secondary>avoiding</secondary></indexterm>
-	</listitem>
-	<listitem>
-	  <para>GHC re-calculates the dependencies each time it is
-	  invoked, so the dependencies never get out of sync with the
-	  source.</para>
-	</listitem>
+        </listitem>
+        <listitem>
+          <para>GHC re-calculates the dependencies each time it is
+          invoked, so the dependencies never get out of sync with the
+          source.</para>
+        </listitem>
       </itemizedlist>
 
       <para>Any of the command-line options described in the rest of
@@ -656,65 +658,65 @@
       This table summarises:</para>
 
       <informaltable>
-	<tgroup cols="4">
-	  <colspec align="left"/>
-	  <colspec align="left"/>
-	  <colspec align="left"/>
-	  <colspec align="left"/>
+        <tgroup cols="4">
+          <colspec align="left"/>
+          <colspec align="left"/>
+          <colspec align="left"/>
+          <colspec align="left"/>
 
-	  <thead>
-	    <row>
-	      <entry>Phase of the compilation system</entry>
-	      <entry>Suffix saying &ldquo;start here&rdquo;</entry>
-	      <entry>Flag saying &ldquo;stop after&rdquo;</entry>
-	      <entry>(suffix of) output file</entry>
-	    </row>
-	  </thead>
-	  <tbody>
-	    <row>
-	      <entry>literate pre-processor</entry>
-	      <entry><literal>.lhs</literal></entry>
-	      <entry>-</entry>
-	      <entry><literal>.hs</literal></entry>
-	    </row>
+          <thead>
+            <row>
+              <entry>Phase of the compilation system</entry>
+              <entry>Suffix saying &ldquo;start here&rdquo;</entry>
+              <entry>Flag saying &ldquo;stop after&rdquo;</entry>
+              <entry>(suffix of) output file</entry>
+            </row>
+          </thead>
+          <tbody>
+            <row>
+              <entry>literate pre-processor</entry>
+              <entry><literal>.lhs</literal></entry>
+              <entry>-</entry>
+              <entry><literal>.hs</literal></entry>
+            </row>
 
-	    <row>
-	      <entry>C pre-processor (opt.) </entry>
-	      <entry><literal>.hs</literal> (with
-	      <option>-cpp</option>)</entry>
-	      <entry><option>-E</option></entry>
-	      <entry><literal>.hspp</literal></entry>
-	    </row>
+            <row>
+              <entry>C pre-processor (opt.) </entry>
+              <entry><literal>.hs</literal> (with
+              <option>-cpp</option>)</entry>
+              <entry><option>-E</option></entry>
+              <entry><literal>.hspp</literal></entry>
+            </row>
 
-	    <row>
-	      <entry>Haskell compiler</entry>
-	      <entry><literal>.hs</literal></entry>
-	      <entry><option>-C</option>, <option>-S</option></entry>
-	      <entry><literal>.hc</literal>, <literal>.s</literal></entry>
-	    </row>
+            <row>
+              <entry>Haskell compiler</entry>
+              <entry><literal>.hs</literal></entry>
+              <entry><option>-C</option>, <option>-S</option></entry>
+              <entry><literal>.hc</literal>, <literal>.s</literal></entry>
+            </row>
 
-	    <row>
-	      <entry>C compiler (opt.)</entry>
-	      <entry><literal>.hc</literal> or <literal>.c</literal></entry>
-	      <entry><option>-S</option></entry>
-	      <entry><literal>.s</literal></entry>
-	    </row>
+            <row>
+              <entry>C compiler (opt.)</entry>
+              <entry><literal>.hc</literal> or <literal>.c</literal></entry>
+              <entry><option>-S</option></entry>
+              <entry><literal>.s</literal></entry>
+            </row>
 
-	    <row>
-	      <entry>assembler</entry>
-	      <entry><literal>.s</literal></entry>
-	      <entry><option>-c</option></entry>
-	      <entry><literal>.o</literal></entry>
-	    </row>
+            <row>
+              <entry>assembler</entry>
+              <entry><literal>.s</literal></entry>
+              <entry><option>-c</option></entry>
+              <entry><literal>.o</literal></entry>
+            </row>
 
-	    <row>
-	      <entry>linker</entry>
-	      <entry><replaceable>other</replaceable></entry>
-	      <entry>-</entry>
-	      <entry><filename>a.out</filename></entry>
-	    </row>
-	  </tbody>
-	</tgroup>
+            <row>
+              <entry>linker</entry>
+              <entry><replaceable>other</replaceable></entry>
+              <entry>-</entry>
+              <entry><filename>a.out</filename></entry>
+            </row>
+          </tbody>
+        </tgroup>
       </informaltable>
 
       <indexterm><primary><option>-C</option></primary></indexterm>
@@ -725,7 +727,8 @@
       <para>Thus, a common invocation would be: </para>
 
 <screen>
-ghc -c Foo.hs</screen>
+ghc -c Foo.hs
+</screen>
 
       <para>to compile the Haskell source file
       <filename>Foo.hs</filename> to an object file
@@ -745,26 +748,26 @@
       of the compiler, dumping the result in a file.</para>
 
       <sect3 id="overriding-suffixes">
-	<title>Overriding the default behaviour for a file</title>
+        <title>Overriding the default behaviour for a file</title>
 
-	<para>As described above, the way in which a file is processed by GHC
-	  depends on its suffix.  This behaviour can be overridden using the
-	  <option>-x</option> option:</para>
+        <para>As described above, the way in which a file is processed by GHC
+          depends on its suffix.  This behaviour can be overridden using the
+          <option>-x</option> option:</para>
 
-	<variablelist>
-	  <varlistentry>
-	    <term><option>-x</option> <replaceable>suffix</replaceable>
-	    	      <indexterm><primary><option>-x</option></primary>
-	      </indexterm></term>
-	      <listitem>
-		<para>Causes all files following this option on the command
-		  line to be processed as if they had the suffix
-		  <replaceable>suffix</replaceable>.  For example, to compile a
-		  Haskell module in the file <literal>M.my-hs</literal>,
-		  use <literal>ghc -c -x hs M.my-hs</literal>.</para>
-	      </listitem>
-	  </varlistentry>
-	</variablelist>
+        <variablelist>
+          <varlistentry>
+            <term><option>-x</option> <replaceable>suffix</replaceable>
+                      <indexterm><primary><option>-x</option></primary>
+              </indexterm></term>
+              <listitem>
+                <para>Causes all files following this option on the command
+                  line to be processed as if they had the suffix
+                  <replaceable>suffix</replaceable>.  For example, to compile a
+                  Haskell module in the file <literal>M.my-hs</literal>,
+                  use <literal>ghc -c -x hs M.my-hs</literal>.</para>
+              </listitem>
+          </varlistentry>
+        </variablelist>
       </sect3>
 
     </sect2>
@@ -780,119 +783,125 @@
     and <option>--print-libdir</option> modes in <xref linkend="modes"/>.</para>
     <variablelist>
       <varlistentry>
-	<term>
+        <term>
           <option>-v</option>
           <indexterm><primary><option>-v</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>The <option>-v</option> option makes GHC
+        <listitem>
+          <para>The <option>-v</option> option makes GHC
           <emphasis>verbose</emphasis>: it reports its version number
           and shows (on stderr) exactly how it invokes each phase of
           the compilation system.  Moreover, it passes the
           <option>-v</option> flag to most phases; each reports its
           version number (and possibly some other information).</para>
 
-	  <para>Please, oh please, use the <option>-v</option> option
+          <para>Please, oh please, use the <option>-v</option> option
           when reporting bugs!  Knowing that you ran the right bits in
           the right order is always the first thing we want to
           verify.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <option>-v</option><replaceable>n</replaceable>
           <indexterm><primary><option>-v</option></primary></indexterm>
         </term>
-	<listitem>
-	  <para>To provide more control over the compiler's verbosity,
-	  the <option>-v</option> flag takes an optional numeric
-	  argument.  Specifying <option>-v</option> on its own is
-	  equivalent to <option>-v3</option>, and the other levels
-	  have the following meanings:</para>
+        <listitem>
+          <para>To provide more control over the compiler's verbosity,
+          the <option>-v</option> flag takes an optional numeric
+          argument.  Specifying <option>-v</option> on its own is
+          equivalent to <option>-v3</option>, and the other levels
+          have the following meanings:</para>
 
-	  <variablelist>
-	    <varlistentry>
-	      <term><option>-v0</option></term>
-	      <listitem>
-		<para>Disable all non-essential messages (this is the
-		default).</para>
-	      </listitem>
-	    </varlistentry>
+          <variablelist>
+            <varlistentry>
+              <term><option>-v0</option></term>
+              <listitem>
+                <para>Disable all non-essential messages (this is the
+                default).</para>
+              </listitem>
+            </varlistentry>
 
-	    <varlistentry>
-	      <term><option>-v1</option></term>
-	      <listitem>
-		<para>Minimal verbosity: print one line per
-		compilation (this is the default when
-		<option>&ndash;&ndash;make</option> or
-		<option>&ndash;&ndash;interactive</option> is on).</para>
-	      </listitem>
-	    </varlistentry>
+            <varlistentry>
+              <term><option>-v1</option></term>
+              <listitem>
+                <para>Minimal verbosity: print one line per
+                compilation (this is the default when
+                <option>&ndash;&ndash;make</option> or
+                <option>&ndash;&ndash;interactive</option> is on).</para>
+              </listitem>
+            </varlistentry>
 
-	    <varlistentry>
-	      <term><option>-v2</option></term>
-	      <listitem>
-		<para>Print the name of each compilation phase as it
-		is executed. (equivalent to
-		<option>-dshow-passes</option>).</para>
-	      </listitem>
-	    </varlistentry>
+            <varlistentry>
+              <term><option>-v2</option></term>
+              <listitem>
+                <para>Print the name of each compilation phase as it
+                is executed. (equivalent to
+                <option>-dshow-passes</option>).</para>
+              </listitem>
+            </varlistentry>
 
-	    <varlistentry>
-	      <term><option>-v3</option></term>
-	      <listitem>
-		<para>The same as <option>-v2</option>, except that in
+            <varlistentry>
+              <term><option>-v3</option></term>
+              <listitem>
+                <para>The same as <option>-v2</option>, except that in
                 addition the full command line (if appropriate) for
                 each compilation phase is also printed.</para>
-	      </listitem>
-	    </varlistentry>
+              </listitem>
+            </varlistentry>
 
-	    <varlistentry>
-	      <term><option>-v4</option></term>
-	      <listitem>
-		<para>The same as <option>-v3</option> except that the
-		intermediate program representation after each
-		compilation phase is also printed (excluding
-		preprocessed and C/assembly files).</para>
-	      </listitem>
-	    </varlistentry>
-	  </variablelist>
-	</listitem>
+            <varlistentry>
+              <term><option>-v4</option></term>
+              <listitem>
+                <para>The same as <option>-v3</option> except that the
+                intermediate program representation after each
+                compilation phase is also printed (excluding
+                preprocessed and C/assembly files).</para>
+              </listitem>
+            </varlistentry>
+          </variablelist>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-ferror-spans</option>
+        <term><option>-ferror-spans</option>
           <indexterm><primary><option>-ferror-spans</option></primary>
-	  </indexterm>
+          </indexterm>
         </term>
-	<listitem>
-	  <para>Causes GHC to emit the full source span of the
-	  syntactic entity relating to an error message.  Normally, GHC
-	  emits the source location of the start of the syntactic
-	  entity only.</para>
+        <listitem>
+          <para>Causes GHC to emit the full source span of the
+          syntactic entity relating to an error message.  Normally, GHC
+          emits the source location of the start of the syntactic
+          entity only.</para>
 
-	  <para>For example:</para>
+          <para>For example:</para>
 
-<screen>test.hs:3:6: parse error on input `where'</screen>
+<screen>
+test.hs:3:6: parse error on input `where'
+</screen>
 
-	  <para>becomes:</para>
+          <para>becomes:</para>
 
-<screen>test296.hs:3:6-10: parse error on input `where'</screen>
+<screen>
+test296.hs:3:6-10: parse error on input `where'
+</screen>
 
-	  <para>And multi-line spans are possible too:</para>
+          <para>And multi-line spans are possible too:</para>
 
-<screen>test.hs:(5,4)-(6,7):
+<screen>
+test.hs:(5,4)-(6,7):
     Conflicting definitions for `a'
     Bound at: test.hs:5:4
               test.hs:6:7
-    In the binding group for: a, b, a</screen>
+    In the binding group for: a, b, a
+</screen>
 
-	  <para>Note that line numbers start counting at one, but
-	  column numbers start at zero.  This choice was made to
-	  follow existing convention (i.e. this is how Emacs does
-	  it).</para>
-	</listitem>
+          <para>Note that line numbers start counting at one, but
+          column numbers start at zero.  This choice was made to
+          follow existing convention (i.e. this is how Emacs does
+          it).</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
@@ -945,7 +954,8 @@
     <option>-fwarn-missing-fields</option>,
     <option>-fwarn-missing-methods</option>,
     <option>-fwarn-lazy-unlifted-bindings</option>,
-    <option>-fwarn-wrong-do-bind</option>, and
+    <option>-fwarn-wrong-do-bind</option>,
+    <option>-fwarn-unsupported-calling-conventions</option>, and
     <option>-fwarn-dodgy-foreign-imports</option>.  The following
     flags are
     simple ways to select standard &ldquo;packages&rdquo; of warnings:
@@ -954,27 +964,27 @@
     <variablelist>
 
       <varlistentry>
-	<term><option>-W</option>:</term>
-	<listitem>
-	  <indexterm><primary>-W option</primary></indexterm>
-	  <para>Provides the standard warnings plus
-	  <option>-fwarn-incomplete-patterns</option>,
-	  <option>-fwarn-dodgy-exports</option>,
-	  <option>-fwarn-dodgy-imports</option>,
-	  <option>-fwarn-unused-matches</option>,
-	  <option>-fwarn-unused-imports</option>, and
-	  <option>-fwarn-unused-binds</option>.</para>
-	</listitem>
+        <term><option>-W</option>:</term>
+        <listitem>
+          <indexterm><primary>-W option</primary></indexterm>
+          <para>Provides the standard warnings plus
+          <option>-fwarn-incomplete-patterns</option>,
+          <option>-fwarn-dodgy-exports</option>,
+          <option>-fwarn-dodgy-imports</option>,
+          <option>-fwarn-unused-matches</option>,
+          <option>-fwarn-unused-imports</option>, and
+          <option>-fwarn-unused-binds</option>.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-Wall</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-Wall</option></primary></indexterm>
-	  <para>Turns on all warning options that indicate potentially
-	  suspicious code.  The warnings that are
-	  <emphasis>not</emphasis> enabled by <option>-Wall</option>
-	  are
+        <term><option>-Wall</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-Wall</option></primary></indexterm>
+          <para>Turns on all warning options that indicate potentially
+          suspicious code.  The warnings that are
+          <emphasis>not</emphasis> enabled by <option>-Wall</option>
+          are
             <option>-fwarn-tabs</option>,
             <option>-fwarn-incomplete-uni-patterns</option>,
             <option>-fwarn-incomplete-record-updates</option>,
@@ -987,31 +997,31 @@
       </varlistentry>
 
       <varlistentry>
-	<term><option>-w</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-w</option></primary></indexterm>
-	  <para>Turns off all warnings, including the standard ones and
+        <term><option>-w</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-w</option></primary></indexterm>
+          <para>Turns off all warnings, including the standard ones and
       those that <literal>-Wall</literal> doesn't enable.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-Werror</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-Werror</option></primary></indexterm>
-	  <para>Makes any warning into a fatal error. Useful so that you don't
-	    miss warnings when doing batch compilation. </para>
-	</listitem>
+        <term><option>-Werror</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-Werror</option></primary></indexterm>
+          <para>Makes any warning into a fatal error. Useful so that you don't
+            miss warnings when doing batch compilation. </para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-Wwarn</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-Wwarn</option></primary></indexterm>
-	  <para>Warnings are treated only as warnings, not as errors. This is
-	    the default, but can be useful to negate a
+        <term><option>-Wwarn</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-Wwarn</option></primary></indexterm>
+          <para>Warnings are treated only as warnings, not as errors. This is
+            the default, but can be useful to negate a
         <option>-Werror</option> flag.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
     </variablelist>
@@ -1023,65 +1033,108 @@
     <variablelist>
 
       <varlistentry>
-	<term><option>-fwarn-unrecognised-pragmas</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-unrecognised-pragmas</option></primary>
-	  </indexterm>
-	  <indexterm><primary>warnings</primary></indexterm>
-	  <indexterm><primary>pragmas</primary></indexterm>
-	  <para>Causes a warning to be emitted when a
-	  pragma that GHC doesn't recognise is used. As well as pragmas
+        <term><option>-fdefer-type-errors</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fdefer-type-errors</option></primary>
+          </indexterm>
+          <indexterm><primary>warnings</primary></indexterm>
+            <para>Defer as many type errors as possible until runtime.  
+            At compile time you get a warning (instead of an error).  At 
+            runtime, if you use a value that depends on a type error, you 
+            get a runtime error; but you can run any type-correct parts of your code 
+            just fine.  See <xref linkend="defer-type-errors"/></para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-fhelpful-errors</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fhelpful-errors</option></primary>
+          </indexterm>
+          <indexterm><primary>warnings</primary></indexterm>
+            <para>When a name or package is not found in scope, make
+            suggestions for the name or package you might have meant instead.</para>
+          <para>This option is on by default.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-fwarn-unrecognised-pragmas</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-unrecognised-pragmas</option></primary>
+          </indexterm>
+          <indexterm><primary>warnings</primary></indexterm>
+          <indexterm><primary>pragmas</primary></indexterm>
+          <para>Causes a warning to be emitted when a
+          pragma that GHC doesn't recognise is used. As well as pragmas
       that GHC itself uses, GHC also recognises pragmas known to be used
       by other tools, e.g. <literal>OPTIONS_HUGS</literal> and
       <literal>DERIVE</literal>.</para>
 
-	  <para>This option is on by default.</para>
-	</listitem>
+          <para>This option is on by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-warnings-deprecations</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-warnings-deprecations</option></primary>
-	  </indexterm>
-	  <indexterm><primary>warnings</primary></indexterm>
-	  <indexterm><primary>deprecations</primary></indexterm>
-	  <para>Causes a warning to be emitted when a
-	  module, function or type with a WARNING or DEPRECATED pragma
+        <term><option>-fwarn-warnings-deprecations</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-warnings-deprecations</option></primary>
+          </indexterm>
+          <indexterm><primary>warnings</primary></indexterm>
+          <indexterm><primary>deprecations</primary></indexterm>
+          <para>Causes a warning to be emitted when a
+          module, function or type with a WARNING or DEPRECATED pragma
       is used. See <xref linkend="warning-deprecated-pragma"/> for more
       details on the pragmas.</para>
 
-	  <para>This option is on by default.</para>
-	</listitem>
+          <para>This option is on by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-deprecated-flags</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-deprecated-flags</option></primary>
-	  </indexterm>
-	  <indexterm><primary>deprecated-flags</primary></indexterm>
-	  <para>Causes a warning to be emitted when a deprecated
-	  commandline flag is used.</para>
+        <term><option>-fwarn-deprecated-flags</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-deprecated-flags</option></primary>
+          </indexterm>
+          <indexterm><primary>deprecated-flags</primary></indexterm>
+          <para>Causes a warning to be emitted when a deprecated
+          commandline flag is used.</para>
 
-	  <para>This option is on by default.</para>
-	</listitem>
+          <para>This option is on by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-dodgy-foreign-imports</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-dodgy-foreign-imports</option></primary>
-	  </indexterm>
-	  <para>Causes a warning to be emitted for foreign imports of
-	  the following form:</para>
+        <term><option>-fwarn-unsupported-calling-conventions</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-unsupported-calling-conventions</option></primary>
+          </indexterm>
+          <para>Causes a warning to be emitted for foreign declarations
+          that use unsupported calling conventions. In particular,
+          if the <literal>stdcall</literal> calling convention is used
+          on an architecture other than i386 then it will be treated
+          as <literal>ccall</literal>.</para>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
+        <term><option>-fwarn-dodgy-foreign-imports</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-dodgy-foreign-imports</option></primary>
+          </indexterm>
+          <para>Causes a warning to be emitted for foreign imports of
+          the following form:</para>
+
 <programlisting>
 foreign import "f" f :: FunPtr t
 </programlisting>
+
           <para>on the grounds that it probably should be</para>
+
 <programlisting>
 foreign import "&amp;f" f :: FunPtr t
 </programlisting>
+
           <para>The first form declares that `f` is a (pure) C
           function that takes no arguments and returns a pointer to a
           C function with type `t`, whereas the second form declares
@@ -1089,83 +1142,83 @@
           declaration is usually a mistake, and one that is hard to
           debug because it results in a crash, hence this
           warning.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-dodgy-exports</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-dodgy-exports</option></primary>
-	  </indexterm>
-	  <para>Causes a warning to be emitted when a datatype
+        <term><option>-fwarn-dodgy-exports</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-dodgy-exports</option></primary>
+          </indexterm>
+          <para>Causes a warning to be emitted when a datatype
       <literal>T</literal> is exported
       with all constructors, i.e. <literal>T(..)</literal>, but is it
       just a type synonym.</para>
-	  <para>Also causes a warning to be emitted when a module is
+          <para>Also causes a warning to be emitted when a module is
       re-exported, but that module exports nothing.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-dodgy-imports</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-dodgy-imports</option></primary>
-	  </indexterm>
-	  <para>Causes a warning to be emitted when a datatype
+        <term><option>-fwarn-dodgy-imports</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-dodgy-imports</option></primary>
+          </indexterm>
+          <para>Causes a warning to be emitted when a datatype
       <literal>T</literal> is imported
       with all constructors, i.e. <literal>T(..)</literal>, but has been
       exported abstractly, i.e. <literal>T</literal>.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-lazy-unlifted-bindings</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-lazy-unlifted-bindings</option></primary>
-	  </indexterm>
-	  <para>Causes a warning to be emitted when an unlifted type
+        <term><option>-fwarn-lazy-unlifted-bindings</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-lazy-unlifted-bindings</option></primary>
+          </indexterm>
+          <para>Causes a warning to be emitted when an unlifted type
       is bound in a way that looks lazy, e.g.
       <literal>where (I# x) = ...</literal>. Use
       <literal>where !(I# x) = ...</literal> instead. This will be an
       error, rather than a warning, in GHC 7.2.
       </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-duplicate-exports</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-duplicate-exports</option></primary></indexterm>
-	  <indexterm><primary>duplicate exports, warning</primary></indexterm>
-	  <indexterm><primary>export lists, duplicates</primary></indexterm>
+        <term><option>-fwarn-duplicate-exports</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-duplicate-exports</option></primary></indexterm>
+          <indexterm><primary>duplicate exports, warning</primary></indexterm>
+          <indexterm><primary>export lists, duplicates</primary></indexterm>
 
-	  <para>Have the compiler warn about duplicate entries in
+          <para>Have the compiler warn about duplicate entries in
           export lists. This is useful information if you maintain
           large export lists, and want to avoid the continued export
           of a definition after you've deleted (one) mention of it in
           the export list.</para>
 
-	  <para>This option is on by default.</para>
-	</listitem>
+          <para>This option is on by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-hi-shadowing</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-hi-shadowing</option></primary></indexterm>
-	  <indexterm><primary>shadowing</primary>
-	    <secondary>interface files</secondary></indexterm>
+        <term><option>-fwarn-hi-shadowing</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-hi-shadowing</option></primary></indexterm>
+          <indexterm><primary>shadowing</primary>
+            <secondary>interface files</secondary></indexterm>
 
-	  <para>Causes the compiler to emit a warning when a module or
-	  interface file in the current directory is shadowing one
-	  with the same module name in a library or other
-	  directory.</para>
-	</listitem>
+          <para>Causes the compiler to emit a warning when a module or
+          interface file in the current directory is shadowing one
+          with the same module name in a library or other
+          directory.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
         <term><option>-fwarn-identities</option>:</term>
-	<listitem>
+        <listitem>
           <indexterm><primary><option>-fwarn-identities</option></primary></indexterm>
           <para>Causes the compiler to emit a warning when a Prelude numeric
             conversion converts a type T to the same type T; such calls
@@ -1175,7 +1228,7 @@
             <literal>fromIntegral</literal>,
             and <literal>realToFrac</literal>.
           </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
@@ -1204,27 +1257,29 @@
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-incomplete-patterns</option>,
+        <term><option>-fwarn-incomplete-patterns</option>,
               <option>-fwarn-incomplete-uni-patterns</option>:
         </term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-incomplete-patterns</option></primary></indexterm>
-	  <indexterm><primary><option>-fwarn-incomplete-uni-patterns</option></primary></indexterm>
-	  <indexterm><primary>incomplete patterns, warning</primary></indexterm>
-	  <indexterm><primary>patterns, incomplete</primary></indexterm>
+        <listitem>
+          <indexterm><primary><option>-fwarn-incomplete-patterns</option></primary></indexterm>
+          <indexterm><primary><option>-fwarn-incomplete-uni-patterns</option></primary></indexterm>
+          <indexterm><primary>incomplete patterns, warning</primary></indexterm>
+          <indexterm><primary>patterns, incomplete</primary></indexterm>
 
           <para>The option <option>-fwarn-incomplete-patterns</option> warns
             about places where
-	    a pattern-match might fail at runtime.
+            a pattern-match might fail at runtime.
           The function
           <function>g</function> below will fail when applied to
           non-empty lists, so the compiler will emit a warning about
           this when <option>-fwarn-incomplete-patterns</option> is
           enabled.
+
 <programlisting>
 g [] = 2
 </programlisting>
-	  This option isn't enabled by default because it can be
+
+          This option isn't enabled by default because it can be
           a bit noisy, and it doesn't always indicate a bug in the
           program.  However, it's generally considered good practice
           to cover all the cases in your functions, and it is switched
@@ -1233,23 +1288,25 @@
           <para>The flag <option>-fwarn-incomplete-uni-patterns</option> is
           similar, except that it
           applies only to lambda-expressions and pattern bindings, constructs
-	  that only allow a single pattern:
+          that only allow a single pattern:
+
 <programlisting>
 h = \[] -> 2
 Just k = f y
 </programlisting>
+
           </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-incomplete-record-updates</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-incomplete-record-updates</option></primary></indexterm>
-	  <indexterm><primary>incomplete record updates, warning</primary></indexterm>
-	  <indexterm><primary>record updates, incomplete</primary></indexterm>
+        <term><option>-fwarn-incomplete-record-updates</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-incomplete-record-updates</option></primary></indexterm>
+          <indexterm><primary>incomplete record updates, warning</primary></indexterm>
+          <indexterm><primary>record updates, incomplete</primary></indexterm>
 
-	  <para>The function
+          <para>The function
           <function>f</function> below will fail when applied to
           <literal>Bar</literal>, so the compiler will emit a warning about
           this when <option>-fwarn-incomplete-record-updates</option> is
@@ -1263,43 +1320,44 @@
 f foo = foo { x = 6 }
 </programlisting>
 
-	  <para>This option isn't enabled by default because it can be
+          <para>This option isn't enabled by default because it can be
           very noisy, and it often doesn't indicate a bug in the
           program.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <option>-fwarn-missing-fields</option>:
-	  <indexterm><primary><option>-fwarn-missing-fields</option></primary></indexterm>
-	  <indexterm><primary>missing fields, warning</primary></indexterm>
-	  <indexterm><primary>fields, missing</primary></indexterm>
+          <indexterm><primary><option>-fwarn-missing-fields</option></primary></indexterm>
+          <indexterm><primary>missing fields, warning</primary></indexterm>
+          <indexterm><primary>fields, missing</primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
 
-	  <para>This option is on by default, and warns you whenever
+          <para>This option is on by default, and warns you whenever
           the construction of a labelled field constructor isn't
           complete, missing initializers for one or more fields. While
           not an error (the missing fields are initialised with
           bottoms), it is often an indication of a programmer error.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <option>-fwarn-missing-import-lists</option>:
-	  <indexterm><primary><option>-fwarn-import-lists</option></primary></indexterm>
-	  <indexterm><primary>missing import lists, warning</primary></indexterm>
-	  <indexterm><primary>import lists, missing</primary></indexterm>
+          <indexterm><primary><option>-fwarn-import-lists</option></primary></indexterm>
+          <indexterm><primary>missing import lists, warning</primary></indexterm>
+          <indexterm><primary>import lists, missing</primary></indexterm>
         </term>
-	<listitem>
+        <listitem>
 
-	  <para>This flag warns if you use an unqualified
+          <para>This flag warns if you use an unqualified
             <literal>import</literal> declaration
-	    that does not explicitly list the entities brought into scope. For
-	    example
+            that does not explicitly list the entities brought into scope. For
+            example
       </para>
+
 <programlisting>
 module M where
   import X( f )
@@ -1307,79 +1365,80 @@
   import qualified Z
   p x = f x x
 </programlisting>
+
         <para>
           The <option>-fwarn-import-lists</option> flag will warn about the import
-	  of <literal>Y</literal> but not <literal>X</literal>
-	  If module <literal>Y</literal> is later changed to export (say) <literal>f</literal>,
+          of <literal>Y</literal> but not <literal>X</literal>
+          If module <literal>Y</literal> is later changed to export (say) <literal>f</literal>,
           then the reference to <literal>f</literal> in <literal>M</literal> will become
-	  ambiguous.  No warning is produced for the import of <literal>Z</literal>
-	  because extending <literal>Z</literal>'s exports would be unlikely to produce
-	  ambiguity in <literal>M</literal>.
+          ambiguous.  No warning is produced for the import of <literal>Z</literal>
+          because extending <literal>Z</literal>'s exports would be unlikely to produce
+          ambiguity in <literal>M</literal>.
         </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-missing-methods</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-missing-methods</option></primary></indexterm>
-	  <indexterm><primary>missing methods, warning</primary></indexterm>
-	  <indexterm><primary>methods, missing</primary></indexterm>
+        <term><option>-fwarn-missing-methods</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-missing-methods</option></primary></indexterm>
+          <indexterm><primary>missing methods, warning</primary></indexterm>
+          <indexterm><primary>methods, missing</primary></indexterm>
 
-	  <para>This option is on by default, and warns you whenever
+          <para>This option is on by default, and warns you whenever
           an instance declaration is missing one or more methods, and
           the corresponding class declaration has no default
           declaration for them.</para>
-	  <para>The warning is suppressed if the method name
-	  begins with an underscore.  Here's an example where this is useful:
-	    <programlisting>
-	      class C a where
-	        _simpleFn :: a -> String
-	        complexFn :: a -> a -> String
-	        complexFn x y = ... _simpleFn ...
-	      </programlisting>
-	    The idea is that: (a) users of the class will only call <literal>complexFn</literal>;
-	    never <literal>_simpleFn</literal>; and (b)
-	    instance declarations can define either <literal>complexFn</literal> or <literal>_simpleFn</literal>.
-	    </para>
-	</listitem>
+          <para>The warning is suppressed if the method name
+          begins with an underscore.  Here's an example where this is useful:
+            <programlisting>
+              class C a where
+                _simpleFn :: a -> String
+                complexFn :: a -> a -> String
+                complexFn x y = ... _simpleFn ...
+              </programlisting>
+            The idea is that: (a) users of the class will only call <literal>complexFn</literal>;
+            never <literal>_simpleFn</literal>; and (b)
+            instance declarations can define either <literal>complexFn</literal> or <literal>_simpleFn</literal>.
+            </para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-missing-signatures</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-missing-signatures</option></primary></indexterm>
-	  <indexterm><primary>type signatures, missing</primary></indexterm>
+        <term><option>-fwarn-missing-signatures</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-missing-signatures</option></primary></indexterm>
+          <indexterm><primary>type signatures, missing</primary></indexterm>
 
-	  <para>If you would like GHC to check that every top-level
+          <para>If you would like GHC to check that every top-level
           function/value has a type signature, use the
           <option>-fwarn-missing-signatures</option> option.  As part of
-	    the warning GHC also reports the inferred type.  The
+            the warning GHC also reports the inferred type.  The
           option is off by default.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-missing-local-sigs</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-missing-local-sigs</option></primary></indexterm>
-	  <indexterm><primary>type signatures, missing</primary></indexterm>
+        <term><option>-fwarn-missing-local-sigs</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-missing-local-sigs</option></primary></indexterm>
+          <indexterm><primary>type signatures, missing</primary></indexterm>
 
-	  <para>If you use the
+          <para>If you use the
           <option>-fwarn-missing-local-sigs</option> flag GHC will warn
           you about any polymorphic local bindings. As part of
-	    the warning GHC also reports the inferred type. The
+            the warning GHC also reports the inferred type. The
           option is off by default.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-name-shadowing</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-name-shadowing</option></primary></indexterm>
-	  <indexterm><primary>shadowing, warning</primary></indexterm>
+        <term><option>-fwarn-name-shadowing</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-name-shadowing</option></primary></indexterm>
+          <indexterm><primary>shadowing, warning</primary></indexterm>
 
-	  <para>This option causes a warning to be emitted whenever an
+          <para>This option causes a warning to be emitted whenever an
           inner-scope value has the same name as an outer-scope value,
           i.e. the inner value shadows the outer one.  This can catch
           typographical errors that turn into hard-to-find bugs, e.g.,
@@ -1390,40 +1449,46 @@
              f x = do { _ignore &lt;- this; _ignore &lt;- that; return (the other) }
           </programlisting>
          </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-orphans</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-orphans</option></primary></indexterm>
-	  <indexterm><primary>orphan instances, warning</primary></indexterm>
-	  <indexterm><primary>orphan rules, warning</primary></indexterm>
+        <term><option>-fwarn-orphans, -fwarn-auto-orphans</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-orphans</option></primary></indexterm>
+          <indexterm><primary><option>-fwarn-auto-orphans</option></primary></indexterm>
+          <indexterm><primary>orphan instances, warning</primary></indexterm>
+          <indexterm><primary>orphan rules, warning</primary></indexterm>
 
-	  <para>This option causes a warning to be emitted whenever the
-	    module contains an "orphan" instance declaration or rewrite rule.
-	    An instance declaration is an orphan if it appears in a module in
-	    which neither the class nor the type being instanced are declared
-	    in the same module.  A rule is an orphan if it is a rule for a
-	    function declared in another module.  A module containing any
-	  orphans is called an orphan module.</para>
-	  <para>The trouble with orphans is that GHC must pro-actively read the interface
-	    files for all orphan modules, just in case their instances or rules
-	    play a role, whether or not the module's interface would otherwise
-	    be of any use.  See <xref linkend="orphan-modules"/> for details.
+          <para>These flags cause a warning to be emitted whenever the
+            module contains an "orphan" instance declaration or rewrite rule.
+            An instance declaration is an orphan if it appears in a module in
+            which neither the class nor the type being instanced are declared
+            in the same module.  A rule is an orphan if it is a rule for a
+            function declared in another module.  A module containing any
+          orphans is called an orphan module.</para>
+          <para>The trouble with orphans is that GHC must pro-actively read the interface
+            files for all orphan modules, just in case their instances or rules
+            play a role, whether or not the module's interface would otherwise
+            be of any use.  See <xref linkend="orphan-modules"/> for details.
             </para>
-	</listitem>
+           <para>The flag <option>-fwarn-orphans</option> warns about user-written
+            orphan rules or instances.  The flag <option>-fwarn-auto-orphans</option>
+            warns about automatically-generated orphan rules, notably as a result of
+            specialising functions, for type classes (<literal>Specialise</literal>)
+            or argument values (<literal>SpecConstr</literal>).</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term>
+        <term>
           <option>-fwarn-overlapping-patterns</option>:
           <indexterm><primary><option>-fwarn-overlapping-patterns</option></primary></indexterm>
           <indexterm><primary>overlapping patterns, warning</primary></indexterm>
           <indexterm><primary>patterns, overlapping</primary></indexterm>
         </term>
-	<listitem>
-	  <para>By default, the compiler will warn you if a set of
+        <listitem>
+          <para>By default, the compiler will warn you if a set of
           patterns are overlapping, e.g.,</para>
 
 <programlisting>
@@ -1433,31 +1498,31 @@
 f "2"    = 2
 </programlisting>
 
-	  <para>where the last pattern match in <function>f</function>
+          <para>where the last pattern match in <function>f</function>
           won't ever be reached, as the second pattern overlaps
           it. More often than not, redundant patterns is a programmer
           mistake/error, so this option is enabled by default.</para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-tabs</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-tabs</option></primary></indexterm>
-	  <indexterm><primary>tabs, warning</primary></indexterm>
-	  <para>Have the compiler warn if there are tabs in your source
+        <term><option>-fwarn-tabs</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-tabs</option></primary></indexterm>
+          <indexterm><primary>tabs, warning</primary></indexterm>
+          <para>Have the compiler warn if there are tabs in your source
           file.</para>
 
-	  <para>This warning is off by default.</para>
-	</listitem>
+          <para>This warning is off by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-type-defaults</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-type-defaults</option></primary></indexterm>
-	  <indexterm><primary>defaulting mechanism, warning</primary></indexterm>
-	  <para>Have the compiler warn/inform you where in your source
+        <term><option>-fwarn-type-defaults</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-type-defaults</option></primary></indexterm>
+          <indexterm><primary>defaulting mechanism, warning</primary></indexterm>
+          <para>Have the compiler warn/inform you where in your source
           the Haskell defaulting mechanism for numeric types kicks
           in. This is useful information when converting code from a
           context that assumed one default into one with another,
@@ -1469,124 +1534,124 @@
           differences in performance and behaviour, hence the
           usefulness of being non-silent about this.</para>
 
-	  <para>This warning is off by default.</para>
-	</listitem>
+          <para>This warning is off by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-monomorphism-restriction</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-monomorphism-restriction</option></primary></indexterm>
-	  <indexterm><primary>monomorphism restriction, warning</primary></indexterm>
-	  <para>Have the compiler warn/inform you where in your source
+        <term><option>-fwarn-monomorphism-restriction</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-monomorphism-restriction</option></primary></indexterm>
+          <indexterm><primary>monomorphism restriction, warning</primary></indexterm>
+          <para>Have the compiler warn/inform you where in your source
           the Haskell Monomorphism Restriction is applied.  If applied silently
-	  the MR can give rise to unexpected behaviour, so it can be helpful
-	  to have an explicit warning that it is being applied.</para>
+          the MR can give rise to unexpected behaviour, so it can be helpful
+          to have an explicit warning that it is being applied.</para>
 
-	  <para>This warning is off by default.</para>
-	</listitem>
+          <para>This warning is off by default.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-unused-binds</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-unused-binds</option></primary></indexterm>
-	  <indexterm><primary>unused binds, warning</primary></indexterm>
-	  <indexterm><primary>binds, unused</primary></indexterm>
-	  <para>Report any function definitions (and local bindings)
+        <term><option>-fwarn-unused-binds</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-unused-binds</option></primary></indexterm>
+          <indexterm><primary>unused binds, warning</primary></indexterm>
+          <indexterm><primary>binds, unused</primary></indexterm>
+          <para>Report any function definitions (and local bindings)
           which are unused.  For top-level functions, the warning is
           only given if the binding is not exported.</para>
-	  <para>A definition is regarded as "used" if (a) it is exported, or (b) it is
-	    mentioned in the right hand side of another definition that is used, or (c) the
-	    function it defines begins with an underscore.  The last case provides a
-	    way to suppress unused-binding warnings selectively.  </para>
-	  <para> Notice that a variable
-	    is reported as unused even if it appears in the right-hand side of another
-	    unused binding. </para>
-	</listitem>
+          <para>A definition is regarded as "used" if (a) it is exported, or (b) it is
+            mentioned in the right hand side of another definition that is used, or (c) the
+            function it defines begins with an underscore.  The last case provides a
+            way to suppress unused-binding warnings selectively.  </para>
+          <para> Notice that a variable
+            is reported as unused even if it appears in the right-hand side of another
+            unused binding. </para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-unused-imports</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-unused-imports</option></primary></indexterm>
-	  <indexterm><primary>unused imports, warning</primary></indexterm>
-	  <indexterm><primary>imports, unused</primary></indexterm>
+        <term><option>-fwarn-unused-imports</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-unused-imports</option></primary></indexterm>
+          <indexterm><primary>unused imports, warning</primary></indexterm>
+          <indexterm><primary>imports, unused</primary></indexterm>
 
-	  <para>Report any modules that are explicitly imported but
-	  never used.  However, the form <literal>import M()</literal> is
-	  never reported as an unused import, because it is a useful idiom
-	  for importing instance declarations, which are anonymous in Haskell.</para>
-	</listitem>
+          <para>Report any modules that are explicitly imported but
+          never used.  However, the form <literal>import M()</literal> is
+          never reported as an unused import, because it is a useful idiom
+          for importing instance declarations, which are anonymous in Haskell.</para>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-unused-matches</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-unused-matches</option></primary></indexterm>
-	  <indexterm><primary>unused matches, warning</primary></indexterm>
-	  <indexterm><primary>matches, unused</primary></indexterm>
+        <term><option>-fwarn-unused-matches</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-unused-matches</option></primary></indexterm>
+          <indexterm><primary>unused matches, warning</primary></indexterm>
+          <indexterm><primary>matches, unused</primary></indexterm>
 
-	  <para>Report all unused variables which arise from pattern
+          <para>Report all unused variables which arise from pattern
           matches, including patterns consisting of a single variable.
           For instance <literal>f x y = []</literal> would report
           <varname>x</varname> and <varname>y</varname> as unused.  The
           warning is suppressed if the variable name begins with an underscore, thus:
-	    <programlisting>
-	       f _x = True
-	    </programlisting>
+            <programlisting>
+               f _x = True
+            </programlisting>
           </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-unused-do-bind</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-unused-do-bind</option></primary></indexterm>
-	  <indexterm><primary>unused do binding, warning</primary></indexterm>
-	  <indexterm><primary>do binding, unused</primary></indexterm>
+        <term><option>-fwarn-unused-do-bind</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-unused-do-bind</option></primary></indexterm>
+          <indexterm><primary>unused do binding, warning</primary></indexterm>
+          <indexterm><primary>do binding, unused</primary></indexterm>
 
-	  <para>Report expressions occurring in <literal>do</literal> and <literal>mdo</literal> blocks
-	  that appear to silently throw information away.
+          <para>Report expressions occurring in <literal>do</literal> and <literal>mdo</literal> blocks
+          that appear to silently throw information away.
           For instance <literal>do { mapM popInt xs ; return 10 }</literal> would report
           the first statement in the <literal>do</literal> block as suspicious,
           as it has the type <literal>StackM [Int]</literal> and not <literal>StackM ()</literal>, but that
           <literal>[Int]</literal> value is not bound to anything.  The warning is suppressed by
           explicitly mentioning in the source code that your program is throwing something away:
-	    <programlisting>
-	       do { _ &lt;- mapM popInt xs ; return 10 }
-	    </programlisting>
-	  Of course, in this particular situation you can do even better:
-	    <programlisting>
-	       do { mapM_ popInt xs ; return 10 }
-	    </programlisting>
+            <programlisting>
+               do { _ &lt;- mapM popInt xs ; return 10 }
+            </programlisting>
+          Of course, in this particular situation you can do even better:
+            <programlisting>
+               do { mapM_ popInt xs ; return 10 }
+            </programlisting>
           </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
       <varlistentry>
-	<term><option>-fwarn-wrong-do-bind</option>:</term>
-	<listitem>
-	  <indexterm><primary><option>-fwarn-wrong-do-bind</option></primary></indexterm>
-	  <indexterm><primary>apparently erroneous do binding, warning</primary></indexterm>
-	  <indexterm><primary>do binding, apparently erroneous</primary></indexterm>
+        <term><option>-fwarn-wrong-do-bind</option>:</term>
+        <listitem>
+          <indexterm><primary><option>-fwarn-wrong-do-bind</option></primary></indexterm>
+          <indexterm><primary>apparently erroneous do binding, warning</primary></indexterm>
+          <indexterm><primary>do binding, apparently erroneous</primary></indexterm>
 
-	  <para>Report expressions occurring in <literal>do</literal> and <literal>mdo</literal> blocks
-	  that appear to lack a binding.
+          <para>Report expressions occurring in <literal>do</literal> and <literal>mdo</literal> blocks
+          that appear to lack a binding.
           For instance <literal>do { return (popInt 10) ; return 10 }</literal> would report
           the first statement in the <literal>do</literal> block as suspicious,
           as it has the type <literal>StackM (StackM Int)</literal> (which consists of two nested applications
           of the same monad constructor), but which is not then &quot;unpacked&quot; by binding the result.
           The warning is suppressed by explicitly mentioning in the source code that your program is throwing something away:
-	    <programlisting>
-	       do { _ &lt;- return (popInt 10) ; return 10 }
-	    </programlisting>
-	  For almost all sensible programs this will indicate a bug, and you probably intended to write:
-	    <programlisting>
-	       do { popInt 10 ; return 10 }
-	    </programlisting>
+            <programlisting>
+               do { _ &lt;- return (popInt 10) ; return 10 }
+            </programlisting>
+          For almost all sensible programs this will indicate a bug, and you probably intended to write:
+            <programlisting>
+               do { popInt 10 ; return 10 }
+            </programlisting>
           </para>
-	</listitem>
+        </listitem>
       </varlistentry>
 
     </variablelist>
@@ -1634,69 +1699,69 @@
 
       <variablelist>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             No <option>-O*</option>-type option specified:
             <indexterm><primary>-O* not specified</primary></indexterm>
           </term>
-	  <listitem>
-	    <para>This is taken to mean: &ldquo;Please compile
+          <listitem>
+            <para>This is taken to mean: &ldquo;Please compile
             quickly; I'm not over-bothered about compiled-code
             quality.&rdquo; So, for example: <command>ghc -c
             Foo.hs</command></para>
-	  </listitem>
-	</varlistentry>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-O0</option>:
             <indexterm><primary><option>-O0</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Means &ldquo;turn off all optimisation&rdquo;,
-	    reverting to the same settings as if no
-	    <option>-O</option> options had been specified.  Saying
-	    <option>-O0</option> can be useful if
-	    eg. <command>make</command> has inserted a
-	    <option>-O</option> on the command line already.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Means &ldquo;turn off all optimisation&rdquo;,
+            reverting to the same settings as if no
+            <option>-O</option> options had been specified.  Saying
+            <option>-O0</option> can be useful if
+            eg. <command>make</command> has inserted a
+            <option>-O</option> on the command line already.</para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-O</option> or <option>-O1</option>:
             <indexterm><primary>-O option</primary></indexterm>
             <indexterm><primary>-O1 option</primary></indexterm>
             <indexterm><primary>optimise</primary><secondary>normally</secondary></indexterm>
           </term>
-	  <listitem>
-	    <para>Means: &ldquo;Generate good-quality code without
+          <listitem>
+            <para>Means: &ldquo;Generate good-quality code without
             taking too long about it.&rdquo; Thus, for example:
             <command>ghc -c -O Main.lhs</command></para>
-	  </listitem>
-	</varlistentry>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-O2</option>:
             <indexterm><primary>-O2 option</primary></indexterm>
             <indexterm><primary>optimise</primary><secondary>aggressively</secondary></indexterm>
           </term>
-	  <listitem>
-	    <para>Means: &ldquo;Apply every non-dangerous
+          <listitem>
+            <para>Means: &ldquo;Apply every non-dangerous
             optimisation, even if it means significantly longer
             compile times.&rdquo;</para>
 
-	    <para>The avoided &ldquo;dangerous&rdquo; optimisations
+            <para>The avoided &ldquo;dangerous&rdquo; optimisations
             are those that can make runtime or space
             <emphasis>worse</emphasis> if you're unlucky.  They are
             normally turned on or off individually.</para>
 
-	    <para>At the moment, <option>-O2</option> is
+            <para>At the moment, <option>-O2</option> is
             <emphasis>unlikely</emphasis> to produce better code than
             <option>-O</option>.</para>
-	  </listitem>
-	</varlistentry>
+          </listitem>
+        </varlistentry>
       </variablelist>
 
       <para>We don't use a <option>-O*</option> flag for day-to-day
@@ -1720,282 +1785,544 @@
       They are normally set via the <option>-O</option> options
       described above, and as such, you shouldn't need to set any of
       them explicitly (indeed, doing so could lead to unexpected
-      results).  However, there are one or two that may be of
-      interest:</para>
+      results).  A flag <option>-fwombat</option> can be negated by 
+      saying <option>-fno-wombat</option>.  The flags below are off
+      by default, except where noted below.
+     </para>
 
       <variablelist>
-	<varlistentry>
-	  <term><option>-fexcess-precision</option>:</term>
-	  <listitem>
-	    <indexterm><primary><option>-fexcess-precision</option></primary></indexterm>
-	    <para>When this option is given, intermediate floating
-	    point values can have a <emphasis>greater</emphasis>
-	    precision/range than the final type.  Generally this is a
-	    good thing, but some programs may rely on the exact
-	    precision/range of
-	    <literal>Float</literal>/<literal>Double</literal> values
-	    and should not use this option for their compilation.</para>
-	  </listitem>
-	</varlistentry>
+        <varlistentry>
+          <term>
+            <option>-fcse</option>
+            <indexterm><primary><option>-fcse</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>On by default.</emphasis>.  Enables the common-sub-expression 
+            elimination optimisation.
+            Switching this off can be useful if you have some <literal>unsafePerformIO</literal>
+            expressions that you don't want commoned-up.</para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term><option>-fignore-asserts</option>:</term>
-	  <listitem>
-	    <indexterm><primary><option>-fignore-asserts</option></primary></indexterm>
-	    <para>Causes GHC to ignore uses of the function
-	    <literal>Exception.assert</literal> in source code (in
-	    other words, rewriting <literal>Exception.assert p
-	    e</literal> to <literal>e</literal> (see <xref
-	    linkend="assertions"/>).  This flag is turned on by
-	    <option>-O</option>.
-	    </para>
-	  </listitem>
-	</varlistentry>
+        <varlistentry>
+          <term>
+            <option>-fstrictness</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para> <emphasis>On by default.</emphasis>.  
+            Switch on the strictness analyser. There is a very old paper about GHC's 
+            strictness analyser, <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/simple-strictnes-analyser.ps.gz">
+              Measuring the effectiveness of a simple strictness analyser</ulink>,
+            but the current one is quite a bit different.
+            </para>
 
-	<varlistentry>
-	  <term>
-            <option>-fignore-interface-pragmas</option>
-	    <indexterm><primary><option>-fignore-interface-pragmas</option></primary></indexterm>
+            <para>The strictness analyser figures out when arguments and
+            variables in a function can be treated 'strictly' (that is they
+            are always evaluated in the function at some point). This allow
+            GHC to apply certain optimisations such as unboxing that
+            otherwise don't apply as they change the semantics of the program
+            when applied to lazy arguments.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-funbox-strict-fields</option>:
+            <indexterm><primary><option>-funbox-strict-fields</option></primary></indexterm>
+            <indexterm><primary>strict constructor fields</primary></indexterm>
+            <indexterm><primary>constructor fields, strict</primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Tells GHC to ignore all inessential information when reading interface files.
-	    That is, even if <filename>M.hi</filename> contains unfolding or strictness information
-	    for a function, GHC will ignore that information.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>This option causes all constructor fields which are marked
+            strict (i.e. &ldquo;!&rdquo;) to be unpacked if possible. It is
+            equivalent to adding an <literal>UNPACK</literal> pragma to every
+            strict constructor field (see <xref linkend="unpack-pragma"/>).
+            </para>
 
-	<varlistentry>
-	  <term>
-            <option>-fliberate-case</option>
-            <indexterm><primary><option>-fliberate-case</option></primary></indexterm>
+            <para>This option is a bit of a sledgehammer: it might sometimes
+            make things worse. Selectively unboxing fields by using
+            <literal>UNPACK</literal> pragmas might be better. An alternative
+            is to use <option>-funbox-strict-fields</option> to turn on
+            unboxing by default but disable it for certain constructor
+            fields using the <literal>NOUNPACK</literal> pragma (see
+            <xref linkend="nounpack-pragma"/>).</para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fspec-constr</option>
+            <indexterm><primary><option>-fspec-constr</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turn on the liberate-case transformation.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para><emphasis>Off by default, but enabled by -O2.</emphasis>
+            Turn on call-pattern specialisation; see
+            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/spec-constr/index.htm">
+              Call-pattern specialisation for Haskell programs</ulink>.
+            </para>
 
-	<varlistentry>
-	  <term>
-            <option>-fno-cse</option>
-            <indexterm><primary><option>-fno-cse</option></primary></indexterm>
+            <para>This optimisation specializes recursive functions according to
+            their argument "shapes". This is best explained by example so
+            consider:
+<programlisting>
+last :: [a] -> a
+last [] = error "last"
+last (x : []) = x
+last (x : xs) = last xs
+</programlisting>
+            In this code, once we pass the initial check for an empty list we
+            know that in the recursive case this pattern match is redundant. As
+            such <option>-fspec-constr</option> will transform the above code
+            to:
+<programlisting>
+last :: [a] -> a
+last []       = error "last"
+last (x : xs) = last' x xs
+    where
+      last' x []       = x
+      last' x (y : ys) = last' y ys
+</programlisting>
+            </para>
+
+            <para>As well avoid unnecessary pattern matching it also helps avoid
+            unnecessary allocation. This applies when a argument is strict in
+            the recursive call to itself but not on the initial entry. As
+            strict recursive branch of the function is created similar to the
+            above example.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fspecialise</option>
+            <indexterm><primary><option>-fspecialise</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turns off the common-sub-expression elimination optimisation.
-	      Can be useful if you have some <literal>unsafePerformIO</literal>
-	    expressions that you don't want commoned-up.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para><emphasis>On by default.</emphasis>
+            Specialise each type-class-overloaded function defined in this
+            module for the types at which it is called in this module.  Also
+            specialise imported functions that have an INLINABLE pragma
+            (<xref linkend="inlinable-pragma"/>) for the types at which they
+            are called in this module.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
-            <option>-fno-strictness</option>
-            <indexterm><primary><option>-fno-strictness</option></primary></indexterm>
+        <varlistentry>
+          <term>
+            <option>-fstatic-argument-transformation</option>
+            <indexterm><primary><option>-fstatic-argument-transformation</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turns off the strictness analyser; sometimes it eats
-	    too many cycles.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Turn on the static argument transformation, which turns a
+            recursive function into a non-recursive one with a local
+            recursive loop. See Chapter 7 of
+            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/santos-thesis.ps.gz">
+              Andre Santos's PhD thesis</ulink>
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
-            <option>-fno-full-laziness</option>
-            <indexterm><primary><option>-fno-full-laziness</option></primary></indexterm>
+        <varlistentry>
+          <term>
+            <option>-ffloat-in</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turns off the full laziness optimisation (also known as
-	      let-floating).  Full laziness increases sharing, which can lead
-	      to increased memory residency.</para>
+          <listitem>
+            <para><emphasis>On by default.</emphasis>
+            Float let-bindings inwards, nearer their binding site.  See
+            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/float.ps.gz">
+              Let-floating: moving bindings to give faster programs (ICFP'96)</ulink>.
+            </para>
+
+            <para>This optimisation moves let bindings closer to their use
+            site. The benefit here is that this may avoid unnecessary
+            allocation if the branch the let is now on is never executed. It
+            also enables other optimisation passes to work more effectively
+            as they have more information locally.
+            </para>
+
+            <para>This optimisation isn't always beneficial though (so GHC
+            applies some heuristics to decide when to apply it). The details
+            get complicated but a simple example is that it is often beneficial
+            to move let bindings outwards so that multiple let bindings can be
+            grouped into a larger single let binding, effectively batching
+            their allocation and helping the garbage collector and allocator.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-ffull-laziness</option>
+            <indexterm><primary><option>-ffull-laziness</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>On by default.</emphasis>
+            Run the full laziness optimisation (also known as let-floating),
+            which floats let-bindings outside enclosing lambdas, in the hope
+            they will be thereby be computed less often.  See
+            <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/float.ps.gz">Let-floating:
+              moving bindings to give faster programs (ICFP'96)</ulink>.
+            Full laziness increases sharing, which can lead to increased memory
+            residency.
+            </para>
 
             <para>NOTE: GHC doesn't implement complete full-laziness.
-            When optimisation in on, and
-            <option>-fno-full-laziness</option> is not given, some
-            transformations that increase sharing are performed, such
-            as extracting repeated computations from a loop.  These
-            are the same transformations that a fully lazy
-            implementation would do, the difference is that GHC
-            doesn't consistently apply full-laziness, so don't rely on
-            it.</para>
-	  </listitem>
-	</varlistentry>
+            When optimisation in on, and <option>-fno-full-laziness</option>
+            is not given, some transformations that increase sharing are
+            performed, such as extracting repeated computations from a loop.
+            These are the same transformations that a fully lazy
+            implementation would do, the difference is that GHC doesn't
+            consistently apply full-laziness, so don't rely on it.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
-            <option>-fno-float-in</option>
-            <indexterm><primary><option>-fno-float-in</option></primary></indexterm>
+        <varlistentry>
+          <term>
+            <option>-fdo-lambda-eta-expansion</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turns off the float-in transformation.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para><emphasis>On by default.</emphasis>
+            Eta-expand let-bindings to increase their arity.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
-            <option>-fno-specialise</option>
-            <indexterm><primary><option>-fno-specialise</option></primary></indexterm>
+        <varlistentry>
+          <term>
+            <option>-fdo-eta-reduction</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turns off the automatic specialisation of overloaded functions.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para><emphasis>On by default.</emphasis>
+            Eta-reduce lambda expressions, if doing so gets rid of a whole
+            group of lambdas.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
+            <option>-fcase-merge</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>On by default.</emphasis> 
+            Merge immediately-nested case expressions that scrutinse the same variable. Example
+<programlisting>
+  case x of
+     Red -> e1
+     _   -> case x of 
+              Blue -> e2
+              Green -> e3
+==>
+  case x of
+     Red -> e1
+     Blue -> e2
+     Green -> e2
+</programlisting>
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fliberate-case</option>
+            <indexterm><primary><option>-fliberate-case</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>Off by default, but enabled by -O2.</emphasis> 
+            Turn on the liberate-case transformation.  This unrolls recursive
+            function once in its own RHS, to avoid repeated case analysis of
+            free variables.  It's a bit like the call-pattern specialiser
+            (<option>-fspec-constr</option>) but for free variables rather than
+            arguments.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fdicts-cheap</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>A very experimental flag that makes dictionary-valued
+            expressions seem cheap to the optimiser.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-feager-blackholing</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Usually GHC black-holes a thunk only when it switches
+            threads. This flag makes it do so as soon as the thunk is
+            entered. See <ulink url="http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/">
+              Haskell on a shared-memory multiprocessor</ulink>.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
             <option>-fno-state-hack</option>
             <indexterm><primary><option>-fno-state-hack</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turn off the "state hack" whereby any lambda with a
-	      <literal>State#</literal> token as argument is considered to be
-	      single-entry, hence it is considered OK to inline things inside
-	      it.  This can improve performance of IO and ST monad code, but it
-	    runs the risk of reducing sharing.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Turn off the "state hack" whereby any lambda with a
+            <literal>State#</literal> token as argument is considered to be
+            single-entry, hence it is considered OK to inline things inside
+            it. This can improve performance of IO and ST monad code, but it
+            runs the risk of reducing sharing.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-fpedantic-bottoms</option>
             <indexterm><primary><option>-fpedantic-bottoms</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Make GHC be more precise about its treatment of bottom (but see also
-                     <option>-fno-state-hack</option>). In particular, stop GHC 
-                     eta-expanding through a case expression, which is good for
-		     performance, but bad if you are using <literal>seq</literal> on
-                     partial applications.</para>
-	  </listitem>
-	</varlistentry>
-
-	<varlistentry>
-	  <term>
-            <option>-fomit-interface-pragmas</option>
-	    <indexterm><primary><option>-fomit-interface-pragmas</option></primary></indexterm>
-          </term>
-	  <listitem>
-	    <para>Tells GHC to omit all inessential information from the interface file
-	      generated for the module being compiled (say M).  This means that a module
-	      importing M will see only the <emphasis>types</emphasis> of the functions that M exports, but not
-	      their unfoldings, strictness info, etc.  Hence, for example,
-	      no function exported by M will be inlined
-	      into an importing module.  The benefit is that modules that import M will
-	      need to be recompiled less often (only when M's exports change their type,
-	      not when they change their implementation).
-	      </para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Make GHC be more precise about its treatment of bottom (but see also
+            <option>-fno-state-hack</option>). In particular, stop GHC
+            eta-expanding through a case expression, which is good for
+            performance, but bad if you are using <literal>seq</literal> on
+            partial applications.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-fsimpl-tick-factor=<replaceable>n</replaceable></option>
             <indexterm><primary><option>-fsimpl-tick-factor</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>GHC's optimiser can diverge if you write rewrite rules (<xref linkend="rewrite-rules"/>) 
-              that don't terminate, or (less satisfactorily) if you
-              code up recursion through data types
-              (<xref linkend="bugs-ghc"/>).  To avoid making the compiler fall into an infinite
-	      loop, the optimiser carries a "tick count" and stops inlining and applying rewrite rules
-              when this count is exceeded.  The limit is set as a multiple of the program size, so 
-              bigger programs get more ticks. The <option>-fsimpl-tick-factor</option> flag lets
-              you change the multiplier. The default is 100; numbers larger than 100 give more ticks,
-              and numbers smaller than 100 give fewer.</para>
-            <para>If the tick-count expires, GHC summarises what simplifier steps it has done; 
-            you can use <option>-fddump-simpl-stats</option> to generate a much more detailed list.
-            Usually that identifies the loop quite accurately, because some numbers are very large.
-	      </para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>GHC's optimiser can diverge if you write rewrite rules (
+              <xref linkend="rewrite-rules"/>) that don't terminate, or (less
+            satisfactorily) if you code up recursion through data types
+            (<xref linkend="bugs-ghc"/>).  To avoid making the compiler fall
+            into an infinite loop, the optimiser carries a "tick count" and
+            stops inlining and applying rewrite rules when this count is
+            exceeded.  The limit is set as a multiple of the program size, so
+            bigger programs get more ticks. The
+            <option>-fsimpl-tick-factor</option> flag lets you change the
+            multiplier. The default is 100; numbers larger than 100 give more
+            ticks, and numbers smaller than 100 give fewer.
+            </para>
 
-	<varlistentry>
-	  <term>
-            <option>-fstatic-argument-transformation</option>
-            <indexterm><primary><option>-fstatic-argument-transformation</option></primary></indexterm>
+            <para>If the tick-count expires, GHC summarises what simplifier
+            steps it has done; you can use
+            <option>-fddump-simpl-stats</option> to generate a much more
+            detailed list.  Usually that identifies the loop quite
+            accurately, because some numbers are very large.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-funfolding-creation-threshold=<replaceable>n</replaceable></option>:
+            <indexterm><primary><option>-funfolding-creation-threshold</option></primary></indexterm>
+            <indexterm><primary>inlining, controlling</primary></indexterm>
+            <indexterm><primary>unfolding, controlling</primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turn on the static argument transformation.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>(Default: 45) Governs the maximum size that GHC will allow a
+            function unfolding to be. (An unfolding has a &ldquo;size&rdquo;
+            that reflects the cost in terms of &ldquo;code bloat&rdquo; of
+            expanding (aka inlining) that unfolding at a call site. A bigger
+            function would be assigned a bigger cost.)
+            </para>
 
-	<varlistentry>
-	  <term>
-            <option>-fspec-constr</option>
-            <indexterm><primary><option>-fspec-constr</option></primary></indexterm>
+            <para>Consequences: (a) nothing larger than this will be inlined
+            (unless it has an INLINE pragma); (b) nothing larger than this
+            will be spewed into an interface file.
+            </para>
+
+            <para>Increasing this figure is more likely to result in longer
+            compile times than faster code. The
+            <option>-funfolding-use-threshold</option> is more useful.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-funfolding-use-threshold=<replaceable>n</replaceable></option>
+            <indexterm><primary><option>-funfolding-use-threshold</option></primary></indexterm>
+            <indexterm><primary>inlining, controlling</primary></indexterm>
+            <indexterm><primary>unfolding, controlling</primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Turn on call-pattern specialisation.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>(Default: 8) This is the magic cut-off figure for unfolding
+            (aka inlining): below this size, a function definition will be
+            unfolded at the call-site, any bigger and it won't. The size
+            computed for a function depends on two things: the actual size of
+            the expression minus any discounts that
+            apply (see <option>-funfolding-con-discount</option>).
+            </para>
 
-	<varlistentry>
-	  <term>
-            <option>-funbox-strict-fields</option>:
-	    <indexterm><primary><option>-funbox-strict-fields</option></primary></indexterm>
-	    <indexterm><primary>strict constructor fields</primary></indexterm>
-	    <indexterm><primary>constructor fields, strict</primary></indexterm>
+            <para>The difference between this and
+            <option>-funfolding-creation-threshold</option> is that this one
+            determines if a function definition will be inlined <emphasis>at
+              a call site</emphasis>. The other option determines if a
+            function definition will be kept around at all for potential
+            inlining.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fexpose-all-unfoldings</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>This option causes all constructor fields which are
-            marked strict (i.e. &ldquo;!&rdquo;) to be unboxed or
-            unpacked if possible.  It is equivalent to adding an
-            <literal>UNPACK</literal> pragma to every strict
-            constructor field (see <xref
-            linkend="unpack-pragma"/>).</para>
+          <listitem>
+            <para>An experimental flag to expose all unfoldings, even for very
+            large or recursive functions. This allows for all functions to be
+            inlined while usually GHC would avoid inlining larger functions.
+            </para>
+          </listitem>
+        </varlistentry>
 
-	    <para>This option is a bit of a sledgehammer: it might
-	    sometimes make things worse.  Selectively unboxing fields
-	    by using <literal>UNPACK</literal> pragmas might be
-	    better. An alternative is to use
-        <option>-funbox-strict-fields</option> to turn on
-        unboxing by default but disable it for certain constructor
-        fields using the <literal>NOUNPACK</literal> pragma
-        (see <xref linkend="nounpack-pragma"/>).
-        </para>
-	  </listitem>
-	</varlistentry>
+        <varlistentry>
+          <term>
+            <option>-fvectorise</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Data Parallel Haskell.
+            </para>
+            TODO: Document optimisation
+          </listitem>
+        </varlistentry>
 
-	<varlistentry>
-	  <term>
-            <option>-funfolding-creation-threshold=<replaceable>n</replaceable></option>:
-	    <indexterm><primary><option>-funfolding-creation-threshold</option></primary></indexterm>
-	    <indexterm><primary>inlining, controlling</primary></indexterm>
-	    <indexterm><primary>unfolding, controlling</primary></indexterm>
+        <varlistentry>
+          <term>
+            <option>-favoid-vect</option>
+            <indexterm><primary><option></option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>(Default: 45) Governs the maximum size that GHC will
-            allow a function unfolding to be.   (An unfolding has a
-            &ldquo;size&rdquo; that reflects the cost in terms of
-            &ldquo;code bloat&rdquo; of expanding that unfolding
-            at a call site. A bigger function would be assigned a
-            bigger cost.) </para>
+          <listitem>
+            <para>Data Parallel Haskell.
+            </para>
+            TODO: Document optimisation
+          </listitem>
+        </varlistentry>
 
-	    <para> Consequences: (a) nothing larger than this will be
-	    inlined (unless it has an INLINE pragma); (b) nothing
-	    larger than this will be spewed into an interface
-	    file. </para>
+        <varlistentry>
+          <term>
+            <option>-fregs-graph</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>Off by default, but enabled by -O2. Only applies in
+              combination with the native code generator.</emphasis>
+            Use the graph colouring register allocator for register allocation
+            in the native code generator. By default, GHC uses a simpler,
+            faster linear register allocator. The downside being that the
+            linear register allocator usually generates worse code.
+            </para>
+          </listitem>
+        </varlistentry>
 
+        <varlistentry>
+          <term>
+            <option>-fregs-iterative</option>
+            <indexterm><primary><option></option></primary></indexterm>
+          </term>
+          <listitem>
+            <para><emphasis>Off by default, only applies in combination with
+              the native code generator.</emphasis>
+            Use the iterative coalescing graph colouring register allocator for
+            register allocation in the native code generator. This is the same
+            register allocator as the <option>-freg-graph</option> one but also
+            enables iterative coalescing during register allocation.
+            </para>
+          </listitem>
+        </varlistentry>
 
-            <para> Increasing this figure is more likely to result in longer
-            compile times than faster code.  The next option is more
-            useful:</para>
-	  </listitem>
-	</varlistentry>
+        <varlistentry>
+          <term>
+            <option>-fexcess-precision</option>
+            <indexterm><primary><option>-fexcess-precision</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>When this option is given, intermediate floating
+            point values can have a <emphasis>greater</emphasis>
+            precision/range than the final type.  Generally this is a
+            good thing, but some programs may rely on the exact
+            precision/range of
+            <literal>Float</literal>/<literal>Double</literal> values
+            and should not use this option for their compilation.</para>
 
-	<varlistentry>
-	  <term><option>-funfolding-use-threshold=<replaceable>n</replaceable></option></term>
-	  <listitem>
-	    <indexterm><primary><option>-funfolding-use-threshold</option></primary></indexterm>
-	    <indexterm><primary>inlining, controlling</primary></indexterm>
-	    <indexterm><primary>unfolding, controlling</primary></indexterm>
+            <para>
+              Note that the 32-bit x86 native code generator only
+              supports excess-precision mode, so neither
+              <option>-fexcess-precision</option> nor
+              <option>-fno-excess-precision</option> has any effect.
+              This is a known bug, see <xref linkend="bugs-ghc" />.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fignore-asserts</option>
+            <indexterm><primary><option>-fignore-asserts</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Causes GHC to ignore uses of the function
+            <literal>Exception.assert</literal> in source code (in
+            other words, rewriting <literal>Exception.assert p
+            e</literal> to <literal>e</literal> (see <xref
+            linkend="assertions"/>).  This flag is turned on by
+            <option>-O</option>.
+            </para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fignore-interface-pragmas</option>
+            <indexterm><primary><option>-fignore-interface-pragmas</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Tells GHC to ignore all inessential information when reading interface files.
+            That is, even if <filename>M.hi</filename> contains unfolding or strictness information
+            for a function, GHC will ignore that information.</para>
+          </listitem>
+        </varlistentry>
+
+        <varlistentry>
+          <term>
+            <option>-fomit-interface-pragmas</option>
+            <indexterm><primary><option>-fomit-interface-pragmas</option></primary></indexterm>
+          </term>
+          <listitem>
+            <para>Tells GHC to omit all inessential information from the
+            interface file generated for the module being compiled (say M).
+            This means that a module importing M will see only the
+            <emphasis>types</emphasis> of the functions that M exports, but
+            not their unfoldings, strictness info, etc.  Hence, for example,
+            no function exported by M will be inlined into an importing module.
+            The benefit is that modules that import M will need to be
+            recompiled less often (only when M's exports change their type, not
+            when they change their implementation).</para>
+          </listitem>
+        </varlistentry>
 
-	    <para>(Default: 8) This is the magic cut-off figure for
-            unfolding: below this size, a function definition will be
-            unfolded at the call-site, any bigger and it won't.  The
-            size computed for a function depends on two things: the
-            actual size of the expression minus any discounts that
-            apply (see <option>-funfolding-con-discount</option>).</para>
-	  </listitem>
-	</varlistentry>
       </variablelist>
 
     </sect2>
@@ -2016,7 +2343,7 @@
       special option or libraries compiled in a certain way.  To get access to
       the support libraries for Concurrent Haskell, just import
       <ulink
-	url="&libraryBaseLocation;/Control-Concurrent.html"><literal>Control.Concurrent</literal></ulink>.  More information on Concurrent Haskell is provided in the documentation for that module.</para>
+        url="&libraryBaseLocation;/Control-Concurrent.html"><literal>Control.Concurrent</literal></ulink>.  More information on Concurrent Haskell is provided in the documentation for that module.</para>
 
     <para>
       Optionally, the program may be linked with
@@ -2052,17 +2379,17 @@
 
     <variablelist>
       <varlistentry>
-	<term><option>-C<replaceable>s</replaceable></option></term>
-	<listitem>
-	  <para><indexterm><primary><option>-C<replaceable>s</replaceable></option></primary><secondary>RTS option</secondary></indexterm>
-	    Sets the context switch interval to <replaceable>s</replaceable>
-	    seconds.  A context switch will occur at the next heap block
-	    allocation after the timer expires (a heap block allocation occurs
-	    every 4k of allocation).  With <option>-C0</option> or
-	    <option>-C</option>, context switches will occur as often as
-	    possible (at every heap block allocation).  By default, context
-	    switches occur every 20ms.</para>
-	</listitem>
+        <term><option>-C<replaceable>s</replaceable></option></term>
+        <listitem>
+          <para><indexterm><primary><option>-C<replaceable>s</replaceable></option></primary><secondary>RTS option</secondary></indexterm>
+            Sets the context switch interval to <replaceable>s</replaceable>
+            seconds.  A context switch will occur at the next heap block
+            allocation after the timer expires (a heap block allocation occurs
+            every 4k of allocation).  With <option>-C0</option> or
+            <option>-C</option>, context switches will occur as often as
+            possible (at every heap block allocation).  By default, context
+            switches occur every 20ms.</para>
+        </listitem>
       </varlistentry>
     </variablelist>
   </sect1>
@@ -2091,16 +2418,16 @@
       is also possible to obtain performance improvements with parallelism
       on programs that do not use concurrency.  This section describes how to
       use GHC to compile and run parallel programs, in <xref
-	linkend="lang-parallel" /> we describe the language features that affect
+        linkend="lang-parallel" /> we describe the language features that affect
     parallelism.</para>
 
     <sect2 id="parallel-compile-options">
       <title>Compile-time options for SMP parallelism</title>
 
       <para>In order to make use of multiple CPUs, your program must be
-	linked with the <option>-threaded</option> option (see <xref
-	  linkend="options-linker" />).  Additionally, the following
-	compiler options affect parallelism:</para>
+        linked with the <option>-threaded</option> option (see <xref
+          linkend="options-linker" />).  Additionally, the following
+        compiler options affect parallelism:</para>
 
       <variablelist>
         <varlistentry>
@@ -2144,22 +2471,22 @@
 
       <para>There are two ways to run a program on multiple
         processors:
-        call <literal>GHC.Conc.setNumCapabilities</literal> from your
+        call <literal>Control.Concurrent.setNumCapabilities</literal> from your
         program, or use the RTS <option>-N</option> option.</para>
 
       <variablelist>
-	<varlistentry>
-	  <term><option>-N<optional><replaceable>x</replaceable></optional></option></term>
-	  <listitem>
-	    <para><indexterm><primary><option>-N<replaceable>x</replaceable></option></primary><secondary>RTS option</secondary></indexterm>
-	      Use <replaceable>x</replaceable> simultaneous threads when
-	      running the program.  Normally <replaceable>x</replaceable>
-	      should be chosen to match the number of CPU cores on the
-	      machine<footnote><para>Whether hyperthreading cores should be counted or not is an
-	      open question; please feel free to experiment and let us know what
-	          results you find.</para></footnote>.  For example,
-	      on a dual-core machine we would probably use
-	      <literal>+RTS -N2 -RTS</literal>.</para>
+        <varlistentry>
+          <term><option>-N<optional><replaceable>x</replaceable></optional></option></term>
+          <listitem>
+            <para><indexterm><primary><option>-N<replaceable>x</replaceable></option></primary><secondary>RTS option</secondary></indexterm>
+              Use <replaceable>x</replaceable> simultaneous threads when
+              running the program.  Normally <replaceable>x</replaceable>
+              should be chosen to match the number of CPU cores on the
+              machine<footnote><para>Whether hyperthreading cores should be counted or not is an
+              open question; please feel free to experiment and let us know what
+                  results you find.</para></footnote>.  For example,
+              on a dual-core machine we would probably use
+              <literal>+RTS -N2 -RTS</literal>.</para>
 
             <para>Omitting <replaceable>x</replaceable>,
               i.e. <literal>+RTS -N -RTS</literal>, lets the runtime
@@ -2177,37 +2504,33 @@
 
             <para>The current value of the <option>-N</option> option
               is available to the Haskell program
-              via <literal>GHC.Conc.getNumCapabilities</literal>, and
+              via <literal>Control.Concurrent.getNumCapabilities</literal>, and
               it may be changed while the program is running by
-              calling <literal>GHC.Conc.setNumCapabilities</literal>.
-              Note: in the current implementation,
-              the <option>-N</option> value may only
-              be <emphasis>increased</emphasis>, not decreased, by
-              calling <literal>GHC.Conc.setNumCapabilities</literal>.</para>
-	  </listitem>
-	</varlistentry>
+              calling <literal>Control.Concurrent.setNumCapabilities</literal>.</para>
+          </listitem>
+        </varlistentry>
       </variablelist>
 
       <para>The following options affect the way the runtime schedules
       threads on CPUs:</para>
 
       <variablelist>
-	<varlistentry>
-	  <term><option>-qa</option></term>
+        <varlistentry>
+          <term><option>-qa</option></term>
           <indexterm><primary><option>-qa</option></primary><secondary>RTS
           option</secondary></indexterm>
-	  <listitem>
+          <listitem>
             <para>Use the OS's affinity facilities to try to pin OS
               threads to CPU cores.  This is an experimental feature,
               and may or may not be useful.  Please let us know
               whether it helps for you!</para>
           </listitem>
         </varlistentry>
-	<varlistentry>
-	  <term><option>-qm</option></term>
+        <varlistentry>
+          <term><option>-qm</option></term>
           <indexterm><primary><option>-qm</option></primary><secondary>RTS
           option</secondary></indexterm>
-	  <listitem>
+          <listitem>
             <para>Disable automatic migration for load balancing.
             Normally the runtime will automatically try to schedule
             threads across the available CPUs to make use of idle
@@ -2219,7 +2542,7 @@
             <para>
               This option is probably only of use for concurrent
               programs that explicitly schedule threads onto CPUs
-              with <literal>GHC.Conc.forkOnIO</literal>.
+              with <literal>Control.Concurrent.forkOn</literal>.
             </para>
           </listitem>
         </varlistentry>
@@ -2230,12 +2553,12 @@
       <title>Hints for using SMP parallelism</title>
 
       <para>Add the <literal>-s</literal> RTS option when
-	running the program to see timing stats, which will help to tell you
-	whether your program got faster by using more CPUs or not.  If the user
-	time is greater than
-	the elapsed time, then the program used more than one CPU.  You should
-	also run the program without <literal>-N</literal> for
-	comparison.</para>
+        running the program to see timing stats, which will help to tell you
+        whether your program got faster by using more CPUs or not.  If the user
+        time is greater than
+        the elapsed time, then the program used more than one CPU.  You should
+        also run the program without <literal>-N</literal> for
+        comparison.</para>
 
       <para>The output of <literal>+RTS -s</literal> tells you how
         many &ldquo;sparks&rdquo; were created and executed during the
@@ -2264,19 +2587,19 @@
     <variablelist>
 
       <varlistentry>
-	<term><option>-msse2</option>:</term>
-	<listitem>
+        <term><option>-msse2</option>:</term>
+        <listitem>
           <para>
-				(x86 only, added in GHC 7.0.1) Use the SSE2 registers and
-				instruction set to implement floating point operations when using
-				the <link linkend="native-code-gen">native code generator</link>.
-				This gives a substantial performance improvement for floating
-				point, but the resulting compiled code
-				will only run on processors that support SSE2 (Intel Pentium 4 and
-				later, or AMD Athlon 64 and later). The
-				<link linkend="llvm-code-gen">LLVM backend</link> will also use SSE2
-				if your processor supports it but detects this automatically so no
-				flag is required.
+                                (x86 only, added in GHC 7.0.1) Use the SSE2 registers and
+                                instruction set to implement floating point operations when using
+                                the <link linkend="native-code-gen">native code generator</link>.
+                                This gives a substantial performance improvement for floating
+                                point, but the resulting compiled code
+                                will only run on processors that support SSE2 (Intel Pentium 4 and
+                                later, or AMD Athlon 64 and later). The
+                                <link linkend="llvm-code-gen">LLVM backend</link> will also use SSE2
+                                if your processor supports it but detects this automatically so no
+                                flag is required.
           </para>
           <para>
             SSE2 is unconditionally used on x86-64 platforms.
@@ -2285,17 +2608,17 @@
       </varlistentry>
 
       <varlistentry>
-	<term><option>-msse4.2</option>:</term>
-	<listitem>
+        <term><option>-msse4.2</option>:</term>
+        <listitem>
           <para>
-				(x86 only, added in GHC 7.4.1) Use the SSE4.2 instruction set to
-				implement some floating point and bit operations when using the
-				<link linkend="native-code-gen">native code generator</link>. The
-				resulting compiled code will only run on processors that
-				support SSE4.2 (Intel Core i7 and later). The
-				<link linkend="llvm-code-gen">LLVM backend</link> will also use
-				SSE4.2 if your processor supports it but detects this automatically
-				so no flag is required.
+                                (x86 only, added in GHC 7.4.1) Use the SSE4.2 instruction set to
+                                implement some floating point and bit operations when using the
+                                <link linkend="native-code-gen">native code generator</link>. The
+                                resulting compiled code will only run on processors that
+                                support SSE4.2 (Intel Core i7 and later). The
+                                <link linkend="llvm-code-gen">LLVM backend</link> will also use
+                                SSE4.2 if your processor supports it but detects this automatically
+                                so no flag is required.
           </para>
         </listitem>
       </varlistentry>
@@ -2327,15 +2650,15 @@
 
     <variablelist>
 
-  	<varlistentry>
-	  <term>
+        <varlistentry>
+          <term>
             <option>-fext-core</option>
             <indexterm><primary><option>-fext-core</option></primary></indexterm>
           </term>
-	  <listitem>
-	    <para>Generate <literal>.hcr</literal> files.</para>
-	  </listitem>
-	</varlistentry>
+          <listitem>
+            <para>Generate <literal>.hcr</literal> files.</para>
+          </listitem>
+        </varlistentry>
 
     </variablelist>
 
diff -urd 7.4.2-original/what_glasgow_exts_does.gen.xml original/what_glasgow_exts_does.gen.xml
--- 7.4.2-original/what_glasgow_exts_does.gen.xml	2012-08-15 20:41:12.000000000 +0900
+++ original/what_glasgow_exts_does.gen.xml	2012-09-07 23:25:57.000000000 +0900
@@ -24,7 +24,8 @@
 <option>-XLiberalTypeSynonyms</option>,
 <option>-XRankNTypes</option>,
 <option>-XTypeOperators</option>,
-<option>-XDoRec</option>,
+<option>-XExplicitNamespaces</option>,
+<option>-XRecursiveDo</option>,
 <option>-XParallelListComp</option>,
 <option>-XEmptyDataDecls</option>,
 <option>-XKindSignatures</option>,
